{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u5e8f\u8a00","text":"<p>\u5728\u8fd9\u91cc\u67e5\u770b\u5b8c\u6574\u6587\u6863 mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>=== \"C\"</p> <pre><code>C language\n</code></pre> <p>=== \"C++\"</p> <pre><code>C++ Language\n</code></pre>"},{"location":"broken/c-static-linking/","title":"\u9759\u6001\u94fe\u63a5","text":"<p>\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5c06\u4e86\u89e3\u9759\u6001\u94fe\u63a5\u548cC\u8bed\u8a00\u4e2d\u7684\u5730\u5740\u5206\u914d\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002</p>"},{"location":"broken/c-static-linking/#ucore","title":"\u7406\u89e3 uCore \u662f\u5982\u4f55\u6784\u5efa\u7684","text":"<p>\u5f53\u6211\u4eec\u5728 uCore \u76ee\u5f55\u4e0b\u6267\u884c <code>make</code> \u7f16\u8bd1\u5185\u6838\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf make \u5de5\u5177\u662f\u5982\u4f55\u8c03\u7528\u7f16\u8bd1\u5de5\u5177\u94fe\u7684\uff1a</p> <pre><code>$ make\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/console.c -o build/os/console.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/kalloc.c -o build/os/kalloc.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/loader.c -o build/os/loader.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/main.c -o build/os/main.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/printf.c -o build/os/printf.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/proc.c -o build/os/proc.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/queue.c -o build/os/queue.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/sbi.c -o build/os/sbi.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/string.c -o build/os/string.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/syscall.c -o build/os/syscall.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/timer.c -o build/os/timer.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/trap.c -o build/os/trap.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/vm.c -o build/os/vm.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/entry.S -o build/os/entry.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/switch.S -o build/os/switch.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/trampoline.S -o build/os/trampoline.o\nriscv64-unknown-elf-gcc {Compiler_Flags} -c os/link_app.S -o build/os/link_app.o\nriscv64-unknown-elf-ld -z max-page-size=4096 -T os/kernel.ld -o build/kernel build/os/console.o build/os/kalloc.o build/os/loader.o build/os/main.o build/os/printf.o build/os/proc.o build/os/queue.o build/os/sbi.o build/os/string.o build/os/syscall.o build/os/timer.o build/os/trap.o build/os/vm.o build/os/entry.o build/os/switch.o build/os/trampoline.o build/os/link_app.o\nriscv64-unknown-elf-objcopy -O binary build/kernel build/kernel.bin\nriscv64-unknown-elf-objdump -S build/kernel &gt; build/kernel.asm\nriscv64-unknown-elf-objdump -t build/kernel | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$/d' &gt; build/kernel.sym\nBuild kernel done\n</code></pre> <p>\u9996\u5148\uff0cmake \u4f1a\u8c03\u7528 gcc \u5bf9\u6240\u6709\u7684 .c \u548c .S \u6e90\u4ee3\u7801\u8fdb\u884c\u7f16\u8bd1 (-c xxx.c)\uff0c\u751f\u6210 .o \u7684 Relocatable object file (-o xxx.o)\u3002 \u7136\u540e\uff0cmake \u4f1a\u8c03\u7528 ld \u94fe\u63a5\u6240\u6709\u7684 .o \u6587\u4ef6\uff0c\u5e76\u4e14\u6307\u5b9a\u4e86\u4f7f\u7528 os/kernel.ld \u4f5c\u4e3a\u94fe\u63a5\u811a\u672c\uff0c\u751f\u6210\u5185\u6838\u7684 ELF \u6587\u4ef6 kernel (-o build/kernel)\u3002</p> <p>\u94fe\u63a5\u811a\u672c (Linker Script) \u6307\u5b9a\u4e86\u94fe\u63a5\u5668 ld \u5e94\u8be5\u5982\u4f55\u6392\u5e03\u6240\u6709 Object File \u4e2d\u7684\u7b26\u53f7\uff0c\u5e76\u751f\u6210\u6700\u7ec8\u7684 ELF \u6587\u4ef6\u3002</p> <pre><code>OUTPUT_ARCH(riscv)\nENTRY(_entry)\nBASE_ADDRESS = 0x80200000;\n\nSECTIONS\n{\n    . = BASE_ADDRESS;\n    skernel = .;\n\n    s_text = .;\n    .text : {\n        *(.text.entry)\n        *(.text .text.*)\n        . = ALIGN(0x1000);\n        *(trampsec)\n        . = ALIGN(0x1000);\n    }\n\n    . = ALIGN(4K);\n    e_text = .;\n    s_rodata = .;\n    .rodata : {\n        *(.rodata .rodata.*)\n    }\n\n    . = ALIGN(4K);\n    e_rodata = .;\n    s_data = .;\n    .data : {\n        *(.data.apps)\n        *(.data .data.*)\n        *(.sdata .sdata.*)\n    }\n\n    . = ALIGN(4K);\n    e_data = .;\n    .bss : {\n        *(.bss.stack)\n        s_bss = .;\n        *(.bss .bss.*)\n        *(.sbss .sbss.*)\n    }\n\n    . = ALIGN(4K);\n    e_bss = .;\n    ekernel = .;\n\n    /DISCARD/ : {\n        *(.eh_frame)\n    }\n}\n</code></pre> <p>\u5728 Linker Script \u4e2d\uff0c\u6211\u4eec\u9996\u5148\u6307\u5b9a\u4e86\u8f93\u51fa ELF \u7684\u67b6\u6784\u662f RISC-V \u67b6\u6784\uff0c\u5165\u53e3\u51fd\u6570\u4e3a _entry \u7b26\u53f7\uff0c\u5e76\u5b9a\u4e49\u4e86 ELF \u7684\u57fa\u5730\u5740\u4e3a 0x80200000\u3002</p> <p>\u5728\u540e\u7eed\u7684 SECTIONS \u4e2d\uff0c\u6211\u4eec\u9996\u5148\u6307\u5b9a\u4e86\u5f53\u524d\u4f4d\u7f6e\u4e3a BASE_ADDRESS\uff1a<code>. = BASE_ADDRESS;</code>\uff0c\u5e76\u5b9a\u4e49\u4e86 <code>skernel</code> \u8fd9\u4e2a\u7b26\u53f7\u6307\u5411\u5f53\u524d\u5730\u5740\u3002</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u6307\u5b9a\u4e86\u5982\u4f55\u6392\u5e03 text, rodata, data, bss \u7b49 Section\uff0c\u5e76\u5728\u4e0d\u540c\u7684 Section \u4e4b\u95f4\u4f7f\u7528 <code>. = ALIGN(4K)</code> \u786e\u4fddSection\u7684\u5f00\u59cb\u5730\u5740\u5bf9\u9f50\u5230\u4e86 4096 bytes \u7684\u8fb9\u754c\u3002\u6211\u4eec\u4e5f\u6307\u5b9a\u4e86 <code>skernel</code>\u3001<code>s_text</code>\u3001<code>e_text</code> \u7b49\u7b26\u53f7\u7684\u503c\uff0c\u8fd9\u4e9b\u503c\u5728\u540e\u7eed\u5185\u6838\u4e2d\u521d\u59cb\u5316\u5185\u6838\u7684\u9875\u8868\u4e2d\u4f1a\u88ab\u4f7f\u7528\u5230\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u5728 <code>.text</code> \u6bb5\u4e2d\u9996\u5148\u5305\u542b\u4e86\u4e00\u4e2a\u7279\u6b8a\u7684 Section <code>.text.entry</code>\uff0c\u8fd9\u4e2a section \u662f\u5728 <code>entry.S</code> \u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\uff1a</p> <pre><code>    .section .text.entry\n    .globl _entry\n_entry:\n</code></pre> <p>\u6211\u4eec\u5728 <code>entry.S</code> \u6587\u4ef6\u4e2d\u6307\u5b9a <code>_entry</code> \u7b26\u53f7\u5e94\u8be5\u88ab\u653e\u7f6e\u5230 <code>.text.entry</code> \u6bb5\uff0c\u5e76\u5728\u94fe\u63a5\u811a\u672c\u4e2d\u6307\u5b9a\u8fd9\u4e2a\u6bb5\u4e3a\u5185\u6838\u7684\u5f00\u59cb\u5730\u5740\u3002\u8fd9\u6837\u6211\u4eec\u5373\u53ef\u786e\u4fdd _entry \u4f1a\u88ab\u653e\u7f6e\u5230\u5185\u6838\u8d77\u59cb\u5730\u5740\u3002\u5f53\u6211\u4eec\u542f\u52a8\u5185\u6838\u65f6\uff0c\u6211\u4eec\u4f1a\u4ece\u8fd9\u4e2a\u8d77\u59cb\u5730\u5740\u5f00\u59cb\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u6267\u884c\u4e86\u5185\u6838\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53cd\u7f16\u8bd1 <code>build/kernel</code> \u6765\u89c2\u5bdf\u8fd9\u4e00\u70b9\uff1a</p> <pre><code>$ riscv64-linux-gnu-objdump -d  build/kernel\nDisassembly of section .text:\n\n0000000080200000 &lt;_entry&gt;:\n    80200000:   0000100f                fence.i\n    80200004:   18001073                csrw    satp,zero\n    80200008:   00094117                auipc   sp,0x94\n    8020000c:   ff810113                addi    sp,sp,-8 # 80294000 &lt;idle&gt;\n    80200010:   00001097                auipc   ra,0x1\n    80200014:   a80080e7                jalr    -1408(ra) # 80200a90 &lt;main&gt;\n</code></pre>"},{"location":"broken/c-static-linking/#_2","title":"\u7406\u89e3\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668","text":"<p>\u63a8\u8350\u9605\u8bfb\uff1aCSAPP Chapter 7: Linking</p> <p>\u5728\u8fdb\u884c\u8fd9\u4e00\u5c0f\u8282\u7684\u5b66\u4e60\u524d\uff0c\u6211\u4eec\u975e\u5e38\u5efa\u8bae\u4f60\u9605\u8bfb CSAPP \u4e2d\u7684\u7b2c7\u7ae0 \u94fe\u63a5\u3002</p> <p>https://csapp.cs.cmu.edu/2e/ch7-preview.pdf</p> <p>\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684 printf \u4f8b\u5b50\u6765\u8bf4\u660e\u9759\u6001\u94fe\u63a5\u4e2d\uff0c\u94fe\u63a5\u5668\u662f\u5982\u4f55\u4e3a\u4e0d\u540c\u7684\u7b26\u53f7\u5206\u914d\u5730\u5740\u7684\uff0c\u4ee5\u53ca\u4ece\u6c47\u7f16\u5206\u6790\u4ee3\u7801\u662f\u5982\u4f55\u5f97\u5230\u7b26\u53f7\u7684\u5730\u5740 (Addressing)\u3002</p> <p>\u5728\u8ba1\u7b97\u673a\u7684\u4e16\u754c\u4e2d\uff0c\u6240\u6709\u53d8\u91cf\u3001\u5916\u8bbe\u5747\u662f\u5185\u5b58\u5730\u5740\u8bbf\u95ee\u7684\uff0cCPU \u53ea\u4e0d\u8fc7\u662f\u5728\u4e0d\u540c\u7684\u5185\u5b58\u5730\u5740\u4e0a\u5c06\u6570\u636e\u6765\u56de\u642c\u8fd0\u800c\u5df2\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u4e86\u89e3\u5728\u6c47\u7f16\u4ee3\u7801\u4e2d\uff0cCPU \u662f\u5982\u4f55\u5f97\u5230\u67d0\u4e2a\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\u7684\u3002</p> <p>\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50 (lab1-1.c) \u5b9a\u4e49\u4e86\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf <code>a</code>\uff0c\u4e00\u4e2a <code>main</code> \u7684\u6808\u4e0a\u53d8\u91cf <code>b</code>\uff0c\u4e00\u4e2a <code>recursive</code> \u7684\u6808\u4e0a\u53d8\u91cf <code>c</code>\uff0c\u5e76\u6253\u5370\u5b83\u4eec\u7684\u5730\u5740\u3002</p> example.c<pre><code>#include &lt;stdio.h&gt;\n\nint a = 0;\n\nvoid recursive(int depth) {\n    int c;\n    if (depth == 5) return;\n    printf(\"[%d] c is at: %p\\n\", depth, &amp;c);\n    recursive(depth + 1);\n}\n\nint main() {\n    int b;\n    printf(\"main is at: %p\\n\", &amp;main);\n    printf(\"a is at: %p\\n\", &amp;a);\n    printf(\"b is at: %p\\n\", &amp;b);\n    recursive(0);\n}\n</code></pre> <p>\u6211\u4eec\u4f7f\u7528 <code>riscv64-linux-gnu-gcc -O0 -g -static -march=rv64g -Wl,--no-relax lab1-1.c</code> \u7f16\u8bd1\u5b83\u3002<code>-O0</code> \u8868\u793a\u7981\u7528\u4efb\u4f55\u7f16\u8bd1\u5668\u4f18\u5316\uff1b<code>-g</code> \u8868\u793a\u751f\u6210\u7684 ELF \u6587\u4ef6\u5e26\u4e0a\u8c03\u8bd5\u4fe1\u606f\uff0c\u65b9\u4fbf objdump \u65f6\u9644\u5e26\u4e0a\u6e90\u4ee3\u7801\uff1b<code>-static</code> \u8868\u793a\u751f\u6210\u9759\u6001\u94fe\u63a5\u7684 ELF \u6587\u4ef6\uff1b<code>-march=rv64g</code> \u963b\u6b62\u4e86\u7f16\u8bd1\u5668\u751f\u6210 RISC-V Compressed \u77ed\u6307\u4ee4\u3002</p> <p>\u6211\u4eec\u8fd0\u884c\u7f16\u8bd1\u4ea7\u7269\uff1a</p> <pre><code>$ ./a.out\nmain is at: 0x105e0\na is at: 0x7e8d8\nb is at: 0x7f2c6f5ffb2c\n[0] c is at: 0x7f2c6f5ffb0c\n[1] c is at: 0x7f2c6f5ffadc\n[2] c is at: 0x7f2c6f5ffaac\n[3] c is at: 0x7f2c6f5ffa7c\n[4] c is at: 0x7f2c6f5ffa4c\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c<code>main</code>\u7684\u5730\u5740\u662f <code>0x105e0</code>\uff0c<code>a</code>\u7684\u5730\u5740\u662f <code>0x7e8d8</code> \uff0c\u800c <code>b</code> \u4e0e <code>c</code> \u7684\u5730\u5740\u662f\u4ee5 <code>0x7f</code> \u5f00\u5934\u7684\u3002</p> <p>\u591a\u6b21\u8fd0\u884c a.out \u53ef\u4ee5\u53d1\u73b0\uff0cmain \u548c a \u7684\u5730\u5740\u662f\u56fa\u5b9a\u7684\uff0c\u800c b \u548c c \u7684\u5730\u5740\u5747\u4ee5 0x7f \u5f00\u5934\uff0c\u4f46\u662f\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u5e76\u4e14\uff0c\u4e94\u4e2a <code>c</code> \u7684\u5730\u5740\u4e4b\u95f4\u5747\u76f8\u5dee\u56fa\u5b9a\u7684 <code>0x30</code>\u3002</p> <p>\u8fd9\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u5c06 <code>main</code> \u653e\u7f6e\u5230\u4e86 <code>.text</code> \u6bb5\uff0c<code>a</code> \u653e\u7f6e\u5230\u4e86\u7a0b\u5e8f\u7684 <code>.data</code> \u6bb5\uff0c\u8fd9\u4e24\u4e2a\u7b26\u53f7\u62e5\u6709\u56fa\u5b9a\u7684\u5730\u5740\uff1b\u800c <code>b</code> \u4e0e <code>c</code> \u5219\u662f\u5728\u7a0b\u5e8f\u7684\u6808\u4e0a\u5206\u914d\u7684\u3002</p>"},{"location":"broken/c-static-linking/#aout","title":"\u53cd\u6c47\u7f16 a.out","text":"<p>\u6211\u4eec\u901a\u8fc7 <code>objdump</code> \u5de5\u5177\u67e5\u770b\u7f16\u8bd1\u4ea7\u7269 <code>a.out</code> \u4e2d <code>main</code> \u7b26\u53f7\u7684\u6c47\u7f16\u4ee3\u7801\uff0c<code>--disassemble=main</code> \u8868\u793a\u53ea\u53cd\u6c47\u7f16 <code>main</code> \u7b26\u53f7\uff0c<code>-S</code> \u8868\u793a\u5728\u53cd\u6c47\u7f16\u4e0a\u6807\u6ce8\u5bf9\u5e94\u7684\u6e90\u4ee3\u7801\u3002</p> <pre><code>$ riscv64-linux-gnu-objdump --disassemble=main -S a.out\n\na.out:     file format elf64-littleriscv\n\nDisassembly of section .text:\n\n00000000000105e0 &lt;main&gt;:\nint main() {\n   105e0:       fe010113                addi    sp,sp,-32\n   105e4:       00113c23                sd      ra,24(sp)\n   105e8:       00813823                sd      s0,16(sp)\n   105ec:       02010413                addi    s0,sp,32\n    int b;\n    printf(\"main is at: %p\\n\", &amp;main);\n   105f0:       00000597                auipc   a1,0x0\n   105f4:       ff058593                addi    a1,a1,-16 # 105e0 &lt;main&gt;\n   105f8:       0003f517                auipc   a0,0x3f\n   105fc:       63850513                addi    a0,a0,1592 # 4fc30 &lt;__rseq_flags+0x1c&gt;\n   10600:       1ad000ef                jal     10fac &lt;_IO_printf&gt;\n    printf(\"a is at: %p\\n\", &amp;a);\n   10604:       84018593                addi    a1,gp,-1984 # 7e8d8 &lt;a&gt;\n   10608:       0003f517                auipc   a0,0x3f\n   1060c:       63850513                addi    a0,a0,1592 # 4fc40 &lt;__rseq_flags+0x2c&gt;\n   10610:       19d000ef                jal     10fac &lt;_IO_printf&gt;\n    printf(\"b is at: %p\\n\", &amp;b);\n   10614:       fec40793                addi    a5,s0,-20\n   10618:       00078593                mv      a1,a5\n   1061c:       0003f517                auipc   a0,0x3f\n   10620:       63450513                addi    a0,a0,1588 # 4fc50 &lt;__rseq_flags+0x3c&gt;\n   10624:       189000ef                jal     10fac &lt;_IO_printf&gt;\n    recursive(0);\n   10628:       00000513                li      a0,0\n   1062c:       f45ff0ef                jal     10570 &lt;recursive&gt;\n   10630:       00000793                li      a5,0\n   10634:       00078513                mv      a0,a5\n   10638:       01813083                ld      ra,24(sp)\n   1063c:       01013403                ld      s0,16(sp)\n   10640:       02010113                addi    sp,sp,32\n   10644:       00008067                ret\n</code></pre> <p>\u8f93\u51fa\u7684\u7b2c\u4e00\u884c\u544a\u8bc9\u6211\u4eec <code>a.out</code> \u6587\u4ef6\u7684\u683c\u5f0f\u662f <code>elf64-littleriscv</code>\uff0c\u8fd9\u4ee3\u8868\u8fd9\u662f\u4e00\u4e2a 64 \u4f4d ELF \u6587\u4ef6\uff0c\u67b6\u6784\u4e3a RISC-V \u5c0f\u7aef\u5e8f\u3002\u7b2c\u4e8c\u884c\u8868\u793a\u6211\u4eec\u6b63\u5728\u53cd\u6c47\u7f16\u5176\u4e2d\u7684 <code>.text</code> \u6bb5\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728 <code>10600</code>\u3001<code>10610</code> \u548c <code>10624</code> \u5904\uff0c\u5206\u522b\u6709\u4e09\u6b21 <code>jal 10fac &lt;_IO_printf&gt;</code>\uff0c\u8fd9\u8868\u793a\u8c03\u7528\u4e86 <code>printf</code> \u51fd\u6570\uff0c\u800c <code>printf</code> \u51fd\u6570\u5730\u5740\u4e3a <code>0x10fac</code>\u3002</p>"},{"location":"broken/c-static-linking/#_3","title":"\u6c47\u7f16\u4e2d\u7684\u5bfb\u5740","text":"<p>\u5728\u8fd9\u4e00\u5c0f\u8282\uff0c\u6211\u4eec\u4e3b\u8981\u63a2\u8ba8\u5728\u6c47\u7f16\u5c42\u9762\u4e0a\uff0c\u7f16\u8bd1\u5668\u662f\u5982\u4f55\u751f\u6210\u6c47\u7f16\u6307\u4ee4\u6765\u627e\u5230\u67d0\u4e2a\u7b26\u53f7\u7684\u5730\u5740\u7684\u3002</p> <p>\u5728\u4e0a\u8ff0\u7a0b\u5e8f\u8c03\u7528 printf \u65f6\uff0c\u6211\u4eec\u4f20\u5165\u4e86\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u67d0\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u3002</p> <p>\u6839\u636e <code>jal</code> \u6307\u4ee4\u524d\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u6d4b <code>jal printf</code> \u524d\u7684\u5bc4\u5b58\u5668\u503c\u3002\u5e76\u4e14\uff0c\u6839\u636e RISC-V \u67b6\u6784\u4e0b\u7684\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a (Calling Convention, \u524d 8 \u4e2a\u6574\u6570\u53c2\u6570\u901a\u8fc7 a0-a7 \u4f20\u9012)\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8c03\u7528 <code>printf</code> \u7684\u5177\u4f53\u53c2\u6570\uff1a</p> <pre><code># \u7b2c\u4e00\u6b21\uff1a\n   105f0:       00000597                auipc   a1,0x0\n   105f4:       ff058593                addi    a1,a1,-16 # 105e0 &lt;main&gt;\n   105f8:       0003f517                auipc   a0,0x3f\n   105fc:       63850513                addi    a0,a0,1592 # 4fc30 &lt;__rseq_flags+0x1c&gt;\n# a0 = 0x4fc30, a1 = 0x105e0\n# printf(0x4fc30, 0x105e0)\n   10600:       1ad000ef                jal     10fac &lt;_IO_printf&gt;\n\n# \u7b2c\u4e8c\u6b21\uff1a\n   10604:       84018593                addi    a1,gp,-1984 # 7e8d8 &lt;a&gt;\n   10608:       0003f517                auipc   a0,0x3f\n   1060c:       63850513                addi    a0,a0,1592 # 4fc40 &lt;__rseq_flags+0x2c&gt;\n# a0 = 0x4fc40, a1 = 0x7e8d8\n# printf(0x4fc40, 0x7e8d8)\n   10610:       19d000ef                jal     10fac &lt;_IO_printf&gt;\n</code></pre> <p>auipc</p> <p>AUIPC (add upper immediate to pc) is used to build pc-relative addresses and uses the U-type format. AUIPC appends 12 low-order zero bits to the 20-bit U-immediate, sign-extends the result to 64 bits, then adds it to the pc and places the result in register rd.</p> <p>AUIPC \u662f RISC-V \u4e2d\u5b9e\u73b0 PC-Relative Addressing (PC\u76f8\u5bf9\u5bfb\u5740) \u7684\u65b9\u5f0f\u3002AUIPC \u4f1a\u5c06 20 \u4f4d\u7684\u7acb\u5373\u6570\u5de6\u79fb 12 \u4f4d\uff0c\u7b26\u53f7\u6269\u5c55\u540e\u52a0\u4e0a pc \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5e76\u4fdd\u5b58\u5230\u6307\u5b9a\u7684 rd \u5bc4\u5b58\u5668\u4e2d\u3002</p> <p>\u4f8b\u5982\uff0c<code>auipc   a1,0x0</code>\uff0c\u5c06 pc (0x105f0) \u52a0\u4e0a 0x0\uff0c\u5b58\u5165 a1 \u4e2d\u3002<code>addi    a1,a1,-16</code> \u5c06 a1 \u51cf\u53bb 0x01\uff0c\u5f97\u5230 0x105e0\uff0c\u5373 <code>main</code> \u7684\u5730\u5740\u3002</p> <p>\u6839\u636e <code>printf</code> \u7684\u5b9a\u4e49: <code>int printf(const char *restrict format, ...);</code>\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570 a0 \u5e94\u8be5\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 <code>objdump</code> \u89c2\u5bdf\u6307\u5b9a\u5730\u5740\u5904\u7684\u503c\u6765\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff1a</p> <pre><code>$ riscv64-linux-gnu-objdump -s --start-address=0x4fc30 --stop-address=0x4fc60\n\na.out:     file format elf64-littleriscv\n\nContents of section .rodata:\n 4fc30 6d61696e 20697320 61743a20 25700a00  main is at: %p..\n 4fc40 61206973 2061743a 2025700a 00000000  a is at: %p.....\n 4fc50 62206973 2061743a 2025700a 00000000  b is at: %p.....\n</code></pre> <p><code>objdump</code> \u7684\u8f93\u51fa\u4e2d\uff0c\u6700\u5de6\u4fa7\u662f\u5185\u5b58\u5730\u5740 <code>4fc30</code>\uff0c\u540e\u9762\u8ddf\u968f\u7684\u662f\u8be5\u5730\u5740\u4e0a0x10 (32) bytes \u7684\u4e8c\u8fdb\u5236\u5185\u5bb9\uff0c\u800c\u6700\u540e\u662f\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u5185\u5bb9\u7684 ASCII \u89e3\u7801\u3002</p> <p><code>objdump</code> \u7684\u7ed3\u679c\u8868\u793a\uff0c<code>0x4fc30</code> \u5230 <code>0x4fc60</code> \u662f .rodata \u6bb5\u7684\u5185\u5bb9\uff1b\u5730\u5740 <code>0x4fc30</code> \u5904\u662f\u4e00\u4e2a NULL-terminated \u7684\u5b57\u7b26\u4e32 <code>main is at: %p..</code>\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u7b2c\u4e00\u6b21\u8c03\u7528 <code>printf</code> \u65f6\u6307\u5b9a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002</p> <p>\u7b2c\u4e8c\u4e2a\u53c2\u6570 a1 \u5219\u5206\u522b\u662f <code>0x105e0</code> \u548c <code>0x7e8d8</code>\uff0c\u5b83\u4eec\u5206\u522b\u662f <code>main</code> \u548c <code>a</code> \u7684\u5730\u5740\u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5b83\u4eec\u5206\u522b\u662f\u901a\u8fc7 <code>auipc + addi</code> \u548c <code>addi a1,gp,xxx</code> \u8ba1\u7b97\u51fa\u6765\u7684\u3002</p> <p>\u5bfb\u5740 (Addressing)</p> <p>\u5bfb\u5740\u6a21\u5f0f\u8868\u793a\u4e86\u5982\u4f55\u8ba1\u7b97\u5185\u5b58\u5730\u5740\uff0c\u5728 RISC-V \u4e2d\uff0c\u5bfb\u5740\u6a21\u5f0f (Addressing Mode) \u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a</p> <ul> <li>PC-relative: auipc, jal, branch \u7b49\u6307\u4ee4\uff0c\u901a\u8fc7\u5f53\u524d\u6307\u4ee4\u7684 PC \u503c\u52a0\u4e0a\u4e00\u4e2a\u504f\u79fb\u91cf\u5f97\u5230</li> <li>Register-offset: jalr, ld, sw \u7b49\u6240\u6709\u8bbf\u5b58\u6307\u4ee4\uff0c\u901a\u8fc7\u67d0\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u52a0\u4e0a\u4e00\u4e2a\u504f\u79fb\u91cf\u5f97\u5230</li> <li>Absolute: lui \u6307\u4ee4\uff0c\u76f4\u63a5\u901a\u8fc7\u7acb\u5373\u6570\u5f97\u5230\u5730\u5740</li> </ul> <p>\u6211\u4eec\u53d1\u73b0\uff0cRISC-V \u7f16\u8bd1\u5668\u901a\u5e38\u4f1a\u4f7f\u7528 auipc + addi \u7684\u65b9\u5f0f\u4f7f\u7528 PC-Relative \u6765\u5f97\u5230\u76ee\u6807\u7b26\u53f7\u7684\u5730\u5740\u3002</p>"},{"location":"broken/c-static-linking/#_4","title":"\u7b26\u53f7\u89e3\u6790","text":"<p>\u6211\u4eec\u5728\u4e4b\u524d\u7f16\u8bd1 <code>lab1-1.c</code> \u65f6\uff0c\u4f7f\u7528\u4e86 gcc \u76f4\u63a5\u7f16\u8bd1\u3002\u5b9e\u9645\u4e0a gcc \u4f1a\u8fdb\u884c\u7f16\u8bd1\u5e76\u94fe\u63a5\u3002\u73b0\u5728\uff0c\u6211\u4eec\u5728\u7f16\u8bd1 <code>lab1-1.c</code> \u65f6\u52a0\u5165 <code>-c</code> \u53c2\u6570\uff0c\u544a\u8bc9 gcc \u53ea\u8981\u8fdb\u884c\u7f16\u8bd1\u800c\u4e0d\u8fdb\u884c\u94fe\u63a5\uff0c\u8fd9\u4e00\u6b65\u4f1a\u751f\u6210Relocatable Object file <code>lab1-1.o</code></p> <pre><code>$ riscv64-linux-gnu-gcc -O0 -g -static -march=rv64g -c lab1-1.c\n</code></pre> <p>\u6211\u4eec\u4f7f\u7528 <code>llvm-readelf</code> \u5de5\u5177\u89e3\u6790\u7f16\u8bd1\u4ea7\u7269 <code>lab1-1.o</code>\uff1a</p> <pre><code>$ llvm-readelf-17 --all lab1-1.o\n\nELF Header:\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00\n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              REL (Relocatable file)\n  Machine:                           RISC-V\n  Version:                           0x1\n  Entry point address:               0x0\n  Start of program headers:          0 (bytes into file)\n  Start of section headers:          6856 (bytes into file)\n  Flags:                             0x4, double-float ABI\n  Size of this header:               64 (bytes)\n  Size of program headers:           0 (bytes)\n  Number of program headers:         0\n  Size of section headers:           64 (bytes)\n  Number of section headers:         23\n  Section header string table index: 22\nThere are 23 section headers, starting at offset 0x1ac8:\n\nSection Headers:\n  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0\n  [ 1] .text             PROGBITS        0000000000000000 000040 0000f4 00  AX  0   0  4\n  [ 2] .rela.text        RELA            0000000000000000 000fb8 000390 18   I 20   1  8\n  [ 3] .data             PROGBITS        0000000000000000 000134 000000 00  WA  0   0  1\n  [ 4] .bss              NOBITS          0000000000000000 000134 000004 00  WA  0   0  4\n  [ 5] .rodata           PROGBITS        0000000000000000 000138 000045 00   A  0   0  8\n  [ 6] .debug_info       PROGBITS        0000000000000000 00017d 000108 00      0   0  1\n  [ 7] .rela.debug_info  RELA            0000000000000000 001348 000288 18   I 20   6  8\n  [ 8] .debug_abbrev     PROGBITS        0000000000000000 000285 0000c8 00      0   0  1\n  [ 9] .debug_aranges    PROGBITS        0000000000000000 00034d 000030 00      0   0  1\n  [10] .rela.debug_aranges RELA          0000000000000000 0015d0 000060 18   I 20   9  8\n  [11] .debug_line       PROGBITS        0000000000000000 00037d 0000a3 00      0   0  1\n  [12] .rela.debug_line  RELA            0000000000000000 001630 0002d0 18   I 20  11  8\n  [13] .debug_str        PROGBITS        0000000000000000 000420 0000e9 01  MS  0   0  1\n  [14] .debug_line_str   PROGBITS        0000000000000000 000509 00009e 01  MS  0   0  1\n  [15] .comment          PROGBITS        0000000000000000 0005a7 00001f 01  MS  0   0  1\n  [16] .note.GNU-stack   PROGBITS        0000000000000000 0005c6 000000 00      0   0  1\n  [17] .eh_frame         PROGBITS        0000000000000000 0005c8 000068 00   A  0   0  8\n  [18] .rela.eh_frame    RELA            0000000000000000 001900 0000f0 18   I 20  17  8\n  [19] .riscv.attributes RISCV_ATTRIBUTES 0000000000000000 000630 000061 00      0   0  1\n  [20] .symtab           SYMTAB          0000000000000000 000698 0007c8 18     21  79  8\n  [21] .strtab           STRTAB          0000000000000000 000e60 000156 00      0   0  1\n  [22] .shstrtab         STRTAB          0000000000000000 0019f0 0000d2 00      0   0  1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n  L (link order), O (extra OS processing required), G (group), T (TLS),\n  C (compressed), x (unknown), o (OS specific), E (exclude),\n  R (retain), p (processor specific)\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u6ce8\u610f\u5230\u4ee5\u4e0b\u51e0\u70b9\uff1a</p> <ol> <li> <p>ELF Header \u4e2d\u7684 Type \u662f <code>REL (Relocatable file)</code>\uff0c\u8fd9\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u3002</p> </li> <li> <p>ELF \u6587\u4ef6\u4e2d\u4e00\u5171\u6709 23 \u4e2a Section\uff0c\u6bcf\u4e2a Section \u90fd\u6709\u81ea\u5df1\u7684\u540d\u5b57 (Name)\u3001\u7c7b\u578b (Type)\u3001\u5730\u5740 (Address)\u3001\u5728 ELF \u6587\u4ef6\u4e2d\u7684\u504f\u79fb\u91cf (Off)\u3001\u5927\u5c0f (Size) \u548c Flag</p> </li> <li> <p>Flag \u4e2d\u6807\u5fd7\u4e86\u6bcf\u4e2a Section \u7684\u4e00\u4e9b\u5c5e\u6027\uff0c\u4f8b\u5982 <code>A (alloc)</code>\u3001<code>W (write)</code>\u3001<code>X (execute)</code>\u3002<code>A (alloc)</code> \u8868\u793a\u5728\u52a0\u8f7d ELF \u65f6\uff0c\u8fd9\u4e2a Section \u5e94\u8be5\u88ab\u5206\u914d\u5185\u5b58\u5e76\u52a0\u8f7d\u3002\u800c <code>W</code> \u4e0e <code>X</code> \u5219\u8868\u793a\u6bb5\u662f\u5426\u53ef\u5199\u548c\u53ef\u6267\u884c\u3002</p> </li> <li> <p>\u6211\u4eec\u53d1\u73b0\u4e86\u5e38\u89c1\u7684 <code>.text</code> \u6bb5\uff0c\u5b83\u662f AX \uff1a\u9700\u8981\u88ab\u52a0\u8f7d\u3001\u53ef\u6267\u884c\u7684\u3002<code>.data</code> \u6bb5\u548c <code>.bss</code> \u6bb5\u662f AW \u7684\uff1a\u9700\u8981\u88ab\u52a0\u8f7d\u3001\u53ef\u5199\u7684\u3002\u800c <code>.rodata</code> \u662f\u8fd1\u9700\u8981\u88ab\u52a0\u8f7d\u7684\uff0c\u4e0d\u53ef\u5199\u548c\u4e0d\u53ef\u6267\u884c\u7684\u3002</p> </li> <li> <p>\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u4e2a\u7279\u6b8a\u7684 Section <code>.symtab</code>\uff0c\u5b83\u5b58\u50a8\u7740\u8fd9\u4e2a Relocatable file \u7684 Symbol Table \u7b26\u53f7\u8868\u3002</p> </li> </ol> <p>\u7b26\u53f7\u8868\u662f\u8fde\u63a5\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u7684\u91cd\u8981\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u8fdb\u4e00\u6b65\u89c2\u5bdf <code>lab1-1.o</code> \u7684\u7b26\u53f7\u8868\uff1a</p> <pre><code>$ llvm-readelf-17 --symbols lab1-1.o\nSymbol table '.symtab' contains 83 entries:\n   Num:    Value          Size Type    Bind   Vis       Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   UND \n     1: 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS lab1-1.c\n     2: 0000000000000000     0 SECTION LOCAL  DEFAULT     1 .text\n     3: 0000000000000000     0 SECTION LOCAL  DEFAULT     3 .data\n     4: 0000000000000000     0 SECTION LOCAL  DEFAULT     4 .bss\n     5: 0000000000000000     0 SECTION LOCAL  DEFAULT     5 .rodata\n    ...\n    79: 0000000000000000     4 OBJECT  GLOBAL DEFAULT     4 a\n    80: 0000000000000000   120 FUNC    GLOBAL DEFAULT     1 recursive\n    81: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND printf\n    82: 0000000000000078   124 FUNC    GLOBAL DEFAULT     1 main\n</code></pre> <p>\u7b26\u53f7\u8868\u4e2d\u6709 83 \u6761 Symbol\uff0c\u6bcf\u4e00\u6761\u5747\u6709\u4e00\u4e2a\u503c\u3001\u5927\u5c0f\u3001\u7c7b\u578b\u3001\u53ef\u89c1\u57df (Bind)\u3001\u540d\u5b57 (Name)\uff0c\u9664\u6b64\u4e4b\u5916\uff0cNdx \u4e00\u5217\u8868\u793a\u4e86\u8fd9\u4e2a\u7b26\u53f7\u662f\u5c5e\u4e8e\u54ea\u4e2a Section \u7684\u3002</p> <p>\u4f8b\u5982\uff0c<code>main</code> \u548c <code>recursize</code> \u662f\u4e24\u4e2a\u51fd\u6570\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u7c7b\u578b\u662f FUNC\uff0cNdx \u4e3a 1\uff0c\u8868\u660e\u5b83\u5c5e\u4e8e Section Headers \u4e2d\u7684 1 \u53f7 Section <code>.text</code>\u3002 <code>a</code> \u662f\u4e00\u4e2a\u672a\u88ab\u521d\u59cb\u5316\u7684 int \u53d8\u91cf\uff0c\u6240\u4ee5\u5b83\u7684\u7c7b\u578b\u662f OBJECT\uff0c\u6240\u5c5e\u4e8e <code>.bss</code> \u6bb5\uff0c\u5927\u5c0f\u4e3a 4 \u4e2a\u5b57\u8282\u3002 \u7279\u522b\u7684\uff0c\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u5f15\u7528\u4e86\u5916\u90e8\u7b26\u53f7 (\u6ca1\u6709\u5728 lab1-1.c \u4e2d\u5b9a\u4e49) printf\uff0c\u5b83\u7684 Ndx \u662f UND (\u8868\u660e\u8fd9\u4e2a\u7b26\u53f7\u88ab\u8be5\u6587\u4ef6\u5f15\u7528\u4e86\uff0c\u4f46\u662f\u6ca1\u6709\u5728\u8be5\u6587\u4ef6\u4e2d\u88ab\u5b9a\u4e49)\uff0c\u5e76\u4e14\u6211\u4eec\u4e5f\u4e0d\u77e5\u9053\u5b83\u7684\u7c7b\u578b\u3002</p> <p>\u94fe\u63a5\u5668\u4f1a\u8bfb\u53d6\u6240\u6709\u8981\u94fe\u63a5\u7684 .o \u6587\u4ef6\u7684\u7b26\u53f7\u8868\uff0c\u7ed3\u5408\u6240\u6709\u88ab\u5b9a\u4e49\u7684\u7b26\u53f7\uff0c\u548c\u88ab\u5f15\u7528\u7684\u5916\u90e8\u7b26\u53f7\u3002\u8fd9\u4e00\u6b65\u88ab\u6210\u4e3a\u7b26\u53f7\u89e3\u6790 (Symbol Resolution)\u3002</p>"},{"location":"broken/c-static-linking/#_5","title":"\u7b26\u53f7\u91cd\u5b9a\u4f4d","text":"<p>\u6211\u4eec\u4f7f\u7528 <code>objdump</code> \u89c2\u5bdf\u751f\u6210\u7684 lab1-1.o \u6587\u4ef6\u3002</p> <pre><code>$ riscv64-linux-gnu-objdump --disassemble=main -S lab1-1.o\n\nDisassembly of section .text:\n\n0000000000000078 &lt;main&gt;:\nint main() {\n  78:   fe010113                addi    sp,sp,-32\n  7c:   00113c23                sd      ra,24(sp)\n  80:   00813823                sd      s0,16(sp)\n  84:   02010413                addi    s0,sp,32\n    int b;\n    printf(\"main is at: %p\\n\", &amp;main);\n  88:   00000597                auipc   a1,0x0\n  8c:   00058593                mv      a1,a1\n  90:   00000517                auipc   a0,0x0\n  94:   00050513                mv      a0,a0\n  98:   00000097                auipc   ra,0x0\n  9c:   000080e7                jalr    ra # 98 &lt;main+0x20&gt;\n    printf(\"a is at: %p\\n\", &amp;a);\n  a0:   00000597                auipc   a1,0x0\n  a4:   00058593                mv      a1,a1\n  a8:   00000517                auipc   a0,0x0\n  ac:   00050513                mv      a0,a0\n  b0:   00000097                auipc   ra,0x0\n  b4:   000080e7                jalr    ra # b0 &lt;main+0x38&gt;\n    printf(\"b is at: %p\\n\", &amp;b);\n</code></pre> <p>\u6211\u4eec\u5bf9\u6bd4 <code>a.out</code> \u548c <code>lab1-1.o</code> \u4e2d\u7b2c\u4e00\u6b21 <code>printf</code> \u65f6\u7684\u6c47\u7f16\u4ee3\u7801\uff1a</p> <pre><code># lab1-1.o:\n  88:          00000597                auipc   a1,0x0\n  8c:          00058593                mv      a1,a1\n  90:          00000517                auipc   a0,0x0\n  94:          00050513                mv      a0,a0\n  98:          00000097                auipc   ra,0x0\n  9c:          000080e7                jalr    ra # 98 &lt;main+0x20&gt;\n# a.out:\n  105f0:       00000597                auipc   a1,0x0\n  105f4:       ff058593                addi    a1,a1,-16 # 105e0 &lt;main&gt;\n  105f8:       0003f517                auipc   a0,0x3f\n  105fc:       63850513                addi    a0,a0,1592 # 4fc30 &lt;__rseq_flags+0x1c&gt;\n  10600:       1ad000ef                jal     10fac &lt;_IO_printf&gt;\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c<code>lab1-1.o</code> \u4e2d\uff0c<code>auipc</code> \u548c <code>mv</code> \u6307\u4ee4\u4e2d\u7684\u7acb\u5373\u6570\u5747\u4e3a 0\u3002\u8fd9\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e9b\u7b26\u53f7 (main\u51fd\u6570\u3001printf\u51fd\u6570\u3001\u53d8\u91cfa\u7b49) \u5c06\u4f1a\u88ab\u94fe\u63a5\u5668\u5b89\u6392\u5230\u4ec0\u4e48\u5730\u5740\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u53ea\u80fd\u6446\u70c2\uff0c\u751f\u6210\u4e86\u4e00\u4e9b\u5360\u4f4d\u6307\u4ee4\uff0c\u5e76\u751f\u6210\u4e86\u4e00\u4e9b Relocation \u4fe1\u606f\uff0c\u5c06\u6700\u7ec8\u786e\u8ba4\u5730\u5740\u7684\u4efb\u52a1\u7559\u7ed9\u4e86\u94fe\u63a5\u5668\u5904\u7406\u3002</p> <p>\u5728\u9759\u6001\u94fe\u63a5\u4e2d\uff0c\u51fd\u6570\u7684\u5730\u5740\u548c\u5168\u5c40\u53d8\u91cf\u7684\u5730\u5740\u5728\u94fe\u63a5\u9636\u6bb5\u88ab\u786e\u5b9a\u3002\u94fe\u63a5\u5668\u4f1a\u6839\u636e Linker Script \u5408\u5e76\u6240\u6709 object \u6587\u4ef6\u4e2d\u7684\u6240\u6709\u7b26\u53f7\uff0c\u5e76\u4e3a\u5176\u5206\u914d\u5730\u5740\u3002 \u5728\u5206\u914d\u5730\u5740\u7ed3\u675f\u540e\uff0c\u94fe\u63a5\u5668\u4f1a\u6839\u636e\u7f16\u8bd1\u5668\u751f\u6210\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u5728\u6307\u5b9a\u6c47\u7f16\u4ee3\u7801\u7684\u4f4d\u7f6e\u586b\u5165\u7acb\u5373\u6570\uff0c\u4ee5\u786e\u4fdd\u8fd9\u4e9b\u5bfb\u5740\u4ee3\u7801\u80fd\u6b63\u786e\u7684\u627e\u5230\u5b83\u4eec\u6240\u5f15\u7528\u7684\u7b26\u53f7\u3002\u8fd9\u4e00\u6b65\u88ab\u6210\u4e3a Relocation \u91cd\u5b9a\u4f4d\u3002</p> <p>\u5728 lab1-1.o \u4e2d\uff0c<code>main</code> \u7684\u5730\u5740\u662f 0x0078\uff0c\u800c\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff0c<code>main</code> \u7684\u5730\u5740\u662f <code>0x105e0</code>\u3002\u8fd9\u662f\u56e0\u4e3a\u94fe\u63a5\u5668\u5b8c\u6210\u4e86\u5bf9 lab1-1.o \u4e2d <code>main</code> \u51fd\u6570\u7684\u91cd\u5b9a\u4f4d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c<code>main</code> \u51fd\u6570\u6700\u7ec8\u88ab\u91cd\u5b9a\u4f4d\u5230\u4e86 <code>0x105e0</code>\u3002\u5e76\u4e14\uff0c<code>printf</code> \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e5f\u88ab\u6b63\u786e\u5b9a\u4f4d\u4e86 (0x4fc30)\u3002</p> <p>\u6211\u4eec\u4f7f\u7528 <code>readelf</code> \u5de5\u5177\u67e5\u9605 lab1-1.o \u6587\u4ef6\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53d1\u73b0 <code>.rela.text</code> \u6bb5\u4e2d\u6709\u4ee5\u4e0b\u4fe1\u606f\uff1a</p> <pre><code>$ llvm-readelf-17 --relocs lab1-1.o\n\nRelocation section '.rela.text' at offset 0xfb8 contains 38 entries:\n    Offset             Info             Type               Symbol's Value  Symbol's Name + Addend\n0000000000000088  0000005200000017 R_RISCV_PCREL_HI20     0000000000000078 main + 0\n0000000000000098  0000005100000013 R_RISCV_CALL_PLT       0000000000000000 printf + 0\n</code></pre> <p>\u8fd9\u8868\u793a\u4e86\u5728 lab1-1.o \u6c47\u7f16\u7684 0x88 \u5904\u5f15\u7528\u4e86 <code>main</code> \u7b26\u53f7\u7684\u5730\u5740\uff0c\u5e76\u5728 0x98 \u5904\u8c03\u7528\u4e86 <code>printf</code> \u51fd\u6570\uff0c\u8fd9\u4e0e\u6211\u4eec\u89c2\u5bdf\u5230 lab1-1.o \u4e2d\u7684\u6c47\u7f16\u884c\u4e3a\u76f8\u7b26\u5408\u3002\u94fe\u63a5\u5668\u9700\u8981\u5904\u7406\u8fd9\u4e9b Relocation \u4fe1\u606f\u5e76\u6700\u7ec8\u751f\u6210\u6700\u540e\u7684 a.out \u6587\u4ef6\u3002</p>"},{"location":"broken/c-static-linking/#_6","title":"\u603b\u7ed3","text":"<p>\u7efc\u4e0a\uff0c\u5728\u9759\u6001\u94fe\u63a5\u4e2d\uff0c\u94fe\u63a5\u5668\u4e3b\u8981\u5b8c\u6210\u4e86\u4e24\u4ef6\u4e8b\u60c5\uff1a</p> <ul> <li> <p>\u89e3\u6790\u7b26\u53f7\uff1a\u786e\u5b9a object \u6587\u4ef6\u4e2d\u5f15\u7528\u7684 Symbol \u5177\u4f53\u4e3a\u54ea\u4e2a</p> </li> <li> <p>\u91cd\u5b9a\u4f4d\uff1a\u91cd\u5b9a\u4f4d object \u6587\u4ef6\u4e2d\u7684\u6bb5\uff0c\u5e76\u91cd\u5b9a\u4f4d\u5176\u4e2d\u5bf9 Symbol \u7684\u5f15\u7528</p> </li> </ul> <p>\u5728\u7b2c\u4e8c\u6b65\u4e2d\uff0cld \u4f1a\u6839\u636e Linker Script \u6307\u793a\u8fdb\u884c\u91cd\u5b9a\u4f4d\uff0c\u6240\u6709\u51fd\u6570\u3001\u5168\u5c40\u53d8\u91cf\uff0c\u5747\u62e5\u6709\u4e86\u81ea\u5df1\u6240\u5c5e\u7684\u7a7a\u95f4\u4ee5\u53ca\u5176\u5730\u5740\u3002</p>"},{"location":"broken/c-static-linking/#ex-libc","title":"Ex: libc","text":"<p>main.c \u4e2d\u5e76\u6ca1\u6709\u5b9a\u4e49 <code>printf</code> \u51fd\u6570\uff0c\u5b83\u5728\u5934\u6587\u4ef6 <code>stdio.h</code> \u4e2d\u88ab\u58f0\u660e\u4e86\u3002</p> <p>\u4f46\u662f\uff0c\u6211\u4eec\u5728\u94fe\u63a5\u65f6\u4e5f\u5e76\u6ca1\u6709\u989d\u5916\u6307\u5b9a\u5176\u4ed6 .o \u6587\u4ef6\u3002\u8fd9\u662f\u56e0\u4e3a <code>printf</code> \u662f C \u6807\u51c6\u5e93 (libc) \u7684\u4e00\u90e8\u5206\uff0c\u800c\u9ed8\u8ba4\u7684\u94fe\u63a5\u53c2\u6570\u4e2d\u5747\u4f1a\u94fe\u63a5\u4e0a libc\u3002</p> <p>\u6211\u4eec\u5728\u7f16\u8bd1\u94fe\u63a5 lab1-1.o \u65f6\uff0c\u4f7f\u7528 <code>-Wl,-v</code> \u663e\u793a\u94fe\u63a5\u5668 ld \u7684\u5177\u4f53\u53c2\u6570\uff1a</p> <pre><code>$ riscv64-linux-gnu-gcc -O0 -g -static -march=rv64g lab1-1.o -Wl,-v\ncollect2 version 14.2.0\n/usr/lib/gcc-cross/riscv64-linux-gnu/14/../../../../riscv64-linux-gnu/bin/ld -plugin /usr/libexec/gcc-cross/riscv64-linux-gnu/14/liblto_plugin.so -plugin-opt=/usr/libexec/gcc-cross/riscv64-linux-gnu/14/lto-wrapper -plugin-opt=-fresolution=/tmp/cc0dIN9b.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_eh -plugin-opt=-pass-through=-lc --sysroot=/ --build-id -hash-style=gnu --as-needed -melf64lriscv -X -static /usr/lib/gcc-cross/riscv64-linux-gnu/14/../../../../riscv64-linux-gnu/lib/crt1.o /usr/lib/gcc-cross/riscv64-linux-gnu/14/crti.o /usr/lib/gcc-cross/riscv64-linux-gnu/14/crtbeginT.o -L/usr/lib/gcc-cross/riscv64-linux-gnu/14 -L/usr/lib/gcc-cross/riscv64-linux-gnu/14/../../../../riscv64-linux-gnu/lib -L/lib/riscv64-linux-gnu -L/usr/lib/riscv64-linux-gnu lab1-1.o -v --start-group -lgcc -lgcc_eh -lc --end-group /usr/lib/gcc-cross/riscv64-linux-gnu/14/crtend.o /usr/lib/gcc-cross/riscv64-linux-gnu/14/crtn.o\nGNU ld (GNU Binutils for Debian) 2.43.1\n</code></pre> <p>\u5176\u4e2d\u5305\u542b\u4e86 <code>-L/usr/lib/gcc-cross/riscv64-linux-gnu/14</code> \u6307\u5b9a\u4e86\u94fe\u63a5\u8be5\u76ee\u5f55\u4e0b\u9762\u7684\u67d0\u4e9b Object \u6587\u4ef6\uff0c<code>--start-group -lgcc -lgcc_eh -lc --end-group</code> \u8868\u793a\u4e86\u94fe\u63a5 libc \u5e93\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>-nostdlib</code> \u6765\u7981\u6b62\u94fe\u63a5\u6807\u51c6\u5e93\uff1a</p> <pre><code>$ riscv64-linux-gnu-gcc -O0 -g -static -march=rv64g lab1-1.o -Wl,-v -nostdlib\ncollect2 version 14.2.0\n/usr/lib/gcc-cross/riscv64-linux-gnu/14/../../../../riscv64-linux-gnu/bin/ld -plugin /usr/libexec/gcc-cross/riscv64-linux-gnu/14/liblto_plugin.so -plugin-opt=/usr/libexec/gcc-cross/riscv64-linux-gnu/14/lto-wrapper -plugin-opt=-fresolution=/tmp/cceuW8LP.res --sysroot=/ --build-id -hash-style=gnu --as-needed -melf64lriscv -X -static -L/usr/lib/gcc-cross/riscv64-linux-gnu/14 -L/usr/lib/gcc-cross/riscv64-linux-gnu/14/../../../../riscv64-linux-gnu/lib -L/lib/riscv64-linux-gnu -L/usr/lib/riscv64-linux-gnu lab1-1.o -v\nGNU ld (GNU Binutils for Debian) 2.43.1\n/usr/lib/gcc-cross/riscv64-linux-gnu/14/../../../../riscv64-linux-gnu/bin/ld: warning: cannot find entry symbol _start; defaulting to 000000000001017c\n/usr/lib/gcc-cross/riscv64-linux-gnu/14/../../../../riscv64-linux-gnu/bin/ld: lab1-1.o: in function `recursive':\nlab1-1.c:8:(.text+0x40): undefined reference to `printf'\n/usr/lib/gcc-cross/riscv64-linux-gnu/14/../../../../riscv64-linux-gnu/bin/ld: lab1-1.o: in function `main':\nlab1-1.c:14:(.text+0x94): undefined reference to `printf'\n/usr/lib/gcc-cross/riscv64-linux-gnu/14/../../../../riscv64-linux-gnu/bin/ld: lab1-1.c:15:(.text+0xac): undefined reference to `printf'\n/usr/lib/gcc-cross/riscv64-linux-gnu/14/../../../../riscv64-linux-gnu/bin/ld: lab1-1.c:16:(.text+0xc4): undefined reference to `printf'\ncollect2: error: ld returned 1 exit status\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u5c3d\u7ba1 ld \u88ab\u6307\u5b9a\u4e86\u4e00\u4e9b\u94fe\u63a5\u76ee\u5f55 <code>-L</code> \u4f46\u662f\u6ca1\u6709\u6307\u5b9a <code>-lc</code>\u3002\u56e0\u6b64 ld \u62a5\u9519\u4e86 undefined reference\uff0c\u63d0\u793a\u627e\u4e0d\u5230 <code>printf</code> \u8fd9\u4e2a\u7b26\u53f7\u3002</p>"},{"location":"broken/c-static-linking/#_7","title":"\u7ed3\u6784\u4f53","text":"<p>C \u8bed\u8a00\u4e2d\uff0c\u7ed3\u6784\u4f53\u662f\u5bf9\u4e00\u4e9b\u6570\u636e\u7684\u8868\u793a\u3002(A structure is a programmer-defined data type made up of variables of other data types (possibly including other structure types).)</p> <p>\u6211\u4eec\u901a\u8fc7 <code>struct</code> \u5173\u952e\u5b57\u58f0\u660e\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002 \u901a\u5e38\uff0c\u6211\u4eec\u5c06\u4e00\u4e9b\u76f8\u5173\u8054\u7684\u6570\u636e\u653e\u7f6e\u5728\u540c\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e0a\u3002</p> <p>\u7ed3\u6784\u4f53\u6709\u7740\u7f16\u8bd1\u671f\u5c31\u5df2\u77e5\u7684\u56fa\u5b9a\u5927\u5c0f\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u7ed3\u6784\u4f53\u4e2d\u7684\u53d8\u91cf\u4f1a\u4f9d\u6b21\u5728\u5185\u5b58\u4e2d\u6392\u5e03\uff0c\u4f46\u662f\u53d8\u91cf\u4e4b\u95f4\u53ef\u80fd\u4f1a\u5b58\u5728\u4e00\u4e9b Padding\uff0c\u786e\u4fdd\u7ed3\u6784\u4f53\u4e2d\u7684\u53d8\u91cf\u88ab\u6b63\u786e\u5bf9\u9f50\u4e86\u3002</p> <pre><code>struct proc {\n    enum procstate state;   // Process state\n    int pid;                // Process ID\n    uint64 pagetable;  // User page table\n    uint64 ustack;          // Virtual address of kernel stack\n    uint64 kstack;          // Virtual address of kernel stack\n    struct trapframe *trapframe; // data page for trampoline.S\n    struct context context; // swtch() here to run process\n    struct proc *parent;    // Parent process\n};\n</code></pre> <p>\u4f8b\u5982\uff0c\u5728\u6211\u4eec\u7684 uCore \u5185\u6838\u4e0a\uff0c\u63cf\u8ff0\u8fdb\u7a0b\u7684\u7ed3\u6784\u4f53 <code>struct proc</code> \u5305\u542b\u4e86 \u8fdb\u7a0b\u72b6\u6001 <code>state</code>\uff0cPID\uff0c\u9875\u8868\uff0c\u7528\u6237\u6808\u548c\u5185\u6838\u6808\u5730\u5740\u7b49\u4fe1\u606f\u3002</p> <p>\u5728\u5bf9\u7ed3\u6784\u4f53\u6307\u9488\u8bbf\u95ee\u5176\u6210\u5458\u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u4f7f\u7528 <code>-&gt;</code> \u64cd\u4f5c\u7b26\u3002 \u5728\u5bf9\u7ed3\u6784\u4f53\u8bbf\u95ee\u5176\u6210\u5458\u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u4f7f\u7528 <code>.</code> \u64cd\u4f5c\u7b26\u3002</p> <p>\u5728\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf <code>current_proc</code>\uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u5411 <code>struct proc</code> \u7ed3\u6784\u4f53\u7684\u6307\u9488\uff1b\u6211\u4eec\u4e5f\u5b9a\u4e49\u4e86\u4e00\u4e2a <code>idle</code> \u53d8\u91cf\uff0c\u5b83\u7684\u7c7b\u578b\u662f <code>struct proc</code> \u7ed3\u6784\u4f53\u3002</p> <pre><code>struct proc *current_proc;\nstruct proc idle;\n\nvoid proc_init()\n{\n    current_proc = &amp;idle;\n}\n\nvoid test()\n{\n    current_proc-&gt;pid = 0x114514;\n}\n</code></pre> <p>\u5728\u5185\u5b58\u4e2d\uff0c\u8fd9\u4e24\u4e2a\u53d8\u91cf\u5c06\u6309\u7167\u4ee5\u4e0b\u683c\u5f0f\u6392\u5217\uff1a</p> <p></p> <p>\u5728 <code>proc_init</code> \u521d\u59cb\u5316\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5c06 <code>idle</code> \u7684\u5730\u5740\u8d4b\u4e88 <code>current_proc</code>\uff08<code>&amp;</code> \u662f\u53d6\u5730\u5740\u7b26\uff09\u3002\u6b64\u65f6\uff0c<code>current_proc</code> \u7684\u503c\u5373\u662f <code>idle</code> \u53d8\u91cf\u7684\u8d77\u59cb\u5730\u5740\u3002</p> <p>\u4e3a\u4ec0\u4e48\u662f\u8d77\u59cb\u5730\u5740\uff1f</p> <p>\u8bb8\u591a\u4f53\u7cfb\u7ed3\u6784 (x86, ARM, RISC-V) \u5747\u5305\u542b Base displacement addressing (\u57fa\u5730\u5740 + \u504f\u79fb\u91cf) \u7684\u5bfb\u5740\u6a21\u5f0f\u3002 \u56e0\u4e3a\u7ed3\u6784\u4f53\u4e2d\u67d0\u4e2a\u53d8\u91cf\u76f8\u5bf9\u4e8e\u7ed3\u6784\u4f53\u57fa\u5730\u5740\u7684\u504f\u79fb\u91cf\u662f\u5728\u7f16\u8bd1\u671f\u5df2\u77e5\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u67d0\u4e2a\u5bc4\u5b58\u5668\u4fdd\u5b58\u8be5\u7ed3\u6784\u4f53\u7684\u57fa\u5730\u5740\uff0c\u4f7f\u7528 ld/sw \u6307\u4ee4\u4e2d\u7684\u7acb\u5373\u6570\u504f\u79fb\u91cf\u8bbf\u95ee\u7ed3\u6784\u4f53\u4e2d\u7684\u6210\u5458\u53d8\u91cf\u3002</p> <p>\u6211\u4eec\u5c06\u4ece\u6c47\u7f16\u5c42\u9762\u4e86\u89e3\u5982\u4f55\u8fdb\u884c\u7ed3\u6784\u4f53\u8bbf\u95ee\uff1a</p> <pre><code>        current_proc-&gt;pid = 0x114514;\n    802013c4:   004bb717                auipc   a4,0x4bb\n    802013c8:   c4c70713                addi    a4,a4,-948 # 806bc010 &lt;current_proc&gt;\n    802013cc:   00073683                ld      a3,0(a4)\n    802013d0:   001147b7                lui     a5,0x114\n    802013d4:   51478793                addi    a5,a5,1300 # 114514\n    802013d8:   00f6a223                sw      a5,4(a3)\n</code></pre> <p>\u8fd9\u4e00\u4e32\u6c47\u7f16\u5bf9\u5e94\u7684\u662f <code>current_proc-&gt;pid = 0x114514;</code> \u8bed\u53e5\u3002</p> <p>\u524d\u4e24\u884c\u6c47\u7f16\u901a\u8fc7 auipc + addi \u8ba1\u7b97\u51fa\u6765\u4e86 <code>current_proc</code> \u8fd9\u4e2a\u53d8\u91cf\u7684\u5730\u5740\uff1a</p> <pre><code>    802013c4:   004bb717                auipc   a4,0x4bb\n    802013c8:   c4c70713                addi    a4,a4,-948 # 806bc010 &lt;current_proc&gt;\n</code></pre> <p>\u7136\u540e\uff0c\u5c06\u8be5\u5730\u5740\u5904\u7684\u503c\u8bfb\u53d6\u5230 a3 \u4e2d\u3002\u6b64\u65f6\uff0ca3 \u4e2d\u5b58\u653e\u7684\u5373\u662f\u67d0\u4e2a <code>struct proc</code> \u7ed3\u6784\u4f53\u7684\u57fa\u5730\u5740\u3002</p> <pre><code>    802013cc:   00073683                ld      a3,0(a4)\n</code></pre> <p>\u7136\u540e\uff0c\u901a\u8fc7 lui + addi \u6784\u9020\u7acb\u5373\u6570 0x114514\uff1a</p> <pre><code>    802013d0:   001147b7                lui     a5,0x114\n    802013d4:   51478793                addi    a5,a5,1300 # 114514\n</code></pre> <p>\u6700\u540e\uff0c\u5c06\u7acb\u5373\u6570 a5 \u5199\u5165 a3 + 4 \u7684\u5730\u5740\u5904\u3002\u8fd9\u91cc\u5373\u662f <code>struct proc</code> \u7ed3\u6784\u4f53\u4e2d\u7684 pid \u53d8\u91cf\u7684\u5730\u5740\u3002</p> <pre><code>    802013d8:   00f6a223                sw      a5,4(a3)\n</code></pre> <p>NULL-Pointer Dereference</p> <p>\u5f53\u6211\u4eec\u5c1d\u8bd5\u8bbf\u95ee\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\u7684\u53d8\u91cf\u65f6\uff0c\u5982\u679c\u7ed3\u6784\u4f53\u6307\u9488\u662f\u4e00\u4e2a\u7a7a\u6307\u9488\uff0c\u90a3\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p> <p>\u5728 <code>sw a5,4(a3)</code> \u65f6\uff0ca3 \u672c\u5e94\u8be5\u5b58\u50a8\u7740\u4e00\u4e2a\u5408\u6cd5\u5730\u5740\uff1b\u4f46\u662f\uff0c\u5f53\u5b83\u7684\u503c\u662f\u7a7a\u6307\u9488 0x0 \u65f6\uff0cCPU \u5c31\u4f1a\u5bf9 0x00000004 \u8fd9\u4e2a\u5730\u5740\u53d1\u8d77\u5199\u5165\uff0c\u8fd9\u4f1a\u89e6\u53d1 CPU \u7684\u8bbf\u5b58\u5f02\u5e38\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u7ec8\u6b62\u3002</p> <p>\u73b0\u5728\uff0c\u4f60\u80fd\u731c\u5230\u4e3a\u4ec0\u4e48\u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f1a\u5d29\u6e83 \"The instruction at 0xdeadbeef referenced memory at 0x00000008. The memory could not be written.\" \u4e86\u5417\uff1f</p>"},{"location":"env/","title":"\u5f00\u53d1\u73af\u5883\u914d\u7f6e","text":"<p>\u5728\u8fd9\u90e8\u5206\u5185\u5bb9\u4e2d\uff0c\u6211\u4eec\u5c06\u5411\u540c\u5b66\u4eec\u4ecb\u7ecd Linux \u53d1\u884c\u7248\uff0c\u4ee5\u5907\u540e\u7eed\u5b9e\u9a8c\u3002</p> <p>Linux\u662f\u4e00\u4e2a\u514d\u8d39\u53ef\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u975e\u5e38\u9002\u7528\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u3002\u5728\u64cd\u4f5c\u7cfb\u7edf\u5b9e\u9a8c\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Ubuntu 24.04 LTS \u4f5c\u4e3a\u6807\u51c6\u7684\u5b9e\u9a8c\u73af\u5883\u3002</p> <p>Warning</p> <p>\u5373\u4fbf\u90e8\u5206\u540c\u5b66\u4eec\u5df2\u7ecf\u62e5\u6709\u4e00\u4e2a\u8fd0\u884c\u7740 Linux \u53d1\u884c\u7248\u7684\u7269\u7406\u673a\u6216\u865a\u62df\u673a\u73af\u5883\uff0c\u6211\u4eec\u4f9d\u7136\u8981\u6c42\u8bf8\u4f4d\u540c\u5b66\u53c2\u7167\u4e0b\u8ff0\u6587\u6863\u4e3a\u8fd9\u95e8\u8bfe\u51c6\u5907\u4e00\u4e2a\u65b0\u7684\u6807\u51c6\u73af\u5883\uff0c\u4ee5\u51cf\u5c11\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898\u3002</p> <p>\u6b64\u5916\uff0c\u6211\u4eec\u8981\u6c42\u5404\u4f4d\u540c\u5b66\u5728\u7cfb\u7edf\u540d\u4e2d\u8bbe\u7f6e\u81ea\u5df1\u7684\u5b66\u53f7\uff0c\u4ee5\u5907Lab\u5b9e\u9a8c\u6216\u8bfe\u7a0b\u4f5c\u4e1a\u9700\u8981\u63d0\u4ea4\u622a\u56fe\u3002</p> <p>\u4e3a\u4e86\u5e94\u5bf9\u540e\u7eed\u7684\u5b9e\u9a8c\uff0c\u6211\u4eec\u63a8\u8350\u540c\u5b66\u4eec\u9009\u62e9 Ubuntu LTS \u6216 Debian stable\uff0c\u5e76\u52a0\u88c5\u56fe\u5f62\u754c\u9762\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 SSH + vscode \u8fdb\u884c\u8fdc\u7a0b\u5f00\u53d1\uff0c\u5373\u5728\u4f60\u7684\u5bbf\u4e3b\u673a \uff08\u901a\u5e38\u662f Windows \u6216 macOS \u7cfb\u7edf\uff09\u4e0a\u4f7f\u7528 vscode \u6216 SSH \u8fde\u63a5\u5230\u4f60\u7684\u865a\u62df\u673a\u4e2d\u8fdb\u884c\u5f00\u53d1\u3002</p>"},{"location":"env/#linux","title":"\u642d\u5efa Linux \u865a\u62df\u73af\u5883","text":"<p>\u6211\u4eec\u63a8\u8350\u4f7f\u7528 VMware \u4f5c\u4e3a\u865a\u62df\u673a\u8f6f\u4ef6\uff0c\u5e76\u5bf9 Windows (amd64) \u548c macOS (arm64, Apple Silicon) \u63d0\u4f9b\u652f\u6301\u3002</p> <ul> <li> <p>\u8bf7\u4f60\u53c2\u7167\u5217\u8868\u4e2d\u7684\u65b9\u6848\u8fdb\u884c VMware \u5b89\u88c5\u540e\uff0c\u5bfc\u5165\u6211\u4eec\u9884\u5148\u63d0\u4f9b\u7684\u865a\u62df\u73af\u5883(OVF)\u3002</p> </li> <li> <p>\u5982\u679c\u4f60\u9009\u62e9\u4ece\u96f6\u5b89\u88c5 Linux \u865a\u62df\u673a\uff0c\u8bf7\u4f60\u5b89\u88c5 Ubuntu LTS / Debian stable\uff0c\u5e76\u53c2\u7167 \u624b\u52a8\u73af\u5883\u914d\u7f6e \u5b89\u88c5 RISC-V gcc \u5de5\u5177\u94fe\u3001QEMU \u6a21\u62df\u5668\u7b49\u3002</p> </li> </ul> <p>\u6700\u540e\uff0c\u4f60\u53ef\u4ee5\u8003\u8651\u914d\u7f6e VSCode \u5f00\u53d1\u5de5\u5177\u4ee5\u53ca\u9a8c\u8bc1\u73af\u5883\u53ef\u7528\u3002</p> <p>Note</p> <p>\u8bf7\u540c\u5b66\u4eec\u5728\u5b89\u88c5\u7cfb\u7edf\u65f6\u989d\u5916\u6ee1\u8db3\u5982\u4e0b\u8981\u6c42\uff1a</p> <ol> <li>\u5728\u8bbe\u5b9a\u7684\u7cfb\u7edf\u540d\u4e2d\u5305\u542b\u4f60\u7684\u5b66\u53f7\u3002</li> <li>\u8bed\u8a00\u5c3d\u91cf\u9009\u62e9\u82f1\u6587\uff0c\u4e2d\u6587\u8def\u5f84\u53ef\u80fd\u5bfc\u81f4\u90e8\u5206\u5b9e\u9a8c\u5185\u5bb9\u65e0\u6cd5\u987a\u5229\u5b8c\u6210\u3002</li> </ol>"},{"location":"env/helloworld/","title":"\u9a8c\u8bc1\u73af\u5883","text":""},{"location":"env/helloworld/#_1","title":"\u7f16\u8bd1\u4e0e\u8fd0\u884c\u5185\u6838","text":"<p>\u514b\u9686\u5185\u6838\u4ee3\u7801\u548c\u7528\u6237\u7a0b\u5e8f\u4ee3\u7801\u4ed3\u5e93\uff1a</p> <pre><code>git clone https://github.com/yuk1i/SUSTechOS\ncd SUSTechOS\ngit clone https://github.com/yuk1i/SUSTechOS-2025S-user user\n</code></pre> <p>\u7f16\u8bd1\u7528\u6237\u7a0b\u5e8f\uff1a</p> <pre><code>make user\n</code></pre> <p>\u7f16\u8bd1\u5185\u6838:</p> <pre><code>make\n</code></pre> <p>\u5728 QEMU \u4e2d\u8fd0\u884c\u5185\u6838\uff1a</p> <pre><code>make run\n</code></pre> <p>\u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u4f60\u5c06\u80fd\u591f\u770b\u5230\uff1a</p> <pre><code>OpenSBI v1.5\n   ____                    _____ ____ _____\n  / __ \\                  / ____|  _ \\_   _|\n | |  | |_ __   ___ _ __ | (___ | |_) || |\n | |  | | '_ \\ / _ \\ '_ \\ \\___ \\|  _ &lt; | |\n | |__| | |_) |  __/ | | |____) | |_) || |_\n  \\____/| .__/ \\___|_| |_|_____/|____/_____|\n        | |\n        |_|\n\nPlatform Name             : riscv-virtio,qemu\nPlatform Features         : medeleg\nPlatform HART Count       : 1\nPlatform IPI Device       : aclint-mswi\nPlatform Timer Device     : aclint-mtimer @ 10000000Hz\nPlatform Console Device   : uart8250\nPlatform HSM Device       : ---\nPlatform PMU Device       : ---\nPlatform Reboot Device    : syscon-reboot\nPlatform Shutdown Device  : syscon-poweroff\nPlatform Suspend Device   : ---\nPlatform CPPC Device      : ---\nFirmware Base             : 0x80000000\nFirmware Size             : 327 KB\nFirmware RW Offset        : 0x40000\nFirmware RW Size          : 71 KB\nFirmware Heap Offset      : 0x49000\nFirmware Heap Size        : 35 KB (total), 2 KB (reserved), 11 KB (used), 21 KB (free)\nFirmware Scratch Size     : 4096 B (total), 416 B (used), 3680 B (free)\nRuntime SBI Version       : 2.0\n\nDomain0 Name              : root\nDomain0 Boot HART         : 0\nDomain0 HARTs             : 0*\nDomain0 Region00          : 0x0000000000100000-0x0000000000100fff M: (I,R,W) S/U: (R,W)\nDomain0 Region01          : 0x0000000010000000-0x0000000010000fff M: (I,R,W) S/U: (R,W)\nDomain0 Region02          : 0x0000000002000000-0x000000000200ffff M: (I,R,W) S/U: ()\nDomain0 Region03          : 0x0000000080040000-0x000000008005ffff M: (R,W) S/U: ()\nDomain0 Region04          : 0x0000000080000000-0x000000008003ffff M: (R,X) S/U: ()\nDomain0 Region05          : 0x000000000c400000-0x000000000c5fffff M: (I,R,W) S/U: (R,W)\nDomain0 Region06          : 0x000000000c000000-0x000000000c3fffff M: (I,R,W) S/U: (R,W)\nDomain0 Region07          : 0x0000000000000000-0xffffffffffffffff M: () S/U: (R,W,X)\nDomain0 Next Address      : 0x0000000080200000\nDomain0 Next Arg1         : 0x000000009fe00000\nDomain0 Next Mode         : S-mode\nDomain0 SysReset          : yes\nDomain0 SysSuspend        : yes\n\nBoot HART ID              : 0\nBoot HART Domain          : root\nBoot HART Priv Version    : v1.12\nBoot HART Base ISA        : rv64imafdch\nBoot HART ISA Extensions  : sstc,zicntr,zihpm,zicboz,zicbom,sdtrig,svadu\nBoot HART PMP Count       : 16\nBoot HART PMP Granularity : 2 bits\nBoot HART PMP Address Bits: 54\nBoot HART MHPM Info       : 16 (0x0007fff8)\nBoot HART Debug Triggers  : 2 triggers\nBoot HART MIDELEG         : 0x0000000000001666\nBoot HART MEDELEG         : 0x0000000000f0b509\n\n\n=====\nHello World!\n=====\n\nBoot stack: 0x000000008021d000\nclean bss: 0x000000008021e000 - 0x0000000080228000\nBoot m_hartid 0\n[INFO  0,-1] bootcpu_entry: basic smp inited, thread_id available now, we are cpu 0: 0x00000000802270d8\nKernel Starts Relocating...\nKernel size: 0x0000000000028000, Rounded to 2MiB: 0x0000000000200000\n[INFO  0,-1] bootcpu_start_relocation: Kernel phy_base: 0x0000000080200000, phy_end_4k:0x0000000080228000, phy_end_2M 0x0000000080400000\nMapping Identity: 0x0000000080200000 to 0x0000000080200000\nMapping kernel image: 0xffffffff80200000 to 0x0000000080200000\nMapping Direct Mapping: 0xffffffc080400000 to 0x0000000080400000\nEnable SATP on temporary pagetable.\nBoot HART Relocated. We are at high address now! PC: 0xffffffff80203cc4\n[INFO  0,-1] kvm_init: boot-stage page allocator: base 0xffffffc080400000, end 0xffffffc080600000\n[INFO  0,-1] kvmmake: Memory after kernel image (phys) size = 0x0000000003c00000\n[INFO  0,-1] kvm_init: enable pageing at 0x8000000000080400\n[INFO  0,-1] kvm_init: boot-stage page allocator ends up: base 0xffffffc080400000, used: 0xffffffc080411000\nRelocated. Boot halt sp at 0xffffffffff001fb0\nBoot another cpus.\n- booting hart 1: hsm_hart_start(hartid=1, pc=_entry_sec, opaque=1) = -3. waiting for hart online\nskipped for hart 1\n- booting hart 2: hsm_hart_start(hartid=2, pc=_entry_sec, opaque=1) = -3. waiting for hart online\nskipped for hart 2\n- booting hart 3: hsm_hart_start(hartid=3, pc=_entry_sec, opaque=1) = -3. waiting for hart online\nskipped for hart 3\nSystem has 1 cpus online\n\nUART inited.\n[INFO  0,-1] kpgmgrinit: page allocator init: base: 0xffffffc080411000, stop: 0xffffffc084000000\n[INFO  0,-1] allocator_init: allocator mm inited base 0xfffffffd00000000\n[INFO  0,-1] allocator_init: allocator vma inited base 0xfffffffd01000000\n[INFO  0,-1] allocator_init: allocator proc inited base 0xfffffffd02000000\n[INFO  0,-1] allocator_init: allocator kstrbuf inited base 0xfffffffd03000000\napplist:\n        init\n        sh\n        test_arg\n        test_malloc\n[INFO  0,-1] load_init_app: load init proc init\n[INFO  0,-1] bootcpu_init: start scheduler!\ninit: starting sh\n</code></pre>"},{"location":"env/setup/","title":"\u624b\u52a8\u73af\u5883\u914d\u7f6e","text":""},{"location":"env/setup/#_1","title":"\u624b\u52a8\u914d\u7f6e\u5f00\u53d1\u73af\u5883","text":"<p>\u5982\u679c\u4f60\u4f7f\u7528\u6211\u4eec\u6253\u5305\u7684 ovf \u683c\u5f0f\u7684\u955c\u50cf\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u6b65</p> <p>\u5230\u8fd9\u4e00\u6b65\u65f6\uff0c\u8bf7\u786e\u4fdd\u4f60\u5df2\u7ecf\u914d\u7f6e\u597d Linux \u73af\u5883\uff0c\u80fd\u6253\u5f00\u4e00\u4e2a Terminal \u6267\u884c\u547d\u4ee4\u3002</p> <p>Warning</p> <p>\u8bf7\u4f7f\u7528\u5c3d\u53ef\u80fd\u65b0\u7684\u53d1\u884c\u7248\u672c\u3002\u4ee5\u4e0b\u4ee3\u7801\u5747\u5df2 Ubuntu 24.04 LTS \u4e3a\u57fa\u51c6\u3002</p>"},{"location":"env/setup/#gcc-qemu","title":"\u5b89\u88c5 gcc \u5de5\u5177\u94fe\u4ee5\u53ca QEMU","text":"<p>\u4f7f\u7528\u5305\u7ba1\u7406\u5668 apt \u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>sudo apt update &amp;&amp; sudo apt install gcc-riscv64-unknown-elf qemu-system-misc git make cmake python3-pip elfutils gdb-multiarch\n</code></pre> <p>\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u8fd0\u884c <code>riscv64-unknown-elf-gcc --version</code>\uff0c<code>qemu-system-riscv64 --version</code> \u548c <code>gdb-multiarch --version</code> \u68c0\u67e5\u7248\u672c\uff1a</p> <pre><code>$ riscv64-unknown-elf-gcc --version\nriscv64-unknown-elf-gcc (13.2.0-11ubuntu1+12) 13.2.0\nCopyright (C) 2023 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n$ qemu-system-riscv64 --version\nQEMU emulator version 8.2.2 (Debian 1:8.2.2+ds-0ubuntu1)\nCopyright (c) 2003-2023 Fabrice Bellard and the QEMU Project developers\n\n$ gdb-multiarch --version\nGNU gdb (Ubuntu 15.0.50.20240403-0ubuntu1) 15.0.50.20240403-git\nCopyright (C) 2024 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n</code></pre> <p>\u8bf7\u786e\u4fdd gcc \u7248\u672c &gt;= 13.0.0\uff0cqemu-system-riscv64 \u7248\u672c &gt;= 8.0.0\uff0cgdb-multiarch \u7248\u672c &gt;= 15</p> <p>\u5982\u679c\u4f60\u5747\u5b89\u88c5\u597d\u4e86\u4ee5\u4e0a\u4f9d\u8d56\uff0c\u8bf7\u5c1d\u8bd5\u7f16\u8bd1\u5e76\u8fd0\u884c Hello World</p>"},{"location":"env/setup/#_2","title":"\u4f7f\u7528\u81ea\u7f16\u8bd1\u7684\u5de5\u5177\u94fe","text":"<p>Warning</p> <p>\u5982\u6709\u53ef\u80fd\uff0c\u8bf7\u5c3d\u91cf\u4f7f\u7528\u53d1\u884c\u7248\u81ea\u5e26\u7684\u5de5\u5177\u94fe/QEMU \u7b49\u3002</p> <p>\u5982\u679c\u4f60\u5728\u4f7f\u7528\u53d1\u884c\u7248\u7684 gcc/qemu \u65f6\u9047\u5230\u95ee\u9898\uff0c\u5e76\u4e14\u4f60\u786e\u5b9a\u662f\u73af\u5883\u4e0d\u4e00\u81f4\u5bfc\u81f4\u7684\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u53c2\u7167\u8be5\u6587\u6863\u4ece\u96f6\u7f16\u8bd1\u6574\u4e2a\u5de5\u5177\u94fe\u3002</p>"},{"location":"env/setup/#risc-v","title":"\u5b89\u88c5RISC-V\u5de5\u5177\u94fe","text":"<p>\u53c2\u7167 https://github.com/riscv-collab/riscv-gnu-toolchain\uff1a</p> <pre><code>$ sudo -i\n$ git clone https://github.com/riscv/riscv-gnu-toolchain\n$ sudo apt-get install autoconf automake autotools-dev curl python3 python3-pip libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev ninja-build git cmake libglib2.0-dev libslirp-dev\n$ mkdir -p /opt/riscv\n$ ./configure --prefix=/opt/riscv\n$ make\n</code></pre>"},{"location":"env/vscode/","title":"VSCode \u8fdc\u7a0b\u914d\u7f6e","text":""},{"location":"env/vscode/#_1","title":"\u65e5\u5e38\u5f00\u53d1\u5efa\u8bae","text":""},{"location":"env/vm/macos/","title":"macOS + VMware Fusion","text":""},{"location":"env/vm/macos/#vmware-fusion","title":"\u5b89\u88c5 VMware Fusion","text":"<p>\u5728 https://dl.cra.moe/CS302-OS-2025-Spring/ \u4e0b\u8f7d VMware-funsion-macOS.zip\u3002\u6253\u5f00 Finder\uff0c\u89e3\u538b\u8be5 zip \u540e\u5728 payload \u6587\u4ef6\u5939\u4e0b\u6709\u4e00\u4e2a \"VMware Fusion\"\uff0c\u5c06\u5b83\u62d6\u5230\u5de6\u4fa7\"\u5e94\u7528\u7a0b\u5e8f\"\u540e\u5373\u53ef\u3002</p> <p>\u7528 Spotlight \u6253\u5f00 VMware fusion\uff0c\u540c\u610f\u6240\u6709\u6743\u9650\u8981\u6c42\u3002</p> <p>\u4f60\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u5bfc\u5165 OVF\uff0c\u6216\u8005\u624b\u52a8\u521b\u5efa Debian \u865a\u62df\u673a\u3002</p> <p>\u8bf7\u4f60\u5148\u786e\u8ba4\u4f60\u7684 macOS \u7cfb\u7edf\u7684 CPU \u7c7b\u578b\u662f Intel \u8fd8\u662f Apple Silicon (Apple M\u7cfb\u5217\u5904\u7406\u5668)\u3002\u76ee\u524d\uff0c\u6211\u4eec\u53ea\u63d0\u4f9b\u5bf9 Apple M\u7cfb\u5217\u5904\u7406\u5668\u7684\u652f\u6301\uff0c\u4e0d\u63d0\u4f9b Intel \u7cfb\u5217\u5904\u7406\u5668\u7684\u652f\u6301\u3002</p>"},{"location":"env/vm/macos/#_1","title":"\u5bfc\u5165\u5df2\u5b89\u88c5\u597d\u7684\u955c\u50cf","text":"<p>\u5728 https://dl.cra.moe/CS302-OS-2025-Spring/ \u4e0b\u8f7d <code>OSLab-2025S-macOS-arm64 \u7684\u514b\u9686.zip</code>\uff0c\u4e0b\u8f7d\u540e\u89e3\u538b\u3002</p> <p>\u6253\u5f00 VMware Fusion\u3002\u5728\u83dc\u5355\u680f\u4e2d\uff1a \u7a97\u53e3 -&gt; \u865a\u62df\u673a\u8d44\u6e90\u5e93\u3002\u6253\u5f00\u865a\u62df\u673a\u5217\u8868\u3002</p> <p></p> <p>\u5c06\u89e3\u538b\u51fa\u6765\u7684 <code>OSLab-2025S-macOS-arm64 \u7684\u514b\u9686</code> \u76f4\u63a5\u62d6\u5230\u865a\u62df\u673a\u5217\u8868\u4e2d\u3002</p> <p></p> <p>\u53cc\u51fb\u542f\u52a8\uff0c\u5e76\u9a8c\u8bc1\u73af\u5883\u3002</p>"},{"location":"env/vm/windows-vmware/","title":"Windows + VMware","text":"<p>\u5728\u8fd9\u90e8\u5206\u5185\u5bb9\u4e2d\uff0c\u6211\u4eec\u5c06\u5f15\u5bfc\u540c\u5b66\u4eec\u5728windows\u7cfb\u7edf\u4e2d\u5b89\u88c5VMware Workstation Pro, \u5e76\u5728VMware\u4e2d\u914d\u7f6eUbuntu\u865a\u62df\u673a</p>"},{"location":"env/vm/windows-vmware/#vmware-workstation-pro-16","title":"\u5b89\u88c5 VMware Workstation Pro 16","text":"<p>\u540c\u5b66\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7dVMware Workstation Pro 17\uff0c\u5e76\u5c06\u5176\u5b89\u88c5\u5728\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e2d\u3002</p> <p>https://dl.cra.moe/CS302-OS-2025-Spring/</p> <p>Download VMware Workstation Pro</p> <p></p> <p>\u63a5\u4e0b\u6765\uff0c\u5173\u4e8e\u5b89\u88c5 Ubuntu 24.04\uff0c\u6211\u4eec\u63d0\u4f9b\u4e24\u79cd\u9009\u62e9\uff0c\u5927\u5bb6\u53ef\u4ee5\u9009\u62e9\u4e0b\u8f7d\u5df2\u7ecf\u642d\u8f7d\u5b9e\u9a8c\u73af\u5883\u7684 Ubuntu \u7cfb\u7edf\u955c\u50cf (OVF) \u5bfc\u5165\u8fdb\u865a\u62df\u673a\uff0c\u6216\u8005 Ubuntu \u5b98\u65b9\u539f\u7248\u955c\u50cf\u3002</p>"},{"location":"env/vm/windows-vmware/#ubuntu2404","title":"\u5b89\u88c5Ubuntu24.04","text":"<p>1. \u5bfc\u5165\u5df2\u642d\u8f7d\u5b9e\u9a8c\u73af\u5883\u7684\u7cfb\u7edf\u955c\u50cf</p> <p>\u6b64\u6b65\u9aa4\u4e3a\u5728VMware\u4e2d\u5bfc\u5165\u5df2\u7ecf\u642d\u8f7d\u5b9e\u9a8c\u73af\u5883\u7684\u7cfb\u7edf\u955c\u50cf\u3002\u5982\u4f60\u5df2\u7ecf\u62e5\u6709\u4e00\u4e2a\u73b0\u6709\u73af\u5883\uff0c\u4f8b\u5982\u4f60\u81ea\u5df1\u7684\u7528\u7684 Linux \u865a\u62df\u673a/\u7269\u7406\u673a\u73af\u5883\uff0c\u53ef\u53c2\u8003 <code>\u624b\u52a8\u73af\u5883\u914d\u7f6e</code> \u7684\u6b65\u9aa4\u5728\u7cfb\u7edf\u4e2d\u914d\u7f6e\u5b9e\u9a8c\u73af\u5883\uff0c\u4e0d\u8fc7\u6211\u4eec\u66f4\u52a0\u63a8\u8350\u4f7f\u7528\u6211\u4eec\u63d0\u4f9b\u7684\u73af\u5883\u4ee5\u9632\u6b62\u7cfb\u7edf\u7248\u672c\u5bfc\u81f4\u7684\u5b9e\u9a8c\u5dee\u5f02\u3002</p> <p>\u9996\u5148\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7dUbuntu24.04\u7684ovf\u683c\u5f0f\uff08Open Virtualization Format\uff09\u6587\u4ef6\u5e76\u8fdb\u884c\u89e3\u538b\u3002</p> <p></p> <p>\u4e4b\u540e\uff0c\u6253\u5f00VMware\u9009\u62e9<code>\u6587\u4ef6</code>-&gt;<code>\u6253\u5f00</code>\uff0c\u627e\u5230ovf\u6587\u4ef6\u9009\u62e9\u6253\u5f00\uff0c\u8f93\u5165\u865a\u62df\u673a\u540d\u79f0\u540e\u7b49\u5f85\u5bfc\u5165\u5b8c\u6210\u5373\u53ef\u3002</p> <p></p> <p></p> <p>2. \u5b89\u88c5\u5b98\u65b9ubuntu 24.04\u5e76\u914d\u7f6e\u5b9e\u9a8c\u73af\u5883</p> <p>\u540c\u5b66\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7d\u539f\u7248Ubuntu24.04\u955c\u50cf\uff0c\u5e76\u5c06\u5176\u5b89\u88c5\u5728\u81ea\u5df1\u7684\u865a\u62df\u673a\u4e2d\u3002</p> <p>Download Ubuntu 24.04</p> <p></p> <p>\u4e0b\u8f7d\u597d\u955c\u50cf\u540e\uff0c\u6253\u5f00VMware workstation\uff0c\u9009\u62e9<code>\u521b\u5efa\u65b0\u7684\u865a\u62df\u673a</code>\uff1a</p> <p></p> <p>\u6839\u636e\u4ee5\u4e0b\u6307\u5f15\u5b8c\u6210\u865a\u62df\u673a\u914d\u7f6e\uff1a</p> <p>Note</p> <p>\u8bf7\u540c\u5b66\u4eec\u5728\u5b89\u88c5\u7cfb\u7edf\u65f6\u5c3d\u91cf\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42\uff1a</p> <ol> <li> <p>\u8bed\u8a00\u5c3d\u91cf\u9009\u62e9\u82f1\u6587\uff0c\u4e2d\u6587\u8def\u5f84\u53ef\u80fd\u5bfc\u81f4\u5b9e\u9a8c\u5185\u5bb9\u65e0\u6cd5\u987a\u5229\u5b8c\u6210</p> </li> <li> <p>CPU\u5c3d\u91cf\u9009\u62e94\u6838\u6216\u4ee5\u4e0a</p> </li> <li> <p>\u865a\u62df\u673a\u786c\u76d8\u7a7a\u95f4\u5efa\u8bae\u9009\u62e930G\u4ee5\u4e0a</p> </li> </ol> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>\u4e4b\u540e\u8fd0\u884c\u865a\u62df\u673a\u5b8c\u6210\u865a\u62df\u673a\u5b89\u88c5\u5373\u53ef\u3002</p> <p>\u53e6\u5916\uff0c\u7531\u4e8e\u539f\u7248Ubuntu\u7cfb\u7edf\u4e0d\u5305\u542b\u672c\u8bfe\u7a0b\u5b9e\u9a8c\u7684\u5f00\u53d1\u73af\u5883\uff0c\u8fd8\u9700\u8981\u53c2\u8003<code>\u73af\u5883\u914d\u7f6e</code>\u5b8c\u6210\u5b9e\u9a8c\u5f00\u53d1\u73af\u5883\u914d\u7f6e\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u63a8\u8350\u5b89\u88c5vscode\u7528\u4e8e\u4ee3\u7801\u7684\u9605\u8bfb\u4e0e\u7f16\u5199\u3002</p>"},{"location":"env/vm/wsl/","title":"Windows + WSL (\u4e0d\u63a8\u8350)","text":""},{"location":"env/vm/wsl/#windows-wsl","title":"Windows WSL \u8bbe\u7f6e","text":"<p>\u6211\u4eec\u4e0d\u5bf9 WSL \u73af\u5883\u4e0b\u9047\u5230\u7684\u95ee\u9898\u63d0\u4f9b\u5e2e\u52a9\u3002 \u5982\u679c\u4f60\u9047\u5230\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u8bf7\u8003\u8651\u81ea\u884c\u89e3\u51b3\u6216\u5207\u6362\u4e3a VMware \u865a\u62df\u73af\u5883\u3002</p> <p>Windows WSL \u53ef\u80fd\u4f1a\u4e0d\u9002\u7528\u4e8e\u5728 Linux \u73af\u5883\u4e0b\u5237\u5199 VisionFive2 \u677f\u5b50\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5728\u540e\u7eed\u5b9e\u9a8c\u63d0\u4f9b\u6587\u6863\u652f\u6301\u3002</p> <p>\u8bf7\u4f7f\u7528 Ubuntu 24.04 \u6216 Debian stable\u3002</p> <p>\u7136\u540e\uff0c\u8bf7\u53c2\u8003 \u624b\u52a8\u73af\u5883\u8bbe\u7f6e \u8bbe\u7f6e gcc \u5de5\u5177\u94fe\u548c QEMU \u6a21\u62df\u5668\u3002</p>"},{"location":"lab/lab1/","title":"Week 1 - Linux\u57fa\u7840","text":""},{"location":"lab/lab1/#linux","title":"Linux\u57fa\u7840","text":"<p>Note</p> <p>\u5728\u5b8c\u6210\u672c\u5b9e\u9a8c\u524d\uff0c\u8bf7\u53c2\u7167<code>\u5b9e\u9a8c\u73af\u5883\u642d\u5efa</code>\u5b8c\u6210\u5b9e\u9a8c\u73af\u5883\u7684\u914d\u7f6e</p> <p>\u672c\u90e8\u5206\u5185\u5bb9\u4e2d\uff0c\u6211\u4eec\u4f1a\u901a\u8fc7\u5b9e\u9a8c\u6b65\u9aa4\u719f\u6089Linux\u7684\u5e38\u7528\u547d\u4ee4\uff0c\u4ece\u800c\u5bf9Linux\u7cfb\u7edf\u6709\u4e00\u4e2a\u521d\u6b65\u4e86\u89e3\u3002</p>"},{"location":"lab/lab1/#step-1-terminal","title":"Step 1. \u6253\u5f00terminal","text":"<p>Terminal\uff08\u7ec8\u7aef\uff09\u662f\u4e00\u4e2a\u547d\u4ee4\u884c\u754c\u9762\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u6587\u672c\u547d\u4ee4\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92\u3002\u5b83\u662f Ubuntu \u548c\u5176\u4ed6\u57fa\u4e8e Linux \u7684\u64cd\u4f5c\u7cfb\u7edf\u7684\u6838\u5fc3\u5de5\u5177\u4e4b\u4e00\uff0c\u5141\u8bb8\u7528\u6237\u6267\u884c\u5404\u79cd\u4efb\u52a1\uff0c\u5982\u6587\u4ef6\u7ba1\u7406\u3001\u8f6f\u4ef6\u5b89\u88c5\u3001\u7cfb\u7edf\u914d\u7f6e\u7b49\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f\u6253\u5f00\u7ec8\u7aefterminal</p> <ul> <li>\u4f7f\u7528\u5feb\u6377\u952e\uff1a<code>Ctrl + Alt + T</code></li> <li>\u5728Show Applications\u4e2d\u641c\u7d22Terminal\u540e\u5355\u51fb\u6253\u5f00</li> <li>\u5728\u684c\u9762\u6216\u8005\u6587\u4ef6\u5939\u5185\u70b9\u51fb\u9f20\u6807\u53f3\u952e\uff0c\u9009\u62e9Open in Terminal</li> </ul> <p>\u4e0b\u56fe\u662fTerminal\u7684\u4e00\u4e2a\u57fa\u672c\u754c\u9762</p> <p></p> <p>\u4e0a\u56fe\u4e2d\uff1a</p> <ul> <li> <p>sy-OSlab\u4ee3\u8868\u5f53\u524d\u4e3b\u673a\u540d</p> </li> <li> <p>sy\u4ee3\u8868\u5f53\u524d\u7528\u6237\u540d</p> </li> <li> <p>~/Desktop\u4ee3\u8868\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff0c\u76f8\u5f53\u4e8e\u4f60\u7684\u6240\u6709\u547d\u4ee4\u90fd\u662f\u5728\u8fd9\u4e2a\u76ee\u5f55\u6267\u884c\u7684</p> </li> <li> <p>~\u4ee3\u8868\u76f8\u5bf9\u8def\u5f84\u201c/home/\u7528\u6237\u540d\u201d\uff0c\u76f8\u5f53\u4e8e\u5f53\u524d\u7528\u6237\u6240\u5c5e\u7684\u76ee\u5f55</p> </li> <li> <p>$\u4ee3\u8868\u76ee\u524d\u7528\u6237\u4e3a\u666e\u901a\u7528\u6237\u975e\u7ba1\u7406\u5458\u7528\u6237</p> </li> <li> <p>\u901a\u8fc7\u952e\u76d8\u7684\u4e0a\u3001\u4e0b\u6309\u94ae\u53ef\u4ee5\u9009\u62e9\u5386\u53f2\u547d\u4ee4</p> </li> <li> <p>\u901a\u8fc7\u8f93\u5165\u90e8\u5206\u8def\u5f84\u6216\u6587\u4ef6\u540d\u540e\u70b9\u51fbTab\u952e\u53ef\u4ee5\u81ea\u52a8\u8865\u5168</p> </li> </ul> <p>CUI vs GUI</p> <p>CUI(Command User Interface)\uff0c\u547d\u4ee4\u884c\u7528\u6237\u63a5\u53e3\uff0c\u7528\u6237\u901a\u8fc7\u6587\u672c\u547d\u4ee4\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92\uff0c\u5982windows\u7cfb\u7edf\u4e2d\u7684Command Line\u548c\u6211\u4eec\u5373\u5c06\u4f7f\u7528\u7684Linux\u7cfb\u7edf\u7684Terminal\u3002\u5728\u672c\u8bfe\u7a0b\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u4e3b\u8981\u901a\u8fc7CUI\u64cd\u4f5c\u5b8c\u6210\u5b9e\u9a8c\u3002</p> <p>GUI(Graphical User Interface)\uff0c\u56fe\u5f62\u7528\u6237\u63a5\u53e3\uff0c\u7528\u6237\u901a\u8fc7\u5bf9\u56fe\u5f62\u5316\u7684\u754c\u9762\u8fdb\u884c\u591a\u79cd\u5f62\u5f0f\uff08\u9f20\u6807\u3001\u952e\u76d8\u7b49\u8f93\u5165\u8bbe\u5907\uff09\u7684\u64cd\u4f5c\u6765\u4e0e\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92\uff0c\u5982\u6211\u4eec\u65e5\u5e38\u4f7f\u7528\u7684\u7535\u8111\u684c\u9762\u7cfb\u7edf\u53ca\u624b\u673a\u64cd\u4f5c\u3002</p>"},{"location":"lab/lab1/#step-2-ls-man-pwd-cd-mkdir-rm-cp-mv-history","title":"Step 2. \u5e38\u7528\u6307\u4ee4\uff1als, man, pwd, cd, mkdir, rm, cp, mv, history","text":""},{"location":"lab/lab1/#ls","title":"ls\u547d\u4ee4","text":"<p>\u5217\u51fa\u5f53\u524d\u8def\u5f84\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff08\u6587\u4ef6\u5939\uff09</p> <p></p> <p>\u8bf7\u5c1d\u8bd5\"ls -l\" \u53ca \"ls -a\"</p>"},{"location":"lab/lab1/#man","title":"man\u547d\u4ee4","text":"<p>\u5e2e\u52a9\u6307\u4ee4\uff0c\u901a\u8fc7man\u6307\u4ee4\u53ef\u4ee5\u67e5\u770blinux\u6307\u4ee4\u7684\u4f7f\u7528\u5e2e\u52a9</p> <p>\u8bf7\u5c1d\u8bd5\"man ls\"</p>"},{"location":"lab/lab1/#pwd","title":"pwd\u547d\u4ee4","text":"<p>\u67e5\u770b\u5f53\u524d\u76ee\u5f55\u5b8c\u6574\u7684\u7edd\u5bf9\u8def\u5f84</p> <p></p>"},{"location":"lab/lab1/#cd","title":"cd\u547d\u4ee4","text":"<p>\u8df3\u8f6c\u5de5\u4f5c\u76ee\u5f55</p> <p></p> <p>\"cd ..\"\uff0c\u8df3\u8f6c\u81f3\u4e0a\u7ea7\u76ee\u5f55</p> <p>\"cd \u8def\u5f84\"\u8df3\u8f6c\u81f3\u8def\u5f84\u7684\u76ee\u5f55</p> <p>\"cd /\"\u8df3\u8f6c\u81f3\u7cfb\u7edf\u6839\u76ee\u5f55\uff0clinux\u7cfb\u7edf\u6839\u76ee\u5f55\u4e3a/</p> <p>\"cd ~\"\u8df3\u8f6c\u81f3\u5f53\u524d\u7528\u6237\u76ee\u5f55\uff0c\u5373\"/home/\u7528\u6237\u540d\"\u76ee\u5f55</p>"},{"location":"lab/lab1/#mkdir","title":"mkdir\u547d\u4ee4","text":"<p>\u5728\u5f53\u524d\u76ee\u5f55\u521b\u5efa\u6587\u4ef6\u5939</p> <p></p> <p>linux\u7cfb\u7edf\u662f\u4e25\u683c\u533a\u5206\u5927\u5c0f\u5199\u7684\uff0c\u540c\u4e00\u4e2a\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u4f1a\u4f5c\u4e3a\u4e0d\u540c\u7684\u4e24\u4e2a\u5b57\u6bcd</p>"},{"location":"lab/lab1/#rm","title":"rm\u547d\u4ee4","text":"<p>\u5220\u9664\u6587\u4ef6\u6216\u6587\u4ef6\u5939</p> <p></p> <p>\u5220\u9664\u6587\u4ef6\u5939\u65f6\u53ef\u80fd\u4f1a\u78b0\u5230\u4ee5\u4e0b\u62a5\u9519</p> <p></p> <p>\u8fd9\u662f\u7531\u4e8e\u6587\u4ef6\u5939\u4e0e\u6587\u4ef6\u4e0d\u540c\uff0c\u6587\u4ef6\u5939\u5185\u53ef\u80fd\u6709\u6587\u4ef6\u6216\u6587\u4ef6\u5939\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u201c\u9012\u5f52\u5730\u201d\u8fdb\u884c\u5220\u9664\uff0c\u56e0\u6b64\u5728\u5220\u9664\u65f6\u589e\u52a0 -r  \u53c2\u6570\u4ee5\u9012\u5f52\u5730\u5220\u9664\u6587\u4ef6\u5939</p> <p></p>"},{"location":"lab/lab1/#cp","title":"cp\u547d\u4ee4","text":"<p>\u590d\u5236\u6587\u4ef6\u6216\u6587\u4ef6\u5939</p> <p></p> <p>\u8bf7\u5c1d\u8bd5\u901a\u8fc7cp\u547d\u4ee4\u590d\u5236\u6587\u4ef6\u5939</p>"},{"location":"lab/lab1/#mv","title":"mv\u547d\u4ee4","text":"<p>\u79fb\u52a8\u6587\u4ef6\u6216\u6587\u4ef6\u5939\uff0c\u540c\u76ee\u5f55\u4e0b\u79fb\u52a8\u76f8\u5f53\u4e8e\u91cd\u547d\u540d\u64cd\u4f5c</p> <p></p>"},{"location":"lab/lab1/#history","title":"history\u547d\u4ee4","text":"<p>\u67e5\u770b\u5386\u53f2\u547d\u4ee4</p>"},{"location":"lab/lab1/#step-3-echo-find-cat-grep-pipe","title":"Step 3. \u5e38\u7528\u6307\u4ee4: echo, find, cat, grep, |(pipe)\uff0c&gt;\uff0c&gt;&gt;\uff0c&lt;","text":""},{"location":"lab/lab1/#echo","title":"echo\u547d\u4ee4","text":"<p>\u8f93\u51fa\u5185\u5bb9</p> <p></p>"},{"location":"lab/lab1/#find","title":"find\u547d\u4ee4","text":"<p>\u67e5\u627e\u6587\u4ef6</p> <p></p> <p>\u53ef\u4ee5\u6307\u5b9a\u901a\u8fc7\u6587\u4ef6\u540d\u3001\u6587\u4ef6\u7c7b\u578b\u3001\u5927\u5c0f\u7b49\u4fe1\u606f\u8fdb\u884c\u67e5\u627e</p>"},{"location":"lab/lab1/#cat","title":"cat\u547d\u4ee4","text":"<p>\u5728terminal\u4e2d\u67e5\u770b\u6587\u4ef6\u5185\u5bb9</p> <p></p> <p>\u76f8\u5173\u7684\u547d\u4ee4\u8fd8\u6709head, tail, more, less\uff0c\u53ef\u4ee5\u5b9e\u73b0\u770b\u6587\u4ef6\u5934\u5c3e\uff0c\u5206\u9875\u67e5\u770b\u7684\u529f\u80fd</p> <p></p>"},{"location":"lab/lab1/#grep","title":"grep\u547d\u4ee4","text":"<p>\u67e5\u627e\u6587\u4ef6\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32</p> <p></p>"},{"location":"lab/lab1/#pipe","title":"| (pipe)\u64cd\u4f5c\u7b26","text":"<p>\u5c06|\u7b26\u53f7\u524d\u547d\u4ee4\u7684\u8f93\u51fa\u4f5c\u4e3a|\u7b26\u53f7\u540e\u547d\u4ee4\u7684\u8f93\u5165</p> <p></p>"},{"location":"lab/lab1/#_1","title":"&gt; , &gt;&gt;, &lt; \u64cd\u4f5c\u7b26","text":"<p>\u91cd\u5b9a\u5411\u8f93\u5165\u8f93\u51fa</p> <p></p> <p>&gt;\u53ef\u4ee5\u5c06\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\uff0c\u4e0a\u56fe\u4e2d\u5373\u5c06ls\u6307\u4ee4\u7684\u7ed3\u679c\u8f93\u51fa\u5230test\u6587\u4ef6\u4e2d</p> <p>\u8bf7\u5c1d\u8bd5&gt;&gt;, &lt;\u64cd\u4f5c\u7b26\u7684\u529f\u80fd</p>"},{"location":"lab/lab1/#step-4-sudo-chmod","title":"Step 4. \u5e38\u7528\u6307\u4ee4: sudo, chmod","text":""},{"location":"lab/lab1/#sudo","title":"sudo\u6307\u4ee4","text":"<p>\u4f7f\u7528\u7ba1\u7406\u5458\u6743\u9650\u6267\u884c\u540e\u9762\u7684\u547d\u4ee4</p> <p></p> <p>\u5f53\u6211\u4eec\u9700\u8981\u6267\u884c\u4e00\u4e9b\u6307\u4ee4\uff0c\u4f46\u662f\u6ca1\u6709\u7ba1\u7406\u5458\u6743\u9650\u65e0\u6cd5\u6267\u884c\u65f6\uff0c\u53ef\u4f7f\u7528sudo\u6307\u4ee4</p> <p>\u8bf7\u5c3d\u91cf\u4e0d\u8981\u5c1d\u8bd5\"sudo rm -rf /*\"</p>"},{"location":"lab/lab1/#chmod","title":"chmod\u6307\u4ee4","text":"<p>\u4fee\u6539\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u6743\u9650</p> <p>\u901a\u8fc7\u201cls -l\u201d\u6307\u4ee4\u53ef\u4ee5\u67e5\u770b\u6587\u4ef6\u7684\u6743\u9650</p> <p></p> <p>\u4e0a\u56fe\u4e2d\u6587\u4ef6/\u6587\u4ef6\u5939\u6700\u524d\u65b9\u7684drwxrwxr-x\u4ee3\u8868\u8be5\u6587\u4ef6/\u6587\u4ef6\u5939\u7684\u6587\u4ef6\u6743\u9650\u3002\u5176\u6240\u4ee3\u8868\u7684\u542b\u4e49\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u9700\u8981\u4fee\u6539\u6743\u9650\u53ef\u4ee5\u901a\u8fc7chmod\u547d\u4ee4</p> <p></p> <p>\u5982\u4e0a\u56fe\u6240\u793a\uff0cu\\g\\o\u5206\u522b\u4ee3\u8868user\\group\\other\u7c7b\u522b\u7528\u6237\uff0c+\u3001-\u3001=\u5206\u522b\u4ee3\u8868\u589e\u52a0\u3001\u51cf\u5c11\u3001\u8bbe\u7f6e\u4e3a\u76f8\u5e94\u7684\u6743\u9650\u3002</p> <p>chmod 775\u5219\u53ef\u4ee5\u5c06\u6240\u6709\u7ec4\u522b\u7684\u6743\u9650\u4e00\u6b21\u8bbe\u7f6e\u5b8c\u6210\uff0c\u6570\u5b577\u548c5\u5206\u522b\u4ee3\u8868\u4e8c\u8fdb\u5236111\u548c101\uff0c\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u7684\u6570\u5b57\u5206\u522b\u4ee3\u8868rwx\u7684\u76f8\u5e94\u6743\u9650\uff0c\u5982101\u5373\u4ee3\u8868\"1\u53efr+0\u4e0d\u53efw+1\u53efx\"\uff0c\u56e0\u6b64chmod 775\u5373\u4ee3\u8868\u5c06\u8be5\u6587\u4ef6\u6743\u9650\u6539\u4e3auser\u7ec4\u53ef\u8bfb\u53ef\u5199\u53ef\u6267\u884c\uff0cgroup\u53ef\u8bfb\u53ef\u5199\u53ef\u6267\u884c\uff0cother\u53ef\u8bfb\u4e0d\u53ef\u5199\u53ef\u6267\u884c\u3002</p>"},{"location":"lab/lab1/#step-5-vim","title":"Step 5. \u5b89\u88c5vim","text":"<p>Vim \u662f\u4e00\u4e2a\u9ad8\u5ea6\u53ef\u914d\u7f6e\u7684\u6587\u672c\u7f16\u8f91\u5668\uff0c\u5e7f\u6cdb\u7528\u4e8e\u7f16\u7a0b\u548c\u6587\u672c\u7f16\u8f91\u3002\u5b83\u662f Vi \u7f16\u8f91\u5668\u7684\u6539\u8fdb\u7248\u672c\uff08Vi IMproved \u7684\u7f29\u5199\uff09\uff0c\u5728\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d\u5bf9\u6587\u672c\u8fdb\u884c\u7f16\u8f91\u3002</p> <p>\u901a\u8fc7<code>apt-get install vim</code>\u6307\u4ee4\u5b89\u88c5vim\u8f6f\u4ef6</p> <p></p> <p>\u5b89\u88c5\u5b8c\u6210\u540e\u53ef\u4ee5\u901a\u8fc7vim\u6307\u4ee4\u521b\u5efa\u6216\u6253\u5f00\u6587\u4ef6</p> <p></p> <p></p> <p>\u901a\u8fc7vim\u6253\u5f00\u6587\u4ef6\u540e\u4f1a\u8fdb\u5165\u4e0a\u56fe\u7684Command mode\uff0cvim\u4e00\u5171\u6709\u4e09\u79cd\u6a21\u5f0f\uff1a</p> <ul> <li> <p>Command mode\uff1a\u7528\u6237\u6240\u6709\u7684\u8f93\u5165\u90fd\u662fcommand\u800c\u4e0d\u662f\u6587\u672c</p> </li> <li> <p>Insert mode\uff1a\u4eceCommand mode\u901a\u8fc7\u70b9\u51fbi\u952e\u8fdb\u5165Insert mode\uff0c\u8fdb\u5165\u540e\u53ef\u4ee5\u8fdb\u884c\u6587\u672c\u8f93\u5165\uff1b\u901a\u8fc7Esc\u6309\u94ae\u9000\u51faInsert mode\u56de\u5230Command mode</p> </li> <li> <p>Last line mode\uff1a\u4eceCommand mode\u901a\u8fc7\u8f93\u5165\u5192\u53f7\uff08shift+;\uff09\u8fdb\u5165\uff0cterminal\u6700\u540e\u4e00\u884c\u5de6\u4fa7\u4f1a\u51fa\u73b0\u201c:\u201d\uff0c\u6b64\u65f6\u53ef\u4ee5\u8f93\u5165\u7279\u6b8a\u6307\u4ee4\uff0c\u5982\"wq\"\u5373\u5199\u5165\uff08\u4fdd\u5b58\uff09\u540e\u9000\u51fa\uff08write and quit)</p> </li> </ul> <p></p>"},{"location":"lab/lab1/#step-6-gccc","title":"Step 6. \u901a\u8fc7gcc\u8fd0\u884c\u4e00\u4e2ac\u7a0b\u5e8f","text":""},{"location":"lab/lab1/#vim-helloc","title":"vim hello.c","text":"<p>\u901a\u8fc7vim\u521b\u5efa\u5e76\u5b8c\u6210\u4e00\u4e2a\u7b80\u5355\u7684\u6b7b\u5faa\u73af\u4ee3\u7801</p> <p></p> <p>\u4fdd\u5b58\u5e76\u9000\u51fa</p> <p></p>"},{"location":"lab/lab1/#gcc-helloc","title":"gcc hello.c","text":"<p>\u901a\u8fc7gcc\u6307\u4ee4\u5bf9\u8be5\u6587\u4ef6\u8fdb\u884c\u7f16\u8bd1\u5e76\u4ea7\u751f\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u672a\u6307\u5b9a\u8f93\u51fa\u6587\u4ef6\u540d\u7684\u60c5\u51b5\u4e0b\u53ef\u6267\u884c\u6587\u4ef6\u9ed8\u8ba4\u6587\u4ef6\u540d\u4e3aa.out\u3002\u66f4\u5177\u4f53\u7684gcc\u64cd\u4f5c\u8fc7\u7a0b\u5c06\u5728\u4e0b\u4e00\u6b21\u5b9e\u9a8c\u8bfe\u8fdb\u884c\u7ec3\u4e60\u3002\u672c\u8282\u8bfe\u6211\u4eec\u53ea\u9700\u8981\u80fd\u8fd0\u884c\u8d77\u4e00\u4e2a\u6700\u7b80\u5355\u7684c\u8bed\u8a00\u7a0b\u5e8f\u3002</p> <p></p>"},{"location":"lab/lab1/#aout","title":"./a.out","text":"<p>\u901a\u8fc7\"./a.out\"\u6307\u4ee4\u8fd0\u884ca.out\u6587\u4ef6\uff0c\u5176\u4e2d.\u7b26\u53f7\u4ee3\u8868\u5f53\u524d\u8def\u5f84</p> <p></p> <p>\u7531\u4e8e\u6211\u4eec\u5199\u7684\u662f\u4e00\u4e2a\u6b7b\u5faa\u73af\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u7a0b\u5e8f\u6267\u884c\u540e\u8fdb\u5165\u4e86\u6b7b\u5faa\u73af\u3002</p>"},{"location":"lab/lab1/#step-7-ps-kill-pstree","title":"Step 7. \u5e38\u7528\u6307\u4ee4: ps, kill, pstree","text":""},{"location":"lab/lab1/#ps","title":"ps\u547d\u4ee4","text":"<p>\u6253\u5f00\u53e6\u4e00\u4e2aterminal\uff0c\u6267\u884cps\u6307\u4ee4\uff0c\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u4f1a\u8bdd\u4e2d\u7684\u8fdb\u7a0b\u5217\u8868</p> <p></p> <p>\u7531\u4e8e\u4e4b\u524d\u8fd0\u884c\u7684\u7a0b\u5e8f\u548c\u65b0\u7684terminal\u4e0d\u5728\u4e00\u4e2a\u4f1a\u8bdd\u7ec4\uff0c\u56e0\u6b64\u4e0a\u56fe\u4e2d\u6ca1\u6709\u663e\u793a\uff0c\u53ef\u4ee5\u901a\u8fc7\"ps -a\"\u6307\u4ee4\u67e5\u770b</p> <p></p> <p>\u8be5\u5217\u8868\u4e2dPID\u4e3aProcess ID\u5373\u8fdb\u7a0b\u53f7\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u62e5\u6709\u4e0d\u540c\u7684\u8fdb\u7a0b\u53f7\uff0c\u4e00\u822c\u4e3a\u589e\u5e8f\u987a\u5e8f\u5206\u914d\u3002\u4f46\u8fdb\u7a0b\u53f7\u7684\u6570\u91cf\u662f\u6709\u9650\u7684\uff0c\u5e76\u4e14\u4f1a\u56de\u6536\u518d\u5229\u7528\u3002</p>"},{"location":"lab/lab1/#pstree","title":"pstree\u547d\u4ee4","text":"<p>\u53ef\u4ee5\u67e5\u770b\u8fdb\u7a0b\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\"pstree -p\"\u53ef\u4ee5\u663e\u793a\u5e26\u8fdb\u7a0b\u53f7\u7684\u8fdb\u7a0b\u6811</p> <p></p>"},{"location":"lab/lab1/#kill","title":"kill\u547d\u4ee4","text":"<p>\u53ef\u4ee5\u5411\u8fdb\u7a0b\u53d1\u9001\u4e2d\u65ad\uff0c\u5176\u4e2d\u201ckill -9 \u8fdb\u7a0b\u53f7\u201d\u53d1\u9001\u7684\u662f\u5f3a\u5236\u7ec8\u6b62\u7684\u4fe1\u53f7\uff08SIGKILL\uff09\u53ef\u4ee5\u7528\u6765\u6740\u6b7b\u8be5\u8fdb\u7a0b\u53f7\u4ee3\u8868\u7684\u8fdb\u7a0b\uff08\u5f3a\u5236\u7ed3\u675f\u8fdb\u7a0b\uff09</p> <p></p>"},{"location":"lab/lab1/#step-8-ctrlc-ctrlz-fg","title":"Step 8. \u5e38\u7528\u6307\u4ee4: ctrl+c, ctrl+z, fg","text":"<p>\u5f53\u6211\u4eec\u8fd0\u884c\u4e86\u4e00\u4e2a\u7a0b\u5e8f\u65e0\u6cd5\u9000\u51fa\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u901a\u8fc7\u5176\u4ed6terminal\u53d1\u9001\u4fe1\u53f7\u6765\u505c\u6b62\u8be5\u8fdb\u7a0b\u3002</p>"},{"location":"lab/lab1/#ctrlc","title":"ctrl+c","text":"<p>\u7ec8\u6b62\u524d\u53f0\u8fdb\u7a0b</p> <p></p>"},{"location":"lab/lab1/#ctrlz","title":"ctrl+z","text":"<p>\u6682\u505c\u524d\u53f0\u8fdb\u7a0b</p> <p></p> <p></p> <p>\u6682\u505c\u7684\u524d\u53f0\u8fdb\u7a0b\u5e76\u6ca1\u6709\u88ab\u6740\u6b7b\uff0c\u53ea\u662f\u8fdb\u5165\u4e86T\u6682\u505c\u72b6\u6001\u3002\u540e\u9762\u7684\u8bfe\u7a0b\u4e2d\u6211\u4eec\u4f1a\u4e86\u89e3\u5230\u66f4\u591a\u8fdb\u7a0b\u7684\u72b6\u6001\u3002</p> <p></p> <p>\u8fdb\u7a0b\u6682\u505c\u65f6\u663e\u793a\u7684\u53f7\u7801\u4e3a\u8be5\u8fdb\u7a0b\u7684job\u53f7</p>"},{"location":"lab/lab1/#fg","title":"fg\u547d\u4ee4","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u201cfg job\u53f7\u201d\u547d\u4ee4\u5c06\u6682\u505c\u7684\u8fdb\u7a0b\u6062\u590d\u5230\u524d\u53f0\u8fd0\u884c\u3002</p> <p></p> <p>Note</p> <p>\u5728\u4e0b\u4e00\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5c06\u5bf9c\u8bed\u8a00\u7f16\u7a0b\uff0c\u5d4c\u5165\u5f0f\u6c47\u7f16\u53camakefile\u8fdb\u884c\u4ecb\u7ecd\u3002\u4e0b\u5468\u9700\u8981\u63d0\u4ea4\u5b9e\u9a8c\u62a5\u544a\uff0c\u56e0\u6b64\u8bf7\u5927\u5bb6\u5e26\u6839\u7b14\u3002</p>"},{"location":"lab/lab2/","title":"C \u8bed\u8a00\u57fa\u7840\u53caMakefile","text":"<p>C \u8bed\u8a00\u57fa\u7840</p> <p>\u5982\u679c\u4f60\u6ca1\u6709\u5b66\u4e60\u8fc7 C \u8bed\u8a00\uff0c\u6211\u4eec \u975e\u5e38\u5efa\u8bae \u4f60\u63d0\u524d\u89c2\u770b\u4e8e\u8001\u5e08\u7684 C/C++ \u8bfe\u7a0b https://www.bilibili.com/video/BV1Vf4y1P7pq \uff0c\u89c2\u770b\u5230\u7b2c 6.5 \u7ae0\u8282\u6709\u52a9\u4e8e\u4f60\u4e86\u89e3\u57fa\u672c\u7684 C \u8bed\u8a00\u8bed\u6cd5\u3002</p> <p>RISC-V \u6c47\u7f16</p> <p>\u6211\u4eec\u671f\u671b\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86\u300a\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406\u300b\u8bfe\u7a0b\uff0c\u5e76\u4e86\u89e3 RISC-V \u6c47\u7f16\u7684\u57fa\u7840\u77e5\u8bc6\u3002</p> <p>\u6b64\u5916\uff0c\u8bf7\u5e38\u5907 \u300aThe RISC-V Instruction Set Manual, Volume I: User-Level ISA, Version 2.1\u300b(riscv-spec-v2.1.pdf) \u4e0e \u300aThe RISC-V Instruction Set Manual, Volume II: Privileged Architecture, Document Version 20211203\u300b(riscv-privileged-20211203.pdf) \u4f5c\u4e3a\u53c2\u8003 RISC-V \u6c47\u7f16\u7684\u53c2\u8003\u624b\u518c\u3002</p>"},{"location":"lab/lab2/#_1","title":"\u7c7b\u578b","text":"<p>\u5728 C \u8bed\u8a00\u4e2d\uff0c\u6574\u6570\u7c7b\u578b\u6709 long, int, short, char \u7b49\u3002 \u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0cint \u7c7b\u578b\u4e3a 32 \u4f4d\u957f\uff0c\u800c long \u7c7b\u578b\u7684\u957f\u5ea6\u53d6\u51b3\u4e8e ABI\uff08Application Binary Interface\uff0c\u5728\u7f16\u8bd1\u65f6\u7531\u7528\u6237\u6307\u5b9a\uff09\u3002 \u4e3a\u4e86\u907f\u514d\u7f16\u8bd1\u76ee\u6807\u67b6\u6784\u7684\u4e0d\u540c\u800c\u5bfc\u81f4 long\u3001int \u7b49\u7c7b\u578b\u5b9e\u9645\u957f\u5ea6\u4e0e\u6211\u4eec\u9884\u60f3\u7684\u4e0d\u4e00\u81f4\uff0c\u5728\u7cfb\u7edf\u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u5b9a\u957f\u7684\u6574\u5f62\uff0c\u5982 uint64_t, int32_t \u7b49\u3002 \u5728\u4e0d\u540c\u7684ABI/\u7f16\u8bd1\u5668\u73af\u5883\u4e0b\uff0c\u4f7f\u7528\u8fd9\u4e00\u4e9b\u7c7b\u578b\u4fdd\u8bc1\u4e86\u5b83\u4eec\u7edd\u5bf9\u662f\u6307\u5b9a\u957f\u5ea6\u7684\u3002</p> <p>\u4f8b\u5982\uff0c\u5728 <code>os/types.h</code> \u4e2d\uff1a</p> os/types.h<pre><code>typedef unsigned int uint;\ntypedef unsigned short ushort;\ntypedef unsigned char uchar;\ntypedef unsigned char uint8;\ntypedef unsigned short uint16;\ntypedef unsigned int uint32;\ntypedef unsigned long uint64;\n</code></pre> <p>\u6211\u4eec\u5b9a\u4e49\u4e86 <code>uint64</code>, <code>uint32</code> \u7b49\u7c7b\u578b\u5206\u522b\u4e3a <code>unsigned long</code> \u548c <code>unsigned int</code>\u3002 \u7531\u4e8e\u6211\u4eec\u9762\u5411 riscv64 \u67b6\u6784\u8fdb\u884c\u7f16\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u4fdd\u5728\u6211\u4eec\u7684 XV6 \u4e2d\uff0c\u5b83\u4eec\u662f 64 / 32 \u4f4d\u7684\u3002</p> <p>unsigned</p> <p>\u6ce8\u610f\u5728C\u8bed\u8a00\u4e2d\u503c\u5728int\u7c7b\u578b\u53d6\u503c\u8303\u56f4\u5185\u7684\u6574\u6570\u5b57\u9762\u91cf\u7684\u9ed8\u8ba4\u7c7b\u578b\u662fint\u3002</p> <p>\u5f53unsigned int\u4e0e\u6709\u7b26\u53f7\u6574\u6570\uff08\u5982int\uff09\u6bd4\u8f83\u65f6\uff0c\u6709\u7b26\u53f7\u6574\u6570\u4f1a\u88ab\u63d0\u5347\u4e3aunsigned int\u3002\u5982\u679c\u5e38\u6570\u4e3a\u8d1f\u6570\uff0c\u63d0\u5347\u540e\u53ef\u80fd\u53d8\u6210\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u65e0\u7b26\u53f7\u503c\uff0c\u5bfc\u81f4\u6bd4\u8f83\u7ed3\u679c\u4e0e\u9884\u671f\u4e0d\u7b26\u3002</p> <p>\u53ef\u4ee5\u5c1d\u8bd5\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u89c2\u5bdf\u7ed3\u679c\uff1a</p> <p></p>"},{"location":"lab/lab2/#_2","title":"\u6307\u9488","text":"<p>\u6307\u9488\u662f\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4e00\u79cd\u53d8\u91cf\u7c7b\u578b\uff0c\u5b83\u5b58\u50a8\u4e86\u53e6\u4e00\u4e2a\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u3002\u901a\u8fc7\u6307\u9488\uff0c\u53ef\u4ee5\u95f4\u63a5\u8bbf\u95ee\u548c\u64cd\u4f5c\u5176\u4ed6\u53d8\u91cf\u7684\u503c\u3002\u6307\u9488\u901a\u5e38\u7528\u4e8e\u52a8\u6001\u5185\u5b58\u5206\u914d\u3001\u51fd\u6570\u53c2\u6570\u4f20\u9012\u3001\u6570\u636e\u7ed3\u6784\uff08\u5982\u94fe\u8868\u3001\u6811\u7b49\uff09\u7684\u5b9e\u73b0\u7b49\u573a\u666f\u3002</p> <ol> <li> <p>\u6307\u9488\u7684\"\u5185\u5bb9\"\uff1a\u5b83\u5b58\u50a8\u7684\u662f\u5185\u5b58\u5730\u5740\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5b58\u50a8\u6570\u636e\u503c\u3002\u4f8b\u5982\uff0c\u6307\u9488 p \u53ef\u4ee5\u5b58\u50a8\u4e00\u4e2a\u53d8\u91cf x \u7684\u5185\u5b58\u5730\u5740\uff0c\u800c\u4e0d\u662f x \u7684\u503c\u3002</p> </li> <li> <p>\u6307\u9488\u7684\u7c7b\u578b\uff1a\u6307\u9488\u6709\u4e00\u4e2a\u7c7b\u578b\uff0c\u8868\u793a\u5b83\u6307\u5411\u7684\u662f\u54ea\u79cd\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u4f8b\u5982\uff0c<code>int* p</code> \u8868\u793a p \u662f\u4e00\u4e2a\u6307\u5411 int \u7c7b\u578b\u7684\u6307\u9488\u3002</p> </li> <li> <p>\u89e3\u5f15\u7528\uff1a\u901a\u8fc7\u6307\u9488\u8bbf\u95ee\u5176\u6307\u5411\u7684\u53d8\u91cf\u7684\u8fc7\u7a0b\u53eb\u505a\u89e3\u5f15\u7528\uff0c\u5728 C \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7 * \u64cd\u4f5c\u7b26\u6765\u89e3\u5f15\u7528\u4e00\u4e2a\u6307\u9488\uff0c\u83b7\u53d6\u6307\u9488\u6240\u6307\u5411\u7684\u503c\u3002</p> </li> <li> <p>\u53d6\u5730\u5740\uff1a\u6240\u6709\u4fdd\u5b58\u5728\u5185\u5b58\u4e0a\u7684\u53d8\u91cf\u53ef\u4ee5\u88ab\u53d6\u5730\u5740\uff0c\u6211\u4eec\u4f7f\u7528 <code>&amp;</code> \u6765\u8868\u793a\u53d6\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u3002</p> </li> </ol> <p>\u4f8b\u5982\uff1a</p> <pre><code>int a = 10;     // \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf a\uff0c\u521d\u59cb\u5316\u4e3a 10\u3002\nint *p = &amp;a;    // \u53d6\u53d8\u91cf a \u7684\u5185\u5b58\u5730\u5740\uff0c\u653e\u5165\u6307\u9488 p \u4e2d\n*p = 20;        // \u5c06 p \u6307\u5411\u7684\u5185\u5b58\u5730\u5740\u4fee\u6539\u4e3a 20\n\nint b = 30;\nint **pp = &amp;p;  // \u53d6\u53d8\u91cf p \u7684\u5730\u5740\uff0c\u653e\u5165\u6307\u9488 pp \u4e2d\n*pp = &amp;b;       // \u5c06\u6307\u9488 p \u7684\u5185\u5bb9(\u5176\u6307\u5411\u7684\u5730\u5740)\uff0c\u6539\u4e3a\u53d8\u91cf b \u7684\u5730\u5740\u3002\n**pp = 50;      // \u4e24\u6b21\u89e3\u5f15\u7528\u3002\n\nprintf(\"a: %d, b:%d\\n\", a, b);  // \u8f93\u51fa: a:20, b:50.\n</code></pre> <p>\u4e00\u5f20\u56fe\u7406\u89e3\u6307\u9488\uff1a</p> <p></p>"},{"location":"lab/lab2/#_3","title":"\u7ed3\u6784\u4f53","text":"<p>\u6211\u4eec\u4f7f\u7528 <code>struct</code> \u5173\u952e\u5b57\u8868\u660e\u8be5\u7c7b\u578b\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002 \u7ed3\u6784\u4f53\u662f\u4e00\u5806\u6253\u5305\u5728\u4e00\u8d77\u7684\u6570\u636e\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u58f0\u660e\u7ed3\u6784\u4f53 <code>struct proc</code>\uff0c\u5b83\u7684\u5b57\u6bb5\u5982\u4e0b\uff1a</p> <pre><code>struct proc {\n    int pid;\n    char* name;\n    void* chan;\n    uint64 krkr;\n    uint8 dkdk;\n};\n</code></pre> <p>\u6211\u4eec\u4f7f\u7528 <code>.</code> \u64cd\u4f5c\u7b26\u8bbf\u95ee\u4e00\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u5b57\u6bb5\uff0c\u4f7f\u7528 <code>-&gt;</code> \u64cd\u4f5c\u7b26\u89e3\u5f15\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u6307\u9488\u7684\u5b57\u6bb5\u3002</p> <pre><code>struct proc p1;\np1.pid = 1234;\n\nstruct proc *pProc = &amp;p1;\npProc-&gt;name = \"proc 1234\";\n</code></pre>"},{"location":"lab/lab2/#_4","title":"\u7f16\u8bd1\u7cfb\u7edf","text":"<p>\u5728\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u7b80\u8981\u7684\u4ecb\u7ecd\u4e86 C \u8bed\u8a00\u7684\u7f16\u8bd1\u7cfb\u7edf\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u7f16\u8bd1\u4e00\u4e2a\u7a0b\u5e8f\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65\uff1a</p> <p></p> <ol> <li>\u6e90\u4ee3\u7801 .c \u6587\u4ef6\u7ecf\u8fc7 Pre-processor \u9884\u5904\u7406 cpp \u5f97\u5230 .i \u6587\u4ef6</li> </ol> <p>.i \u6587\u4ef6\u662f GCC \u9884\u5904\u7406\u9636\u6bb5\u751f\u6210\u7684\u4e2d\u95f4\u6587\u4ef6\uff0c\u5305\u542b\u4e86\u5c55\u5f00\u7684\u5934\u6587\u4ef6\u3001\u5b8f\u5b9a\u4e49\u548c\u6761\u4ef6\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\u3002\u4f7f\u7528 gcc -E \u53ef\u4ee5\u751f\u6210 .i \u6587\u4ef6\u3002</p> <ol> <li>.i \u6587\u4ef6\u901a\u8fc7\u7f16\u8bd1\u5668 cc1 \u7f16\u8bd1\u5668\u5f97\u5230\u6c47\u7f16\u6587\u4ef6 .s</li> </ol> <p>\u7f16\u8bd1\u5668\u5bf9.i\u6587\u4ef6\u8fdb\u884c\u8bed\u6cd5\u68c0\u67e5\uff0c\u68c0\u67e5\u65e0\u8bef\u540e\u5c06.i\u6587\u4ef6\u8f6c\u6362\u6210\u673a\u5668\u53ef\u4ee5\u7406\u89e3\u7684\u6c47\u7f16\u4ee3\u7801\uff08\u4eba\u7c7b\u53ef\u9605\u8bfb\u5f62\u5f0f\u7684\u673a\u5668\u4ee3\u7801\uff09\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\u4f18\u5316\u5668\u53ef\u4ee5\u5bf9\u4ee3\u7801\u8fdb\u884c\u4f18\u5316\u3002</p> <ol> <li>.s \u6587\u4ef6\u901a\u8fc7\u6c47\u7f16\u5668 as \u5f97\u5230 Relocatable objects (\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6) .o</li> </ol> <p>\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u6c47\u7f16\u5668\u5c06\u6c47\u7f16\u4ee3\u7801\u8f6c\u6362\u4e3a\u76ee\u6807\u4ee3\u7801\uff08\u673a\u5668\u4ee3\u7801-\u76f4\u63a5\u5728\u673a\u5668\u4e0a\u6267\u884c\u7684\u4ee3\u7801\uff0c\u4eba\u7c7b\u4e0d\u53ef\u8bfb\uff09\u3002</p> <ol> <li>\u94fe\u63a5\u5668 ld \u94fe\u63a5\u6240\u6709 .o \u6587\u4ef6\u5f97\u5230\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6</li> </ol> <p>\u5728 Linux \u7cfb\u7edf\u4e0a\uff0c\u76ee\u6807\u6587\u4ef6\u53ca\u53ef\u6267\u884c\u6587\u4ef6\u901a\u5e38\u4ee5 ELF (Executable and Linkable Format) \u6587\u4ef6\u683c\u5f0f\u5b58\u50a8\u3002    ELF \u6587\u4ef6\u5206\u4e3a\u4e0d\u540c\u7684\u6bb5 Section\uff0c\u7528\u4e8e\u5b58\u50a8\u7279\u5b9a\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5982\u4ee3\u7801\uff08.text\uff09\u3001\u6570\u636e\uff08.data\uff09\u548c\u7b26\u53f7\u8868\uff08.symtab\uff09\uff0c\u6bcf\u4e2a\u6bb5\u90fd\u6709\u5176\u4e13\u95e8\u7684\u7528\u9014\u548c\u5c5e\u6027\u3002</p> <p>\u901a\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u7528\"\u7f16\u8bd1\u5668\"\u6765\u6307\u4ee3\u6574\u4e2a\u7f16\u8bd1\u4e0e\u94fe\u63a5\u8fc7\u7a0b\u4e2d\u7528\u5230\u7684\u6240\u6709\u5de5\u5177\uff0c\u5c3d\u7ba1\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u7a0b\u5e8f\u3002\u7279\u522b\u7684\uff0c\u5f53\u6211\u4eec\u8ba8\u8bba\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u65f6\uff0c\u6211\u4eec\u4f1a\u5c06\u8fdb\u884c \u9884\u5904\u7406\u3001\u6c47\u7f16\u3001\u7f16\u8bd1 \u7b49\u6b65\u9aa4\u7684\u5de5\u5177\u96c6\u5408\u7edf\u79f0\u4e3a\u7f16\u8bd1\u5668\uff1b\u5c06\u6700\u540e\u7684\u94fe\u63a5\u6b65\u9aa4\u6240\u7528\u7684\u5de5\u5177\u79f0\u4e3a\u94fe\u63a5\u5668\u3002</p> \u5b9e\u9a8c\u6b65\u9aa41\uff1a\u89c2\u5bdfC\u8bed\u8a00\u7f16\u8bd1\u8fc7\u7a0b <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684C\u8bed\u8a00\u4ee3\u7801\u793a\u4f8b\uff0c\u9002\u5408\u7528\u4e8e\u89c2\u5bdfGCC\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u7684 <code>.i</code>\u3001<code>.s</code>\u3001<code>.o</code> \u6587\u4ef6\uff1a</p> <pre><code>// main.c\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a = 10;\n    int b = 20;\n    int sum = a + b;\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}\n</code></pre>"},{"location":"lab/lab2/#_5","title":"\u89c2\u5bdf\u7f16\u8bd1\u8fc7\u7a0b","text":"<ol> <li> <p>\u9884\u5904\u7406\uff08Preprocessing\uff09\uff1a\u751f\u6210 <code>.i</code> \u6587\u4ef6    <pre><code>gcc -E main.c -o main.i\n</code></pre>    \u8fd9\u4f1a\u751f\u6210 <code>main.i</code> \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u9884\u5904\u7406\u540e\u7684\u4ee3\u7801\uff08\u5b8f\u5c55\u5f00\u3001\u5934\u6587\u4ef6\u5305\u542b\u7b49\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>cat main.i</code> \u67e5\u770b\u5176\u5185\u5bb9\u3002</p> </li> <li> <p>\u7f16\u8bd1\uff08Compilation\uff09\uff1a\u751f\u6210 <code>.s</code> \u6587\u4ef6    <pre><code>gcc -S main.i -o main.s\n</code></pre>    \u8fd9\u4f1a\u751f\u6210 <code>main.s</code> \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6c47\u7f16\u4ee3\u7801\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>cat main.s</code> \u67e5\u770b\u5176\u5185\u5bb9</p> </li> <li> <p>\u6c47\u7f16\uff08Assembly\uff09\uff1a\u751f\u6210 <code>.o</code> \u6587\u4ef6    <pre><code>gcc -c main.s -o main.o\n</code></pre>    \u8fd9\u4f1a\u751f\u6210 <code>main.o</code> \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u76ee\u6807\u4ee3\u7801\uff08\u673a\u5668\u4ee3\u7801\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>objdump</code> \u5de5\u5177\u6765\u5206\u6790 <code>main.o</code> \u7684\u5185\u5bb9\u3002\u4f8b\u5982\u4f7f\u7528 <code>objdump -d hello.o</code> \u53ef\u4ee5\u67e5\u770b\u673a\u5668\u7801\u53ca\u5176\u5bf9\u5e94\u7684\u6c47\u7f16\u6307\u4ee4\u3002 </p> </li> <li> <p>\u94fe\u63a5\uff08Linking\uff09\uff1a\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6    <pre><code>gcc main.o -o main\n</code></pre>    \u8fd9\u4f1a\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 <code>main</code>\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>file main</code> \u6765\u67e5\u770b <code>main</code> \u7684\u6587\u4ef6\u7c7b\u578b\u4e3aELF\u3002\u53ef\u4ee5\u901a\u8fc7GNU Binutils\u5de5\u5177\u96c6\u4e2d\u7684 <code>readelf</code> \u5de5\u5177\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b ELF \u6587\u4ef6\u7684\u6587\u4ef6\u5934\u3001\u6bb5\u4fe1\u606f\u3001\u7b26\u53f7\u8868\u3001\u52a8\u6001\u6bb5\u4fe1\u606f\u7b49\u3002\u4f8b\u5982\u4f7f\u7528 <code>readelf -h main</code> \u53ef\u4ee5\u67e5\u770b <code>main</code> \u7684\u6587\u4ef6\u5934\u3002</p> </li> </ol>"},{"location":"lab/lab2/#definition-declaration","title":"Definition \u548c Declaration","text":"<p>Definition \uff08\u5b9a\u4e49\uff09 \u548c Declaration \uff08\u58f0\u660e\uff09 \u662f C \u8bed\u8a00\u4e2d\u975e\u5e38\u5bb9\u6613\u6df7\u6dc6\u7684\u4e24\u4e2a\u6982\u5ff5\u3002</p> <p>Declaration \u58f0\u660e\u4e86\u4e00\u4e2a\u7b26\u53f7\uff08\u53d8\u91cf\u3001\u51fd\u6570\u7b49\uff09\uff0c\u548c\u5b83\u7684\u7684\u4e00\u4e9b\u57fa\u7840\u4fe1\u606f\uff08\u5982\u53d8\u91cf\u7c7b\u578b\u3001\u51fd\u6570\u53c2\u6570\u7c7b\u578b\u3001\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7b49\uff09\u3002\u8fd9\u4f7f\u5f97\u7f16\u8bd1\u5668 \u5728\u7f16\u8bd1\u9636\u6bb5 \u80fd\u4f7f\u7528\u8fd9\u4e9b\u7c7b\u578b\u4fe1\u606f\u8fdb\u884c\u4ee3\u7801\u751f\u6210 (Code Generation)\u3002</p> <p>\u800c Definition \u5b9e\u9645\u4e0a\u4f1a\u4e3a\u8be5\u7b26\u53f7\u5206\u914d\u5185\u5b58\u5730\u5740\u3002\u94fe\u63a5\u5668\u4f1a \u5728\u94fe\u63a5\u9636\u6bb5 \u4e3a\u8fd9\u4e9b\u7b26\u53f7 \u5206\u914d\u5730\u5740\uff08\u5982\u51fd\u6570\u5730\u5740\u3001\u5168\u5c40\u53d8\u91cf\u5730\u5740\uff09\u3002</p> <p>Symbol \uff08\u7b26\u53f7\uff09</p> <p>\u5728 C \u8bed\u8a00\u4e2d\uff0c\u7b26\u53f7\uff08Symbol\uff09\u662f\u7f16\u8bd1\u5668\u7528\u6765\u8868\u793a\u7a0b\u5e8f\u4e2d\u5404\u79cd\u5b9e\u4f53\uff08\u5982\u53d8\u91cf\u3001\u51fd\u6570\u3001\u5b8f\u3001\u7c7b\u578b\u540d\u7b49\uff09\u7684\u540d\u79f0\u3002\u6bcf\u4e2a\u7b26\u53f7\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u88ab\u5173\u8054\u5230\u7279\u5b9a\u7684\u5185\u5b58\u5730\u5740\u6216\u5176\u4ed6\u8d44\u6e90\u3002\u5f53\u7a0b\u5e8f\u88ab\u7f16\u8bd1\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u4e3a\u8fd9\u4e9b\u7b26\u53f7\u521b\u5efa\u7b26\u53f7\u8868 (Symbol Table)\uff0c\u8bb0\u5f55\u5b83\u4eec\u7684\u540d\u79f0\u3001\u7c7b\u578b\u3001\u4f5c\u7528\u57df\u4ee5\u53ca\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u6216\u503c\u3002</p> <p>\u7b80\u800c\u8a00\u4e4b\uff0c\u7b26\u53f7\u662f\u7a0b\u5e8f\u4e2d\u4ee3\u8868\u5b9e\u4f53\u7684\u540d\u5b57\uff0c\u7f16\u8bd1\u5668\u901a\u8fc7\u7b26\u53f7\u8868\u6765\u7ba1\u7406\u548c\u89e3\u6790\u8fd9\u4e9b\u540d\u5b57\u3002</p> <p>\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u67d0\u4e2a <code>.c</code> \u6587\u4ef6\u65f6\uff0c\u5b83\u4f1a\u4e00\u884c\u4e00\u884c\u7684\u5904\u7406\u6e90\u4ee3\u7801\uff0c\u5e76\u7ef4\u62a4\u4e00\u4e2a\u7b26\u53f7\u8868\uff0c\u8868\u793a\u5f53\u524d\u6587\u4ef6\u4e2d\uff0c\u5230 \u76ee\u524d\u4e3a\u6b62 \u6240\u6709\u89c1\u8fc7\u7684\u7b26\u53f7\u3002\u5f53\u7f16\u8bd1\u5668\u9047\u5230\u5bf9\u4e00\u4e2a\u7b26\u53f7\u7684\u5f15\u7528\uff08\u53d8\u91cf\u5f15\u7528\u3001\u51fd\u6570\u8c03\u7528\uff09\u65f6\uff0c\u5b83\u4f1a\u67e5\u627e\u8fd9\u4e2a\u7b26\u53f7\u8868\uff1b\u5f53\u7f16\u8bd1\u5668\u9047\u5230\u4e00\u4e2a\u7b26\u53f7\u7684\u58f0\u660e\u6216\u5b9a\u4e49\u65f6\uff0c\u5b83\u4f1a\u5411\u7b26\u53f7\u8868\u4e2d\u4fdd\u5b58\u8fd9\u4e2a\u7b26\u53f7\u7684\u4fe1\u606f\u3002</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u8981\u4fdd\u8bc1\uff0c\u5728\u5f15\u7528\u4e00\u4e2a\u7b26\u53f7\u65f6\uff0c\u5b83\u8d77\u7801\u88ab\u58f0\u660e\u8fc7\uff0c\u5373\u88ab\u7f16\u8bd1\u5668\u770b\u5230\u8fc7\u3002\u540c\u65f6\uff0c\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u5b9a\u4e49\u4e5f\u662f\u4e00\u79cd\u58f0\u660e\u3002</p> <p>\u5bf9\u4e8e\u7f16\u8bd1\u5668\u800c\u8a00\uff0c\u5982\u679c\u8be5 <code>.c</code> \u6587\u4ef6\u9700\u8981\u5f15\u7528\u5176\u5b83 <code>.c</code> \u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u6216\u8005\u53d8\u91cf\uff0c\u5219\u9700\u8981\u63d0\u524d \u58f0\u660e \u5b83\u3002\u5f53\u7f16\u8bd1\u5668\u9047\u5230\u4e86\u58f0\u660e (Declaration) \u8fc7\u4f46\u662f\u6ca1\u6709\u5728\u5f53\u524d\u6587\u4ef6\u4e2d\u88ab\u5b9a\u4e49 (Definition) \u8fc7\u7684\u7b26\u53f7\u65f6 (\u5982 printf)\uff0c\u7f16\u8bd1\u5668\u4f1a\u5047\u5b9a\u8be5\u7b26\u53f7\u4f1a\u5728\u5176\u4ed6 object \u6587\u4ef6\u4e2d\u88ab\u5b9a\u4e49\uff0c\u7559\u4e0b\u4e00\u4e9b\u4fe1\u606f\u540e\u4ea4\u7ed9\u94fe\u63a5\u5668\u5728\u94fe\u63a5\u9636\u6bb5\u5bfb\u627e\u8fd9\u4e2a\u7b26\u53f7\u3002</p> <p>\u4f8b\u5982\uff0c<code>a.c</code> \u5b9a\u4e49 \u4e86\u53d8\u91cf <code>int a</code>\u3002\u5982\u679c <code>main.c</code> \u60f3\u8981\u5f15\u7528\u5b83\uff0c\u5219\u9700\u8981\u4f7f\u7528 <code>extern int a</code> \u6765 \u58f0\u660e \u5b83\u3002</p> <pre><code>// a.c\nint a;\n\n// main.c\nextern int a;\nint main() {\n    printf(\"%d\\n\", a);\n}\n</code></pre> <p>\u7f16\u8bd1\u65f6\uff0c\u6211\u4eec\u5148\u5206\u522b\u7f16\u8bd1 <code>a.c</code> \u548c <code>main.c</code> \u5230 <code>a.o</code> \u548c <code>main.o</code>\uff1a<code>gcc -c a.c -o a.o</code>\u3001<code>gcc -c main.c -o a.o</code>\uff0c\u7136\u540e\u94fe\u63a5\u4e24\u4e2a .o \u6587\u4ef6\uff1a<code>gcc main.o a.o</code> \u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 a.out\u3002</p> <p>\u7f16\u8bd1 <code>a.c</code> \u65f6\uff0c\u7f16\u8bd1\u5668\u751f\u6210\u7684 <code>a.o</code> \u4f1a\u8868\u793a\u5b83\u6709\u4e00\u4e2a\u5168\u5c40\u53ef\u89c1\u7684\u7b26\u53f7\uff0c\u53eb <code>a</code>\u3002 \u7f16\u8bd1 <code>main.c</code> \u65f6\uff0c\u7f16\u8bd1\u5668\u662f\u4e0d\u77e5\u9053\u4efb\u4f55\u5173\u4e8e\u5176\u4ed6 .c \u6587\u4ef6\u7684\u4fe1\u606f\u7684\u3002\u4f46\u662f\u6211\u4eec\u5728\u7b2c\u4e00\u884c\u58f0\u660e\u4e86\u53d8\u91cf <code>a</code>\uff0c\u6240\u4ee5\u5b83\u77e5\u9053\u6700\u7ec8\u94fe\u63a5\u7684\u65f6\u5019\u4f1a\u6709\u4e00\u4e2a\u7b26\u53f7\u53eb <code>a</code>\u3002\u7f16\u8bd1\u5668\u4ea7\u751f\u7684 <code>main.o</code> \u4e2d\u4f1a\u8868\u793a\u5b83\u9700\u8981\u4e00\u4e2a\u7b26\u53f7\uff0c\u53eb <code>a</code>\u3002</p> <p>\u94fe\u63a5\u5668\u4f1a\u67e5\u627e\u6240\u6709 <code>.o</code> \u6587\u4ef6\u7684\u7b26\u53f7\u8868\uff0c\u5e76\u6839\u636e\u540d\u5b57\u548c\u53ef\u89c1\u6027\u5339\u914d\u7b26\u53f7\u3002</p> <p>\u4e3a\u4e86\u7ec4\u7ec7\u5927\u578b\u9879\u76ee\uff0c\u6211\u4eec\u4e0d\u4f1a\u5728\u6bcf\u4e2a <code>.c</code> \u6587\u4ef6\u4e2d\u624b\u52a8\u5bfc\u5165\u5176\u5b83 <code>.c</code> \u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\uff0c\u800c\u662f\u4f1a\u4f7f\u7528\u5934\u6587\u4ef6\u6765\u58f0\u660e\u8fd9\u4e9b\u4f1a\u5728 <code>.c</code> \u4e2d\u5171\u4eab\u7684\u7b26\u53f7\u3002</p>"},{"location":"lab/lab2/#_6","title":"\u5934\u6587\u4ef6","text":"<p>\u5934\u6587\u4ef6\uff08Header File\uff09\u7684\u4f5c\u7528\u662f\u58f0\u660e\u51fd\u6570\u3001\u53d8\u91cf\u3001\u5b8f\u5b9a\u4e49\u3001\u5e38\u91cf\u3001\u7c7b\u578b\u7b49\u4fe1\u606f\uff0c \u4ee5\u4fbf\u5728\u591a\u4e2a\u6e90\u6587\u4ef6\u4e2d\u5171\u4eab\u3002\u6211\u4eec\u4f1a\u5728 <code>.c</code> \u7684\u5f00\u5934\u4f7f\u7528 <code>#include</code> \u5b8f\u5bfc\u5165\u5934\u6587\u4ef6\uff0c\u5b83\u7684\u8bed\u4e49\u662f\u5c06\u6587\u4ef6\u5185\u5bb9\u76f4\u63a5\u590d\u5236\u5230\u5f53\u524d\u6587\u4ef6\u4e2d\uff0c\u8fd9\u4e00\u6b65\u662f\u7531 preprocessor \u5b8c\u6210\u7684\u3002</p> <p>\u5982\u679c\u67d0\u4e2a <code>.c</code> \u6587\u4ef6\u4e2d\u6709\u4e9b\u7c7b\u578b\u3001\u51fd\u6570\u3001\u53d8\u91cf\u9700\u8981\u88ab\u5176\u4ed6 <code>.c</code> \u6587\u4ef6\u5f15\u7528\uff0c\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7684\u5934\u6587\u4ef6\u3002\u5728\u7ed9\u5934\u6587\u4ef6\u53d6\u540d\u4e0a\uff0c\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u540c\u6837\u7684\u6587\u4ef6\u540d\uff0c\u4f46\u662f\u4f7f\u7528 <code>.h</code> \u540e\u7f00\uff1b\u4f8b\u5982\uff0c\u5bf9\u4e8e <code>a.c</code> \u91cc\u9762\u9700\u8981\u5171\u4eab\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u5b83\u7684\u5934\u6587\u4ef6 <code>a.h</code>\u3002</p> <p>\u5bf9\u4e8e\u9700\u8981\u5171\u4eab\u7684\u51fd\u6570\u3001\u53d8\u91cf\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u5728 <code>a.h</code> \u4e2d \u58f0\u660e\uff0c\u5728 <code>a.c</code> \u4e2d \u5b9a\u4e49\uff1a</p> <pre><code>// a.h\nextern int a;\nint add(int x, int y);\n\n// a.c\nint a;\n// or int a = 10;\nint add (int x, int y) {\n    return x + y;\n}\n</code></pre> <p>\u5047\u5982 <code>main.c</code> \u9700\u8981\u5f15\u7528 <code>a.c</code> \u4e2d\u63d0\u4f9b\u7684 <code>a</code> \u53d8\u91cf\u6216\u8005 <code>add</code> \u51fd\u6570\uff0c\u5219\u53ef\u4ee5\u5728\u5176\u5f00\u5934\u5f15\u5165 <code>a.h</code> \u5934\u6587\u4ef6\uff1a</p> <pre><code>// main.c\n#include \"a.h\"\n\nint main() {\n    a = 666;\n    int b = 123;\n    int c = add(a, b);\n}\n</code></pre> <p>Note</p> <ul> <li> <p>\u5728\u4e00\u4e2a <code>.c</code> \u6587\u4ef6\u4e2d\u58f0\u660e\u4e14\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\u5176\u4ed6 <code>.c</code> \u6587\u4ef6\u662f\u65e0\u6cd5 \u76f4\u63a5 \u4f7f\u7528\u7684\u3002\u4f8b\u5982\u4f60\u5728\u4e00\u4e2a <code>.c</code> \u6587\u4ef6\u4e2d <code>int a;</code> \uff0c\u5219\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u9700\u8981 <code>extern int a;</code> \uff0c\u90a3\u4e48\u4e24\u4e2a\u6587\u4ef6\u624d\u662f\u5171\u4eab\u540c\u4e00\u4e2a <code>a</code> \u3002</p> </li> <li> <p>\u5728\u591a\u4e2a <code>.c</code> \u6587\u4ef6\u4e2d\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u8981\u786e\u4fdd\u53d8\u91cf\u540d\u662f\u552f\u4e00\u7684\u3002\u5426\u5219\u4f1a\u5bfc\u81f4\u591a\u91cd\u5b9a\u4e49\u3002</p> </li> <li> <p>\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5b9a\u4e49\u4e00\u4e9b\u4ec5\u5f53\u524d <code>.c</code> \u53ef\u89c1\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>static</code> \u5173\u952e\u5b57\u3002</p> </li> <li> <p><code>.h</code> \u6587\u4ef6\u4e2d\u4ec5\u80fd\u58f0\u660e\u53d8\u91cf\uff0c\u5982\u679c <code>.h</code> \u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf\u5e76\u4e14\u5b58\u5728\u4e24\u4e2a\u4ee5\u4e0a\u7684 <code>.c</code> \u6587\u4ef6 <code>#include</code> \u4e86\u8fd9\u4e2a <code>.h</code> \u6587\u4ef6\uff0c\u5219\u4e5f\u4f1a\u51fa\u73b0\u591a\u91cd\u5b9a\u4e49\uff0c\u56e0\u4e3a\u9884\u5904\u7406\u5668\u4f1a\u5c06\u88ab include \u7684\u5185\u5bb9\u76f4\u63a5\u590d\u5236\u5230\u5f53\u524d\u6587\u4ef6\u4e2d\uff0c\u8fd9\u6700\u7ec8\u4f1a\u5bfc\u81f4\u4e24\u4e2a <code>.c</code> \u90fd\u4f1a\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u8fdb\u884c\u5b9a\u4e49\u3002</p> </li> <li> <p>\u5982\u679c\u4f60\u5e0c\u671b\u4e00\u4e2a\u53d8\u91cf\u7531\u591a\u4e2a <code>.c</code> \u5171\u4eab\u4f7f\u7528\uff0c\u53ef\u4ee5\u5728 <code>.h</code> \u6587\u4ef6\u4e2d\u58f0\u660e\u8fd9\u4e2a\u53d8\u91cf\u5e76\u4e14\u4f7f\u7528 <code>extern</code> \u5173\u952e\u5b57\u8fdb\u884c\u4fee\u9970\uff0c\u5e76\u5728\u4efb\u4f55\u4e00\u4e2a <code>.c</code> \u4e2d\u5b9a\u4e49\u5b83\u3002</p> </li> </ul>"},{"location":"lab/lab2/#readelf-symbol-table","title":"readelf \u8bfb\u53d6 Symbol Table","text":"<p>\u6211\u4eec\u518d\u6b21\u89e3\u91ca\u4e00\u4e0b Declaration \u548c Definition \u7684\u533a\u522b\uff1a</p> <ul> <li> <p>Definition \u662f\u5411\u94fe\u63a5\u5668\u8868\u793a\uff0c\u8fd9\u4e2a .o \u6587\u4ef6\u91cc\u9762\u6709\u4e00\u4e2a\u7b26\u53f7\uff0c\u94fe\u63a5\u5668\u9700\u8981\u4e3a\u5b83\u5206\u914d\u5185\u5b58\u5730\u5740\u3002\u5982\u679c\u5176\u4ed6 .o \u9700\u8981\u5f15\u7528\u8fd9\u4e2a\u7b26\u53f7\uff0c\u5219\u8981\u5224\u65ad\u8fd9\u4e2a\u7b26\u53f7\u662f\u5426\u5141\u8bb8\u88ab\u5916\u90e8\u8bbf\u95ee\uff0c\u5373\u58f0\u660e\u65f6\u662f\u5426\u4f7f\u7528\u4e86 static\u3002</p> </li> <li> <p>Declaration \u662f\u5411\u7f16\u8bd1\u5668\u4fdd\u8bc1\uff0c\u8fd9\u4e2a\u7b26\u53f7\u4f1a\u5728\u94fe\u63a5\u65f6\u88ab\u627e\u5230\uff0c\u4e0d\u8bba\u662f\u5f53\u524d <code>.c</code> \u6216\u5176\u4ed6 <code>.c</code> \u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u3002\u7f16\u8bd1\u5668\u53ea\u8981\u6839\u636e\u58f0\u660e\u7684\u53d8\u91cf\u7c7b\u578b\u6216\u51fd\u6570\u539f\u578b\u8fdb\u884c\u4ee3\u7801\u751f\u6210\uff08\u5982\u53d8\u91cf\u8bbf\u5b58\u65f6\u7684\u5bbd\u5ea6 (lb, lw, ld)\uff0c\u51fd\u6570\u7684\u53c2\u6570\u4e2a\u6570\uff09\uff0c\u94fe\u63a5\u5668\u4f1a\u8d1f\u8d23\u53bb\u627e\u5230\u8fd9\u4e9b\u7b26\u53f7\u3002</p> </li> </ul> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 <code>llvm-readelf-19 --symbol &lt;file&gt;</code> \u67e5\u770b\u4e00\u4e2a ELF \u6587\u4ef6\u7684\u7b26\u53f7\u8868\uff0c\u91cc\u9762\u5b57\u6bb5\u7684\u610f\u4e49\u53ef\u4ee5\u53c2\u7167 https://docs.oracle.com/cd/E19455-01/816-0559/chapter6-79797/index.html</p> <pre><code>$ llvm-readelf-19 --symbols build/os/proc.o | grep -E \"FUNC|OBJECT|GLOBAL\"\nSymbol table '.symtab' contains 1240 entries:\n   Num:    Value          Size Type    Bind   Vis       Ndx Name\n     5: 0000000000000000    72 FUNC    LOCAL  DEFAULT     1 curr_proc\n    23: 0000000000000048   304 FUNC    LOCAL  DEFAULT     1 freeproc\n    97: 0000000000000178    92 FUNC    LOCAL  DEFAULT     1 first_sched_ret\n   128: 0000000000000000     4 OBJECT  LOCAL  DEFAULT     6 proc_inited.1\n   237: 0000000000000000     4 OBJECT  LOCAL  DEFAULT     7 PID.0\n   663: 0000000000000000    32 OBJECT  LOCAL  DEFAULT     4 pid_lock\n   664: 0000000000000020    32 OBJECT  LOCAL  DEFAULT     4 wait_lock\n   665: 0000000000000040   104 OBJECT  LOCAL  DEFAULT     4 proc_allocator\n  1201: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND push_off\n  1202: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND mycpu\n  1203: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND pop_off\n  1210: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND usertrapret\n  1211: 00000000000001d4   544 FUNC    GLOBAL DEFAULT     1 proc_init\n  1212: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND spinlock_init\n  1213: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND allocator_init\n  1214: 00000000000000a8  4096 OBJECT  GLOBAL DEFAULT     4 pool\n  1215: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND kernel_pagetable\n  1216: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND kallocpage\n  1217: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND kalloc\n  1218: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND memset\n  1219: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND kvmmap\n</code></pre> <p>Type \u5217\u8868\u793a\u8be5\u7b26\u53f7\u662f\u51fd\u6570 (FUNC) \u8fd8\u662f\u53d8\u91cf (OBJECT), Bind \u8868\u793a\u8fd9\u4e2a\u7b26\u53f7\u662f\u5426\u5141\u8bb8\u5176\u4ed6 .o \u627e\u5230 (LOCAL/GLOBAL)\u3002Ndx \u8868\u793a\u8fd9\u4e2a\u7b26\u53f7\u662f\u5426\u5b9a\u4e49\u5728\u8fd9\u4e2a .o \u91cc\u9762\uff0c<code>UND</code> \u8868\u793a\u5b83\u662f\u5916\u90e8\u7684 <code>.o</code>\uff0c\u5373\u9700\u8981\u4ece\u5176\u4ed6 .o \u5bfc\u5165\u7684\u7b26\u53f7\uff0c\u6240\u4ee5\u5b83\u7684 Type \u548c Size \u90fd\u662f\u672a\u77e5\u7684\u3002</p> <p>\u73b0\u5728\uff0c\u4f60\u662f\u5426\u7406\u89e3\u4e86\u94fe\u63a5\u4e2d\u5e38\u51fa\u73b0\u7684\u4e24\u79cd\u9519\u8bef\uff1amultiple definition \u548c undefined reference \u7684\u539f\u56e0\uff1f</p> <ul> <li><code>riscv64-unknown-elf-ld: build/os/proc.o:os/proc.c:14: multiple definition of 'idle'; build/os/main.o:os/main.c:7: first defined here</code><ul> <li>\u5728\u4e0d\u540c\u7684 .c \u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u591a\u6b21 <code>idle</code> \u53d8\u91cf\u3002</li> </ul> </li> <li><code>riscv64-unknown-elf-ld: build/os/proc.o: in function 'proc_init': os/proc.c:38:(.text+0xd0): undefined reference to 'idle'</code><ul> <li>\u5728\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u4e86 <code>idle</code> \u53d8\u91cf\uff0c\u4f46\u662f\u6ca1\u6709\u5b9a\u4e49\u5b83\u3002</li> </ul> </li> </ul>"},{"location":"lab/lab2/#make-makefile","title":"Make \u548c Makefile\u4ecb\u7ecd","text":"<p>\u8003\u8651\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u7684\u5de5\u7a0b\u7a0d\u5fae\u5927\u4e00\u70b9\uff08\u6bd4\u5982\u5305\u542b\u591a\u4e2aC\u8bed\u8a00\u6587\u4ef6\uff09\uff0c\u6bcf\u6b21\u8fd0\u884c\u4e00\u6b21\u6211\u4eec\u90fd\u8981\u6267\u884c\u5f88\u591a\u6b21gcc\u547d\u4ee4\uff0c\u662f\u5426\u6709\u4e00\u79cd\u7f16\u8bd1\u5de5\u5177\u53ef\u4ee5\u7b80\u5316\u8fd9\u4e2a\u8fc7\u7a0b\u5462\uff1f\u63a5\u4e0b\u6765\u6211\u4eec\u4ecb\u7ecd\u81ea\u52a8\u5316\u7f16\u8bd1\u5de5\u5177make\u3002</p> <p><code>Makefile</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u81ea\u52a8\u5316\u6784\u5efa\uff08\u7f16\u8bd1\u3001\u94fe\u63a5\u7b49\uff09\u7a0b\u5e8f\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u901a\u5e38\u7528\u4e8e\u7ba1\u7406\u5305\u542b\u591a\u4e2a\u6e90\u6587\u4ef6\u7684\u9879\u76ee\u3002\u5b83\u5b9a\u4e49\u4e86\u5982\u4f55\u4ece\u6e90\u4ee3\u7801\u751f\u6210\u76ee\u6807\u6587\u4ef6\uff08\u5982\u53ef\u6267\u884c\u6587\u4ef6\u3001\u5e93\u6587\u4ef6\u7b49\uff09\uff0c\u5e76\u786e\u4fdd\u53ea\u91cd\u65b0\u7f16\u8bd1\u90a3\u4e9b\u9700\u8981\u66f4\u65b0\u7684\u90e8\u5206\uff0c\u4ece\u800c\u63d0\u9ad8\u6784\u5efa\u6548\u7387\u3002</p> <p><code>Makefile</code> \u662f <code>make</code> \u5de5\u5177\u7684\u8f93\u5165\u6587\u4ef6\uff0c<code>make</code> \u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u6784\u5efa\u5de5\u5177\uff0c\u5e7f\u6cdb\u7528\u4e8e Unix/Linux \u7cfb\u7edf\u3002</p> \u5b9e\u9a8c\u6b65\u9aa42\uff1a\u4f7f\u7528makefile\u8fdb\u884c\u81ea\u52a8\u5316\u6784\u5efa <p>\u9996\u5148\u6211\u4eec\u521b\u5efa\u4e09\u4e2a\u6587\u4ef6</p> <pre><code>//print.h \u5934\u6587\u4ef6\n#include &lt;stdio.h&gt;\nvoid print(void);\n\n//print.c\n#include \"print.h\"\nvoid print(){\n    printf(\"Hello, World!\\n\");\n}\n\n//main.c\n#include \"print.h\"\nint main(){\n    print();\n    return 0;\n}\n</code></pre> <p>\u56e0\u4e3a\u6587\u4ef6\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u6bcf\u4e2a.c\u6587\u4ef6\u751f\u6210.o\u76ee\u6807\u6587\u4ef6\uff0c\u7136\u540e\u628a\u4e24\u4e2a.o\u6587\u4ef6\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff1a</p> <pre><code>gcc -c main.c\ngcc -c print.c\ngcc -o main main.o print.o\n\n./main\n</code></pre> <p></p> <p></p> <p>\u7531\u6b64\u53ef\u89c1\uff0c\u5982\u679c\u6211\u4eec\u7684\u6587\u4ef6\u6570\u91cf\u5f88\u591a\uff0c\u6bcf\u6b21\u8fd0\u884c\u5c31\u4f1a\u53d8\u5f97\u5341\u5206\u7684\u590d\u6742\u3002\u4e3a\u4e86\u4f7f\u6574\u4e2a\u7f16\u8bd1\u8fc7\u7a0b\u66f4\u52a0\u5bb9\u6613\uff0c\u53ef\u4ee5\u4f7f\u7528Makefile\u3002</p> <p>\u63a5\u7740\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u5e76\u547d\u540d\u4e3aMakefile\u3002</p> <p>Makefile\u6587\u4ef6\u5185\u5bb9\uff1a</p> <pre><code>main : main.o print.o\n    gcc -o main main.o print.o\nmain.o : main.c print.h\n    gcc -c main.c\nprint.o : print.c print.h\n    gcc -c print.c\nclean:\n    rm main main.o print.o\n</code></pre> <p>Warning</p> <p>Makefile\u4e2d\u7684\u7f29\u8fdb\u53ea\u80fd\u662ftab\uff0c\u4e0d\u80fd\u662f\u82e5\u5e72\u7a7a\u683c\uff0c\u5426\u5219\u65e0\u6cd5\u6267\u884c\u3002</p> <p>\u6700\u540e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6267\u884c\u4e00\u53e5make\u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u5b8c\u6210\u6574\u4e2a\u7f16\u8bd1\u8fc7\u7a0b\uff1a</p> <p></p>"},{"location":"lab/lab2/#makefile","title":"Makefile\u7684\u57fa\u672c\u7ed3\u6784","text":"<pre><code>target: dependencies\n[tab] system command\n</code></pre>"},{"location":"lab/lab2/#makefile_1","title":"Makefile\u5de5\u4f5c\u539f\u7406","text":"<p>\u5728\u9ed8\u8ba4\u7684\u65b9\u5f0f\u4e0b\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u53ea\u8f93\u5165 <code>make</code> \u547d\u4ee4\u3002\u90a3\u4e48\uff0c</p> <ol> <li>make\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u627e\u540d\u5b57\u53eb\u201cMakefile\u201d\u6216\u201cmakefile\u201d\u7684\u6587\u4ef6\u3002</li> <li>\u5982\u679c\u627e\u5230\uff0c\u5b83\u4f1a\u627e\u6587\u4ef6\u4e2d\u7684\u7b2c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\uff08target\uff09\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4ed6\u4f1a\u627e\u5230\u201cmain\u201d\u8fd9\u4e2a\u6587\u4ef6\uff0c\u5e76\u628a\u8fd9\u4e2a\u6587\u4ef6\u4f5c\u4e3a\u6700\u7ec8\u7684\u76ee\u6807\u6587\u4ef6\u3002</li> <li>\u5982\u679cmain\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u6216\u662fmain\u6240\u4f9d\u8d56\u7684\u540e\u9762\u7684 <code>.o</code> \u6587\u4ef6\u7684\u6587\u4ef6\u4fee\u6539\u65f6\u95f4\u8981\u6bd4 <code>main</code> \u8fd9\u4e2a\u6587\u4ef6\u65b0\uff0c\u90a3\u4e48\uff0c\u4ed6\u5c31\u4f1a\u6267\u884c\u540e\u9762\u6240\u5b9a\u4e49\u7684\u547d\u4ee4\u6765\u751f\u6210 <code>main</code> \u8fd9\u4e2a\u6587\u4ef6\u3002</li> <li>\u5982\u679c <code>main</code> \u6240\u4f9d\u8d56\u7684 <code>.o</code> \u6587\u4ef6\u4e5f\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48make\u4f1a\u5728\u5f53\u524d\u6587\u4ef6\u4e2d\u627e\u76ee\u6807\u4e3a <code>.o</code> \u6587\u4ef6\u7684\u4f9d\u8d56\u6027\uff0c\u5982\u679c\u627e\u5230\u5219\u518d\u6839\u636e\u90a3\u4e00\u4e2a\u89c4\u5219\u751f\u6210 <code>.o</code> \u6587\u4ef6\u3002\uff08\u8fd9\u6709\u70b9\u50cf\u4e00\u4e2a\u5806\u6808\u7684\u8fc7\u7a0b\uff09</li> <li>\u5f53\u7136\uff0c\u4f60\u7684C\u6587\u4ef6\u548cH\u6587\u4ef6\u662f\u5b58\u5728\u7684\u5566\uff0c\u4e8e\u662fmake\u4f1a\u751f\u6210 <code>.o</code> \u6587\u4ef6\uff0c\u7136\u540e\u518d\u7528 <code>.o</code> \u6587\u4ef6\u751f\u6210make\u7684\u7ec8\u6781\u4efb\u52a1\uff0c\u4e5f\u5c31\u662f\u6267\u884c\u6587\u4ef6 <code>main</code> \u4e86\u3002</li> </ol>"},{"location":"lab/lab2/#make-clean","title":"make clean","text":"<p>\u901a\u8fc7\u4e0a\u8ff0\u5206\u6790\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u50cfclean\u8fd9\u79cd\uff0c\u6ca1\u6709\u88ab\u7b2c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u76f4\u63a5\u6216\u95f4\u63a5\u5173\u8054\uff0c\u90a3\u4e48\u5b83\u540e\u9762\u6240\u5b9a\u4e49\u7684\u547d\u4ee4\u5c06\u4e0d\u4f1a\u88ab\u81ea\u52a8\u6267\u884c\uff0c\u4e0d\u8fc7\uff0c\u6211\u4eec\u53ef\u4ee5\u663e\u5f0f\u8981make\u6267\u884c\u3002\u5373\u547d\u4ee4\u2014\u2014 <code>make clean</code> \uff0c\u4ee5\u6b64\u6765\u6e05\u9664\u6240\u6709\u7684\u76ee\u6807\u6587\u4ef6\uff0c\u4ee5\u4fbf\u91cd\u65b0\u7f16\u8bd1\u3002</p> <p>\u53c2\u8003\u53ca\u66f4\u591a\u5173\u4e8eMakefile\u7684\u77e5\u8bc6\u8bf7\u67e5\u770b\uff1a\uff08\u8ddf\u6211\u4e00\u8d77\u5199Makefile 1.0 \u6587\u6863 \uff09</p>"},{"location":"lab/linuxlab-fork/","title":"fork","text":"<p>fork &amp; exec &amp; wait</p> <p>argv, env</p> <p>how to check fork duplicate memory &amp; file?</p> <p>process tree, parent process, how does wait work</p> <p>reparent</p>"},{"location":"lab/xv6lab-baremetal/","title":"\u88f8\u673a\u7a0b\u5e8f - Bare Metal","text":"<p>\u5f53\u6211\u4eec\u5728\u4e3a Linux \u73af\u5883\u7f16\u7a0b\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u53ea\u9700\u8981\u8003\u8651\u7a0b\u5e8f\u7684\u903b\u8f91\u3001\u5e76\u4f7f\u7528\u548c libc \u51fd\u6570\u548c\u5176\u5c01\u88c5\u7684\u7cfb\u7edf\u8c03\u7528\u5b8c\u6210\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u548c\u7528\u6237\u7684\u4ea4\u4e92\uff1b\u4f8b\u5982\u4f7f\u7528 printf \u548c scanf \u5728\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u6d41\u4e0a\u8fdb\u884c\u64cd\u4f5c\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u7684\u7528\u6237\u6001\u8fd0\u884c\u73af\u5883\u662f\u7531 libc \u63d0\u4f9b\u7684\uff0c\u800c\u5185\u6838\u73af\u5883\u662f\u7531 Linux Kernel \u63d0\u4f9b\u7684\u3002</p> <p>\u5f53\u6211\u4eec\u5728\u5199\u81ea\u5df1\u7684\u64cd\u4f5c\u7cfb\u7edf\u65f6\uff0c\u6211\u4eec\u5e76\u6ca1\u6709 Linux \u6216\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u8fd0\u884c\u73af\u5883\uff0c\u800c\u662f\u76f4\u63a5\u4e0e CPU \u548c\u786c\u4ef6\u4ea4\u4e92\uff0c\u8fd9\u79cd\u7a0b\u5e8f\u88ab\u79f0\u4e3a\u88f8\u673a\u7a0b\u5e8f (bare-metal program)\u3002</p> <p>\u4ec0\u4e48\u662f\u88f8\u673a\u7a0b\u5e8f</p> <p>A bare-metal program is a type of software that runs directly on the hardware of a device without relying on an underlying operating system (OS). Essentially, it's code that interacts with the hardware at the most fundamental level, controlling the processor, memory, input/output (I/O) devices, and other components directly.</p> <p>\u5728\u6211\u4eec\u7684 xv6 \u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5728 RISC-V \u4f53\u7cfb\u67b6\u6784\u4e0a\u7f16\u5199\u64cd\u4f5c\u7cfb\u7edf\u7a0b\u5e8f\u3002</p>"},{"location":"lab/xv6lab-baremetal/#_1","title":"\u8fd0\u884c\u7b2c\u4e00\u4e2a\u88f8\u673a\u7a0b\u5e8f","text":"<p>xv6-lab1 \u4ee3\u7801</p> <p>https://github.com/yuk1i/SUSTech-OS-2025/tree/xv6-lab1</p> <p>\u5728 git clone \u4e0a\u8ff0\u4ee3\u7801\u4ed3\u5e93\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u8fd0\u884c <code>make</code> \u6765\u7f16\u8bd1 xv6 \u5185\u6838\uff1a</p> <p>\u5728 <code>make</code> \u7f16\u8bd1\u5185\u6838\u6210\u529f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>make run</code> \u8c03\u7528 qemu \u6765\u8fd0\u884c\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a xv6 \u64cd\u4f5c\u7cfb\u7edf\u3002</p> <p><code>make run</code> \u4f1a\u8c03\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a<code>qemu-system-riscv64 -nographic -machine virt -cpu rv64 -m 512 -kernel build/kernel</code>\uff0c\u8fd9\u8868\u793a\uff1a</p> <ul> <li>\u4f7f\u7528 <code>qemu-system-riscv64</code> \u6a21\u62df\u4e00\u4e2a RISC-V 64\u4f4d CPU</li> <li><code>-nographic</code>\uff1a\u7981\u7528\u56fe\u5f62\u8f93\u51fa</li> <li><code>-machine virt</code>\uff1a\u4f7f\u7528 <code>virt</code> \u673a\u5668\u6a21\u578b</li> <li><code>-cpu rv64</code>\uff1a\u4f7f\u7528 riscv64 \u4f4d CPU</li> <li><code>-m 512</code>\uff1a\u6307\u5b9a\u5185\u5b58\u5927\u5c0f 512MiB</li> <li><code>-kernel build/kernel</code>\uff1a\u6307\u5b9a\u52a0\u8f7d\u7684\u5185\u6838\u6587\u4ef6\u4e3a build/kernel</li> </ul> <pre><code>$ make run\nqemu-system-riscv64 -nographic -machine virt -cpu rv64 -m 512 -kernel build/kernel \n\nOpenSBI v1.5\n   ____                    _____ ____ _____\n  / __ \\                  / ____|  _ \\_   _|\n | |  | |_ __   ___ _ __ | (___ | |_) || |\n | |  | | '_ \\ / _ \\ '_ \\ \\___ \\|  _ &lt; | |\n | |__| | |_) |  __/ | | |____) | |_) || |_\n  \\____/| .__/ \\___|_| |_|_____/|____/_____|\n        | |\n        |_|\n\nPlatform Name             : riscv-virtio,qemu\nPlatform Features         : medeleg\nPlatform HART Count       : 1\nPlatform IPI Device       : aclint-mswi\nPlatform Timer Device     : aclint-mtimer @ 10000000Hz\nPlatform Console Device   : uart8250\nPlatform HSM Device       : ---\nPlatform PMU Device       : ---\nPlatform Reboot Device    : syscon-reboot\nPlatform Shutdown Device  : syscon-poweroff\nPlatform Suspend Device   : ---\nPlatform CPPC Device      : ---\nFirmware Base             : 0x80000000\nFirmware Size             : 327 KB\nFirmware RW Offset        : 0x40000\nFirmware RW Size          : 71 KB\nFirmware Heap Offset      : 0x49000\nFirmware Heap Size        : 35 KB (total), 2 KB (reserved), 11 KB (used), 21 KB (free)\nFirmware Scratch Size     : 4096 B (total), 416 B (used), 3680 B (free)\nRuntime SBI Version       : 2.0\n\nDomain0 Name              : root\nDomain0 Boot HART         : 0\nDomain0 HARTs             : 0*\nDomain0 Region00          : 0x0000000000100000-0x0000000000100fff M: (I,R,W) S/U: (R,W)\nDomain0 Region01          : 0x0000000010000000-0x0000000010000fff M: (I,R,W) S/U: (R,W)\nDomain0 Region02          : 0x0000000002000000-0x000000000200ffff M: (I,R,W) S/U: ()\nDomain0 Region03          : 0x0000000080040000-0x000000008005ffff M: (R,W) S/U: ()\nDomain0 Region04          : 0x0000000080000000-0x000000008003ffff M: (R,X) S/U: ()\nDomain0 Region05          : 0x000000000c400000-0x000000000c5fffff M: (I,R,W) S/U: (R,W)\nDomain0 Region06          : 0x000000000c000000-0x000000000c3fffff M: (I,R,W) S/U: (R,W)\nDomain0 Region07          : 0x0000000000000000-0xffffffffffffffff M: () S/U: (R,W,X)\nDomain0 Next Address      : 0x0000000080200000\nDomain0 Next Arg1         : 0x000000009fe00000\nDomain0 Next Mode         : S-mode\nDomain0 SysReset          : yes\nDomain0 SysSuspend        : yes\n\nBoot HART ID              : 0\nBoot HART Domain          : root\nBoot HART Priv Version    : v1.12\nBoot HART Base ISA        : rv64imafdch\nBoot HART ISA Extensions  : sstc,zicntr,zihpm,zicboz,zicbom,sdtrig\nBoot HART PMP Count       : 16\nBoot HART PMP Granularity : 2 bits\nBoot HART PMP Address Bits: 54\nBoot HART MHPM Info       : 16 (0x0007fff8)\nBoot HART Debug Triggers  : 2 triggers\nBoot HART MIDELEG         : 0x0000000000001666\nBoot HART MEDELEG         : 0x0000000000f0b509\n\nclean bss: 0x0000000080207000 - 0x0000000080207000\nKernel booted.\nHello World!\nsysregs:\nsstatus : 0x8000000200006000\nscause  : 0x0000000000000000\nsepc    : 0x0000000000000000\nstval   : 0x0000000000000000\nsip     : 0x0000000000000000\nsie     : 0x0000000000000000\nsatp    : 0x0000000000000000\n0x00000000deadbeef\nkernel ends, parking...\n</code></pre>"},{"location":"lab/xv6lab-baremetal/#privilege-level","title":"\u7279\u6743\u7ea7 (Privilege Level)","text":"<p>Privilege Levels (riscv-privileged.pdf)</p> <p>\u7279\u6743\u7ea7\uff08Privilege Level\uff09\u662f\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u7528\u4e8e\u5b9a\u4e49\u4e0d\u540c\u8fdb\u7a0b\u6216\u7528\u6237\u5728\u7cfb\u7edf\u4e2d\u6240\u62e5\u6709\u7684\u8bbf\u95ee\u63a7\u5236\u548c\u6743\u9650\u7684\u6982\u5ff5\u3002 \u7279\u6743\u7ea7\u7684\u5b58\u5728\u662f\u4e3a\u4e86\u4fdd\u62a4\u7cfb\u7edf\u8d44\u6e90\u3001\u786e\u4fdd\u5b89\u5168\u6027\uff0c\u5e76\u6839\u636e\u53ef\u4fe1\u5ea6\u548c\u529f\u80fd\u5bf9\u8fdb\u7a0b\u8fdb\u884c\u9694\u79bb\u3002</p> <p>At any time, a RISC-V hardware thread (hart) is running at some privilege level encoded as a mode in one or more CSRs (control and status registers). </p> <p>Three RISC-V privilege levels are currently defined as shown in Table 1.1. </p> <p>Privilege levels are used to provide protection between different components of the software stack, and attempts to perform operations not permitted by the current privilege mode will cause an exception to be raised. </p> <p>These exceptions will normally cause traps into an underlying execution environment.</p> <p>\u7279\u6743\u7ea7\u662f CPU \u8fd0\u884c\u65f6\u7684\u4e00\u4e2a\u91cd\u8981\u7684\u72b6\u6001\uff0c\u5b83\u8868\u793a\u4e86\u5f53\u524d\u8fd0\u884c\u7684\u4ee3\u7801\u5177\u6709\u6709\u591a\u9ad8\u7684\u7279\u6743\u3002\u6700\u9ad8\u7279\u6743\u7684\u4ee3\u7801\u5141\u8bb8\u65e0\u9650\u5236\u7684\u8bbf\u95ee\u6240\u6709\u8d44\u6e90\uff0c\u4f8b\u5982\u6240\u6709\u7269\u7406\u5185\u5b58\u548c\u6240\u6709\u5916\u8bbe\uff1b\u800c\u9ad8\u7279\u6743\u53ef\u4ee5\u9650\u5236\u4f4e\u7279\u6743\u7684\u4ee3\u7801\u6240\u80fd\u8bbf\u95ee\u7684\u5185\u5bb9\u3002\u4f8b\u5982\uff0c\u4f4e\u7279\u6743\u72b6\u6001\u4e0d\u5141\u8bb8\u8bbf\u95ee\u9ad8\u7279\u6743\u6240\u62e5\u6709\u7684\u5185\u5b58\u548c CSR \u5bc4\u5b58\u5668\uff1b\u4f46\u662f CPU \u8fd0\u884c\u5728\u4f4e\u7279\u6743\u7ea7\u65f6\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u4e3b\u52a8\u6216\u88ab\u52a8\u5730\u5207\u6362\u81f3\u9ad8\u7279\u6743\u7ea7\u5e76\u6267\u884c\u9884\u5b9a\u7684\u4ee3\u7801\u3002</p> <p>\u4e3a\u4ec0\u4e48\u9700\u8981\u7279\u6743\u7ea7</p> <p>CPU\u8bbe\u8ba1\u4e2d\u5f15\u5165\u7279\u6743\u7ea7\uff08Privilege Levels\uff09\u7684\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u786e\u4fdd\u7cfb\u7edf\u7684\u5b89\u5168\u6027\u548c\u7a33\u5b9a\u6027\uff0c\u7279\u522b\u662f\u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u5bf9\u786c\u4ef6\u8d44\u6e90\u8fdb\u884c\u4e25\u683c\u7684\u7ba1\u7406\u548c\u63a7\u5236\u3002\u7279\u6743\u7ea7\u7684\u5f15\u5165\u53ef\u4ee5\u5e2e\u52a9\u64cd\u4f5c\u7cfb\u7edf\u4fdd\u62a4\u5185\u6838\uff08Kernel\uff09\u548c\u7528\u6237\u7a0b\u5e8f\u4e4b\u95f4\u7684\u9694\u79bb\uff0c\u9632\u6b62\u4e0d\u53d7\u4fe1\u4efb\u7684\u4ee3\u7801\u6216\u5e94\u7528\u7a0b\u5e8f\u5bf9\u7cfb\u7edf\u7684\u5173\u952e\u90e8\u5206\u8fdb\u884c\u4e0d\u5f53\u64cd\u4f5c\u3002</p> <p>\u4f8b\u5982\uff0cCPU \u65f6\u95f4\u662f\u4e00\u79cd\u91cd\u8981\u7684\u201c\u786c\u4ef6\u8d44\u6e90\u201d\u3002\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u901a\u8fc7\u8ba9\u591a\u4e2a\u7528\u6237\u7a0b\u5e8f\u8f6e\u6d41\u6267\u884c\u7684\u65b9\u5f0f\uff0c\u5b9e\u73b0\u6240\u6709\u7a0b\u5e8f\u201c\u770b\u8d77\u6765\u201d\u5728\u540c\u65f6\u6267\u884c\u7684\u5047\u8c61\u3002\u6211\u4eec\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\uff08\u9ad8\u7279\u6743\u7ea7\uff09\u6765\u5b9e\u73b0\u5bf9 CPU \u65f6\u95f4\u7684\u7ba1\u7406\uff0c\u5373\u5f3a\u5236\u8ba9\u5e94\u7528\u7a0b\u5e8f\u5728\u6267\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\u6682\u505c\u6267\u884c\uff0c\u5e76\u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c\u3002</p> <p>\u5982\u679c\u6211\u4eec\u4e0d\u4f7f\u7528\u7279\u6743\u7ea7\u6765\u5f3a\u5236\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u800c\u662f\u671f\u671b\u5e94\u7528\u7a0b\u5e8f\u4e3b\u52a8\u5730\u8ba9\u51fa CPU \u65f6\u95f4\uff0c\u90a3\u4e48\u6076\u610f\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4e00\u76f4\u5360\u7528 CPU \u65f6\u95f4\u800c\u4e0d\u91ca\u653e\uff0c\u5bfc\u81f4\u7cfb\u7edf\u4e0a\u6240\u6709\u5e94\u7528\u7a0b\u5e8f\u5747\u65e0\u54cd\u5e94\u3002</p> <p>\u7279\u6743\u7ea7\u7684\u533a\u5206\u662f\u5728 CPU \u786c\u4ef6\u7535\u8def\u4e0a\u5b9e\u73b0\u7684\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u8f6f\u4ef6\u6a21\u62df\u7684\u3002\u5728 RISC-V \u4e0a\uff0c\u7279\u6743\u7ea7\u4f7f\u7528 2bit \u8fdb\u884c\u533a\u5206\uff0c\u5206\u4e3a M mode\uff0cS mode\uff0c\u548c U mode\u3002</p> <p></p> <p>The machine level has the highest privileges and is the only mandatory privilege level for a RISC-V hardware platform. Code run in machine-mode (M-mode) is usually inherently trusted, as it has low-level access to the machine implementation. M-mode can be used to manage secure execution environments on RISC-V. User-mode (U-mode) and supervisor-mode (S-mode) are intended for conventional application and operating system usage respectively.</p> <p>M mode \u4e3a RISC-V \u67b6\u6784\u4e2d\u7684\u6700\u9ad8\u7279\u6743\uff0c\u4e00\u822c\u8fd0\u884c OpenSBI \u56fa\u4ef6\u7a0b\u5e8f\uff0c\u62e5\u6709\u5bf9\u7269\u7406\u5185\u5b58\u7684\u76f4\u63a5\u8bbf\u95ee\uff1bS mode \u662f\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u8bbe\u8ba1\u7684\u7279\u9009\u7b49\u7ea7\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u865a\u62df\u5185\u5b58\uff1bU mode \u662f\u4e3a\u7528\u6237\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u7279\u6743\u7b49\u7ea7\uff0c\u62e5\u6709\u6700\u5c0f\u7684\u7279\u6743\uff0c\u4e5f\u9002\u7528\u4e8e\u865a\u62df\u5185\u5b58\u3002</p> <p>\u5728\u88f8\u673a\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5b8c\u6210\u5bf9 CPU \u72b6\u6001\u7684\u521d\u59cb\u5316\uff0c\u5305\u62ec\u4e86\u9875\u8868\u3001\u4e2d\u65ad\u7b49\u57fa\u672c\u529f\u80fd\u3002 \u8fd9\u4e9b CPU \u7684\u72b6\u6001\u662f\u901a\u8fc7 CSR (Control and Status Registers) \u63a7\u5236\u7684\uff0c\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4e00\u822c\u53ea\u5141\u8bb8\u9ad8\u7279\u6743\u7ea7\u7684\u7528\u6237\u8fdb\u884c\u8bbf\u95ee\u548c\u4fee\u6539\u3002</p>"},{"location":"lab/xv6lab-baremetal/#aarch64-x86","title":"AArch64 &amp; x86","text":"<p>\u73b0\u4ee3\u7684\u6307\u4ee4\u96c6\u67b6\u6784\u5747\u6709\u8bbe\u7f6e\u4e0d\u540c\u7684\u7279\u6743\u7ea7\u3002</p> <p>\u79fb\u52a8\u8bbe\u5907\u4e0a\u6700\u5e38\u4f7f\u7528\u7684 arm64 (AArch64) CPU \u67b6\u6784\u5b9a\u4e49\u4e86\u56db\u79cd\u7279\u6743\u7ea7(Exception Levels)\uff0c\u4ece\u4f4e\u5230\u9ad8\uff1a EL0\u3001EL1\u3001EL2\u548cEL3\u3002 \u4e0e RISC-V \u67b6\u6784\u7c7b\u4f3c\uff08\u5176\u5b9e\u662f RISC-V \u6284 AArch64 \u7684\uff09\uff0c\u6700\u9ad8\u7279\u6743\u7ea7 EL3 \u8fd0\u884c\u6700\u5e95\u5c42\u7684\u56fa\u4ef6(Secure Monitor)\uff0cEL1 \u7279\u6743\u7ea7\u8fd0\u884c\u64cd\u4f5c\u7cfb\u7edf(OS)\uff0cEL0 \u7279\u6743\u7ea7\u8fd0\u884c\u7528\u6237\u7a0b\u5e8f\uff0c\u800cEL2\u7279\u6743\u7ea7\u8fd0\u884c\u865a\u62df\u673a\u7a0b\u5e8f(Hypervisor)\u3002</p> <p>\u800c x86 (IA32 &amp; AMD64) \u67b6\u6784\u5b9a\u4e49\u7279\u6743\u7ea7\u4e3a\u56db\u4e2a Ring \uff1aRing 0 \u4ee3\u8868\u6700\u9ad8\u7279\u6743\u7ea7\uff0c\u8fd0\u884c\u64cd\u4f5c\u7cfb\u7edf\uff1b\u800c Ring 3 \u4ee3\u8868\u6700\u4f4e\u7279\u6743\u7ea7\uff0c\u8fd0\u884c\u7528\u6237\u7a0b\u5e8f\u3002\u901a\u5e38\u6765\u8bf4\uff0cx86\u67b6\u6784\u4e0a\u53ea\u4f1a\u4f7f\u7528\u5230 Ring 0 \u548c Ring 3 \u4e24\u79cd\u7279\u6743\u7ea7\u3002</p> <p> \u2192</p>"},{"location":"lab/xv6lab-baremetal/#csr","title":"CSR","text":"<p>\u4e0d\u540c\u4e8e32\u4e2a\u901a\u7528\u5bc4\u5b58\u5668 (General Purpose Registers)\uff0cCSR \u662f\u4e00\u4e9b\u7279\u6b8a\u7684\u5bc4\u5b58\u5668\u3002</p> <p>CSR\uff08Control and Status Registers\uff0c\u63a7\u5236\u4e0e\u72b6\u6001\u5bc4\u5b58\u5668\uff09\u662f\u7528\u4e8e\u63a7\u5236 CPU \u884c\u4e3a\u3001\u5b58\u50a8\u7cfb\u7edf\u72b6\u6001\u3001\u7ba1\u7406\u5f02\u5e38\u548c\u4e2d\u65ad\u7684\u91cd\u8981\u5bc4\u5b58\u5668\u96c6\u3002CSR \u5bc4\u5b58\u5668\u9700\u8981\u7528\u7279\u6b8a\u7684\u6307\u4ee4\u6765\u8bbf\u95ee\u3002</p> <p>\u6bcf\u4e2a CSR \u5747\u6709\u7279\u6743\u7ea7\u9650\u5236\u3002\u4f8b\u5982\uff0c<code>time</code> \u548c <code>cycle</code> \u5bc4\u5b58\u5668\u53ef\u4ee5\u88ab U mode \u8bfb\u53d6\u4f46\u4e0d\u80fd\u4fee\u6539\u3002<code>sstatus</code> \u7b49 S mode CSR \u53ef\u4ee5\u88ab S/M mode \u8bfb\u5199\u3002<code>mstatus</code> \u7b49 M mode CSR \u53ea\u80fd\u88ab M mode \u8bfb\u5199\u3002\u5728\u4f4e\u7279\u6743\u7ea7\u8bbf\u95ee\u9ad8\u7279\u6743\u7ea7\u7684 CSR \u4f1a\u89e6\u53d1\u7a0b\u5e8f\u5f02\u5e38\u3002</p> <p>\u6bcf\u4e2a CSR \u4e2d\u4f1a\u5b9a\u4e49\u4e00\u4e9b\u5b57\u6bb5\uff08Field\uff09\uff0c\u5b83\u4eec\u5360\u636e\u4e00\u4e9b\u6bd4\u7279\uff0c\u8868\u793a\u4e00\u4e9b\u7279\u6b8a\u7684\u542b\u4e49\u3002\u6211\u4eec\u4f1a\u5728\u540e\u7eed\u7684\u8bfe\u7a0b\u4e2d\u66f4\u591a\u7684\u63a5\u89e6 CSR\u3002</p>"},{"location":"lab/xv6lab-baremetal/#_2","title":"\u8fd0\u884c\u73af\u5883","text":"<p>\u5728 RISC-V \u7684\u4e09\u4e2a\u7279\u6743\u7ea7\u4e0a\uff0cRISC-V \u67b6\u6784\u5b9a\u4e49\u4e86\u4e09\u79cd\u8fd0\u884c\u72b6\u6001\uff1a\u5206\u522b\u662f\u56fa\u4ef6 (Machine mode)\u3001\u64cd\u4f5c\u7cfb\u7edf (Supervisor mode) \u548c\u7528\u6237\u6001 (User mode)\u3002</p> <p>\u5728 RISC-V \u67b6\u6784\u4e2d\uff0c\u64cd\u4f5c\u7cfb\u7edf (Supervisor) \u5411\u5e94\u7528\u7a0b\u5e8f (Application) \u63d0\u4f9b\u7684\u8fd0\u884c\u73af\u5883\u88ab\u79f0\u4e3a ABI (Application Binary Interface)\uff0c\u800c\u56fa\u4ef6 (Machine, SEE) \u4e3a\u64cd\u4f5c\u7cfb\u7edf (Supervisor, OS) \u63d0\u4f9b\u7684\u8fd0\u884c\u73af\u5883\u5219\u88ab\u79f0\u4e3a Supervisor Binary Interface (SBI)\u3002</p> <p></p> <p>\u56fa\u4ef6 (OpenSBI) \u63d0\u4f9b\u4e86\u5bf9\u4e00\u4e9b\u57fa\u672c\u786c\u4ef6\u7684\u8bbf\u95ee\u63a5\u53e3\uff0c\u5e76\u901a\u8fc7\u7c7b\u4f3c syscall \u7684\u65b9\u5f0f\u4e3a S Mode \u63d0\u4f9b\u670d\u52a1\uff0c\u5b83\u4eec\u88ab\u79f0\u4e3a SBI Call\u3002\u5176\u4e2d\u5c31\u5305\u542b\u4e86\u57fa\u672c\u7684\u4e32\u53e3\u8f93\u5165\u8f93\u51fa\u51fd\u6570\uff0c<code>sbi_console_putchar</code> \u548c <code>sbi_console_getchar</code>\u3002</p>"},{"location":"lab/xv6lab-baremetal/#_3","title":"\u542f\u52a8\u6d41\u7a0b","text":"<p>\u64cd\u4f5c\u7cfb\u7edf\u7684\u542f\u52a8\u6d41\u7a0b\u5373\u662f\u5bf9\u6bcf\u4e00\u7ea7\u8fd0\u884c\u73af\u5883\u7684\u521d\u59cb\u5316\u3002\u901a\u5e38\uff0c\u6211\u4eec\u4f1a\u4ece\u9ad8\u7279\u6743\u7ea7\u5f00\u59cb\u521d\u59cb\u5316\uff0c\u5e76\u4e00\u7ea7\u4e00\u7ea7\u5730\u964d\u7ea7\u5230\u4f4e\u7279\u6743\u7ea7\u4e0a\u7ee7\u7eed\u8fdb\u884c\u521d\u59cb\u5316\u3002</p>"},{"location":"lab/xv6lab-baremetal/#cpu","title":"\u4ece CPU \u4e0a\u7535\u5f00\u59cb","text":"<p>\u5728 CPU \u4e0a\u7535\u540e\uff0c\u5b83\u4f1a\u8fdb\u884c\u590d\u4f4d\u3002\u590d\u4f4d\u4f1a\u5c06 PC \u8bbe\u7f6e\u5230\u4e00\u4e2a\u56fa\u5b9a\u503c\uff0c\u5b83\u88ab\u79f0\u4e3a Reset Vector\uff08\u590d\u4f4d\u5411\u91cf\uff09\uff0c\u8fd9\u662f CPU \u5373\u5c06\u6267\u884c\u7684\u7b2c\u4e00\u4e2a\u4ee3\u7801\u7684\u5730\u5740\u3002\u8fd9\u4e2a\u503c\u662f\u7531\u5177\u4f53\u7684 RISC-V \u5b9e\u73b0\u6240\u89c4\u5b9a\u7684\uff0c\u6211\u4eec\u5c06\u8fd9\u79cd\u503c\u79f0\u4e3a Implementation-Specific\u3002</p> <p>Lab \u5b9e\u9a8c\u62a5\u544a 1</p> <p>\u8bf7\u4f60\u627e\u51fa QEMU \u7684 Reset Vector \u7684\u5185\u5bb9\u3002</p> <p>\u5728\u4e00\u4e2a\u7ec8\u7aef\u4e2d\u6267\u884c <code>make debug</code>\uff0c\u5b83\u4f1a\u542f\u52a8 <code>qemu-system-riscv64</code>\uff0c\u4f46\u662f\u4f1a\u52a0\u4e0a\u53c2\u6570 <code>-S -gdb tcp::3333</code>\uff0c\u8fd9\u8868\u793a\u6211\u4eec\u671f\u671b\u4e00\u4e2a\u8c03\u8bd5\u5668\u6765\u9644\u52a0\u3002\u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\uff08\u786e\u4fdd\u5b83\u7684 PWD \u548c\u4e0a\u4e00\u4e2a\u7ec8\u7aef\u4e00\u81f4\uff09\u8fd0\u884c <code>gdb-multiarch</code>\uff0c\u5b83\u4f1a\u542f\u52a8 GDB \u8c03\u8bd5\u5668\u5e76\u81ea\u52a8\u52a0\u8f7d\u5f53\u524d\u76ee\u5f55\u4e0b\u9762\u7684 <code>.gdbinit</code> \u6587\u4ef6\u3002</p> <p>\u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0cgdb \u4f1a\u505c\u7559\u5728\u5730\u5740 <code>0x1000</code> \u4e0a\u3002</p> <p></p> <p>\u4f7f\u7528 <code>x/10i $pc</code> \u6307\u4ee4\u6253\u5370\u5f53\u524d PC \u6307\u9488\u6240\u6307\u5411\u7684 10 \u6761\u6307\u4ee4\u3002</p> <p></p> <p>Note: \u5982\u679c\u4f60\u6536\u5230\u4e86\u4ee5\u4e0b\u63d0\u793a\uff0c\u5219\u8868\u660e\u4f60\u7684 gdb \u6ca1\u6709\u8bbe\u7f6e\u5141\u8bb8\u81ea\u52a8\u52a0\u8f7d\u5f53\u524d\u76ee\u5f55\u4e0b\u9762\u7684 <code>.gdbinit</code> \u6587\u4ef6\u3002\u5c06 <code>set auto-load safe-path /</code> \u8fd9\u4e00\u884c\u52a0\u5165\u5230 <code>~/.gdbinit</code> \u4e0b\u9762\uff0c\u5e76\u91cd\u65b0\u5f00\u59cb <code>make debug</code>\u3002</p> <pre><code>warning: File \"/data/os-riscv/SUSTech-OS-2025/.gdbinit\" auto-loading has been declined by your `auto-load safe-path' set to \"$debugdir:$datadir/auto-load\".\nTo enable execution of this file add\n        add-auto-load-safe-path /data/os-riscv/SUSTech-OS-2025/.gdbinit\nline to your configuration file \"/home/yuki/.gdbinit\".\nTo completely disable this security protection add\n        set auto-load safe-path /\nline to your configuration file \"/home/yuki/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n        info \"(gdb)Auto-loading safe path\"\n</code></pre> <p>Lab \u5b9e\u9a8c\u62a5\u544a 2</p> <p>\u8bf7\u4f60\u627e\u51fa QEMU \u5728\u542f\u52a8\u65f6\u5f80\u5185\u5b58\u4e2d\u52a0\u8f7d\u4e86\u54ea\u4e9b\u5185\u5bb9\u3002</p> <p>\u53c2\u7167 \u5b9e\u9a8c\u62a5\u544a 1\uff0c\u6253\u5f00\u4e00\u4e2a GDB \u7ec8\u7aef\uff0c\u6267\u884c\u547d\u4ee4 <code>monitor info roms</code>\uff0c\u5c06\u8f93\u51fa\u4fe1\u606f\u586b\u5165\u62a5\u544a\u7eb8\u4e0a\u9762\u7684\u8868\u683c\u4e2d\u3002</p> <p>\u6bcf\u6761\u8f93\u51fa\u4fe1\u606f\u4e2d\uff0caddr \u8868\u793a\u52a0\u8f7d\u7684\u8d77\u59cb\u5730\u5740\uff0csize \u8868\u793a\u52a0\u8f7d\u7684\u5185\u5bb9\u957f\u5ea6\uff0cmem=rom/ram \u8868\u793a\u8fd9\u4e00\u6bb5\u5185\u5bb9\u662f\u4e0d\u53ef\u4fee\u6539\u7684 ROM \u8fd8\u662f\u53ef\u4fee\u6539\u7684\u5185\u5b58 RAM\u3002</p> <p>Reset Vector \u7684\u4ee3\u7801\u4f1a\u8df3\u8f6c\u5230 OpenSBI \u7684\u52a0\u8f7d\u5730\u5740 <code>0x8020_0000</code> \u7ee7\u7eed\u6267\u884c\uff0c\u8fd9\u662f\u8fd0\u884c\u5728 M mode \u7684\u56fa\u4ef6\u3002</p>"},{"location":"lab/xv6lab-baremetal/#opensbi","title":"OpenSBI","text":"<p>OpenSBI \u4f1a\u5bf9\u91cd\u8981\u7684\u7cfb\u7edf\u8bbe\u5907\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e3a Platform-level \u7684\u8bbe\u5907\u3002\u5b83\u4eec\u662f\u6574\u4e2a\u7cfb\u7edf\u5171\u4eab\u7684\uff0c\u5373\u591a\u4e2a CPU \uff08\u4e5f\u88ab\u79f0\u4e3a Hart\uff09\u6240\u770b\u5230\u7684\u8bbe\u5907\u662f\u540c\u4e00\u4e2a\u3002</p> <p></p> <pre><code>Platform Name             : riscv-virtio,qemu\nPlatform Features         : medeleg\nPlatform HART Count       : 1\nPlatform IPI Device       : aclint-mswi\nPlatform Timer Device     : aclint-mtimer @ 10000000Hz\nPlatform Console Device   : uart8250\nPlatform HSM Device       : ---\nPlatform PMU Device       : ---\nPlatform Reboot Device    : syscon-reboot\nPlatform Shutdown Device  : syscon-poweroff\nPlatform Suspend Device   : ---\n</code></pre> <p>\u968f\u540e\uff0cOpenSBI \u6307\u5b9a\u4e0b\u4e00\u9636\u6bb5\u7684\u542f\u52a8\u662f\u6211\u4eec\u7684\u5185\u6838\uff1a</p> <pre><code>Domain0 Next Address      : 0x0000000080200000\nDomain0 Next Arg1         : 0x000000009fe00000\nDomain0 Next Mode         : S-mode\n</code></pre> <p>\u5e76\u521d\u59cb\u5316 Hart \u76f8\u5173\u7684\u914d\u7f6e\uff1a</p> <pre><code>Boot HART ID              : 0\nBoot HART Domain          : root\nBoot HART Priv Version    : v1.12\nBoot HART Base ISA        : rv64imafdch\n</code></pre>"},{"location":"lab/xv6lab-baremetal/#kernel","title":"Kernel","text":"<p>\u5728 OpenSBI \u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0cOpenSBI \u4f1a\u964d\u7ea7\u5230 S-mode \u5e76\u5c06 PC \u6307\u9488\u6307\u5411\u6211\u4eec\u7684\u5185\u6838\u8d77\u59cb\u5730\u5740 0x80200000\u3002\u8be5\u5730\u5740\u4e0a\u4fdd\u5b58\u7740\u5185\u6838\u7684\u7b2c\u4e00\u4e2a\u5165\u53e3 _entry \u7684\u4ee3\u7801\uff0c\u81f3\u6b64\uff0cCPU \u63a7\u5236\u6743\u6765\u5230\u6211\u4eec\u7684 xv6 \u5185\u6838\u3002</p> <pre><code>80200000: 00007117      auipc   sp, 0x7\n80200004: 00010113      mv      sp, sp\n80200008: 00000097      auipc   ra, 0x0\n8020000c: 174080e7      jalr    0x174(ra) &lt;main&gt;\n</code></pre> <p>\u6e90\u4ee3\u7801\uff1a</p> <pre><code>    .section .text.entry\n    .globl _entry\n_entry:\n    lla sp, boot_stack_top\n    call main\n\n    .section .bss.stack\n    .globl boot_stack\nboot_stack:\n    .space 4096 * 4\n    .globl boot_stack_top\nboot_stack_top:\n</code></pre> <ul> <li>\u6211\u4eec\u4f7f\u7528 <code>auipc</code> \u548c <code>addi</code> \u6307\u4ee4\uff0c\u5c06\u6808\u6307\u9488\u6307\u5411 <code>boot_stack_top</code>\uff0c\u8fd9\u662f\u6211\u4eec\u63d0\u524d\u4e3a\u7b2c\u4e00\u4e2a\u5185\u6838\u5165\u53e3\u5f00\u8f9f\u7684\u6808\u3002</li> <li>\u6211\u4eec\u901a\u8fc7 <code>auipc</code> \u548c <code>jalr</code> \u6307\u4ee4\uff0c\u8df3\u8f6c\u5230 main \u51fd\u6570\u7ee7\u7eed\u6267\u884c\u3002</li> </ul> <p>\u4e3a\u4ec0\u4e48\u9700\u8981\u4f7f\u7528\u6c47\u7f16\u4f5c\u4e3a\u5185\u6838\u5165\u53e3</p> <p>\u56e0\u4e3a\u5728\u5185\u6838\u5165\u53e3\u5904\uff0cOpenSBI \u6ca1\u6709\u4e3a\u6211\u4eec\u8bbe\u7f6e sp \u6808\u6307\u9488\uff0c\u800c C \u8bed\u8a00\u7684\u8fd0\u884c\u73af\u5883\u8981\u6c42\u6709\u6808\u4f5c\u4e3a\u4fdd\u5b58\u6808\u4e0a\u53d8\u91cf\u548c\u51fd\u6570\u8c03\u7528\u4fdd\u5b58\u5bc4\u5b58\u5668\u7684\u5730\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u9700\u8981\u4f7f\u7528\u6c47\u7f16\u521d\u59cb\u5316 sp \u5bc4\u5b58\u5668\u3002</p> <p>\u8be5 lab \u7684\u5185\u6838\u975e\u5e38\u7b80\u5355\uff0c\u89c2\u5bdf main.c \u4e2d\u7684 main \u51fd\u6570\uff1a</p> <pre><code>void main() {\n    printf(\"\\n\");\n    printf(\"clean bss: %p - %p\\n\", s_bss, e_bss);\n    memset(s_bss, 0, e_bss - s_bss);\n    printf(\"Kernel booted.\\n\");\n    printf(\"Hello World!\\n\");\n\n    printf(\"sysregs:\\n\");\n    print_sysregs();\n    printf(\"%d\\n\", global_variable);\n\n    printf(\"kernel ends, parking...\\n\");\n    while (1);\n}\n</code></pre> <ul> <li>\u9996\u5148\u6e05\u7a7a .bss \u6bb5\uff08\u5728 Linux \u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u8fd9\u4e00\u6b65\u662f Linux Kernel \u5b9e\u73b0\u7684\uff0c\u4f46\u662f\u73b0\u5728\u6211\u4eec\u5c31\u662f Kernel\uff0c\u6240\u4ee5\u8fd9\u4ef6\u4e8b\u60c5\u5f97\u81ea\u5df1\u5e72\uff09</li> <li>\u7136\u540e\u7528 printf \u6253\u5370\u4e00\u4e9b\u4fe1\u606f\uff0c\u968f\u540e\u5f00\u59cb\u6b7b\u5faa\u73af\u3002</li> </ul> <pre><code>clean bss: 0x0000000080207000 - 0x0000000080207000\nKernel booted.\nHello World!\n</code></pre> <p>Lab \u5b9e\u9a8c\u62a5\u544a 3</p> <p>\u5c1d\u8bd5\u8bfb\u53d6 CSR <code>mvendorid</code>\u3002</p> <p>\u5728 <code>main.c</code> \u4e2d\uff0c\u5728 <code>while(1);</code> \u6b7b\u5faa\u73af\u524d\u52a0\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>uint64 x;\nasm volatile(\"csrr %0, mvendorid\" : \"=r\"(x));\nprintf(\"csr: %p\\n\", x);\n</code></pre> <p><code>make run</code> \u7f16\u8bd1\u5e76\u8fd0\u884c\uff0c\u4f60\u7684\u7a0b\u5e8f\u80fd\u6b63\u5e38\u8bfb\u53d6\u5230 CSR mvendorid \u7684\u503c\u5417\uff1f</p> <p>\u9605\u8bfb RISC-V Privilege \u624b\u518c (riscv-privilege.pdf) \u7ae0\u8282 2.1  CSR Address Mapping Conventions\uff0c\u731c\u6d4b\u4e3a\u4ec0\u4e48\u4f60\u7684\u7a0b\u5e8f\u4f1a\u65e0\u9650\u91cd\u542f\u3002</p>"},{"location":"lab/xv6lab-baremetal/#sbi-call","title":"SBI Call","text":"<p>\u5728\u8fd9\u4e2a lab \u7684\u5185\u6838\u4e2d\uff0c<code>printf</code> \u4f1a\u8c03\u7528 <code>consputc</code> \u6765\u5411\u63a7\u5236\u53f0\u6253\u5370\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c\u8fd9\u4e2a\u51fd\u6570\u6700\u7ec8\u4f1a\u8c03\u7528 <code>sbi_call(SBI_CONSOLE_PUTCHAR, c, 0, 0)</code>\u3002</p> <p><code>\u8fd0\u884c\u73af\u5883</code> \u4e00\u7ae0\u5df2\u7ecf\u4ecb\u7ecd\u4e86 OpenSBI \u5411\u64cd\u4f5c\u7cfb\u7edf\u901a\u8fc7 SBI \u63a5\u53e3\u63d0\u4f9b\u4e86\u4e00\u4e2a\u57fa\u7840\u7684\u8fd0\u884c\u73af\u5883\uff0c\u5176\u4e2d\u5c31\u5305\u62ec\u5bf9\u4e32\u53e3\u8f93\u5165\u8f93\u51fa\u7684\u8bbf\u95ee\u51fd\u6570\uff0c <code>sbi_console_putchar</code> \u548c <code>sbi_console_getchar</code>\u3002</p> <p>\u5728\u6211\u4eec\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u901a\u8fc7\u8bbe\u7f6e a0\u3001a1 \u7b49\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u901a\u8fc7 <code>ecall</code> \u6307\u4ee4\u5411 M Mode \u7684\u7a0b\u5e8f\uff0c\u5373 OpenSBI\uff0c\u53d1\u8d77\u8bf7\u6c42\u3002OpenSBI \u5728\u5b8c\u6210\u8bf7\u6c42\u540e\u4f1a\u8fd4\u56de</p> <p>Calling Convention</p> <p>Calling Convention \u8868\u793a\u5728\u8fdb\u884c\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u8c03\u7528\u8005 (Caller) \u548c \u88ab\u8c03\u7528\u8005 (Callee) \u6240\u9075\u5faa\u7684\u89c4\u8303\u3002</p> <p>\u8fd9\u901a\u5e38\u5305\u542b\u4e86\uff1a</p> <ol> <li>\u53c2\u6570\u4e0e\u8fd4\u56de\u503c\u662f\u5982\u4f55\u4f20\u9012</li> <li>Caller \u548c Callee \u9700\u8981\u4fdd\u5b58\u54ea\u4e9b\u5bc4\u5b58\u5668</li> </ol> <p>SBI \u7684 Calling Convention \u5b9a\u4e49\u5982\u4e0b (riscv-sbi.pdf)\uff1a</p> <p>All SBI functions share a single binary encoding, which facilitates the mixing of SBI extensions. The SBI specification follows the below calling convention.</p> <ul> <li>An ECALL is used as the control transfer instruction between the supervisor and the SEE.</li> <li>a7 encodes the SBI extension ID (EID),</li> <li>a6 encodes the SBI function ID (FID) for a given extension ID encoded in a7 for any SBI extension defined in or after SBI v0.2.</li> <li>All registers except a0 &amp; a1 must be preserved across an SBI call by the callee.</li> <li>SBI functions must return a pair of values in a0 and a1, with a0 returning an error code. </li> </ul> <p>\u800c\u6211\u4eec\u8981\u4f7f\u7528\u7684 putchar \u548c getchar \u662f\u6765\u81ea Legacy Extensions\uff1a</p> <ul> <li>Nothing is returned in a1 register.</li> <li>All registers except a0 must be preserved across an SBI call by the callee.</li> <li>The value returned in a0 register is SBI legacy extension specific.</li> </ul> <p>\u6309\u7167 RISC-V \u7684 Calling Convention\uff0c\u53c2\u6570\u662f\u901a\u8fc7 a \u7cfb\u5217\u5bc4\u5b58\u5668\u4f20\u9012\uff0c\u4ece a0 \u5f00\u59cb\u3002</p> <p>\u5728 <code>sbi_call_legacy</code> \u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u58f0\u660e\u4e864\u4e2a\u53d8\u91cf\uff0c\u5e76\u4e14\u6ce8\u660e\u4ed6\u4eec\u5e94\u8be5\u76f4\u63a5\u88ab\u5206\u914d\u5230\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u4e0a (<code>register</code>, <code>asm(\"a0\")</code>)\u3002</p> <p>\u968f\u540e\uff0c\u6211\u4eec\u5c06 a7 \u8d4b\u503c\u4e3a\u6211\u4eec\u8981\u8c03\u7528\u54ea\u4e2a SBI \u51fd\u6570\uff0c\u4e09\u4e2a\u53c2\u6570\u5206\u522b\u8d4b\u503c\u7ed9 a0, a1 \u548c a2\u3002</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528 asm volatile \u8fdb\u884c ecall \u8c03\u7528\u3002</p> <p>\u6700\u540e\uff0c\u8fd4\u56de a0 \u5bc4\u5b58\u5668\u7684\u503c\u3002</p> <pre><code>const uint64 SBI_CONSOLE_PUTCHAR = 1;\nconst uint64 SBI_CONSOLE_GETCHAR = 2;\n\nstatic int inline sbi_call_legacy(uint64 which, uint64 arg0, uint64 arg1, uint64 arg2)\n{\n    register uint64 a0 asm(\"a0\") = arg0;\n    register uint64 a1 asm(\"a1\") = arg1;\n    register uint64 a2 asm(\"a2\") = arg2;\n    register uint64 a7 asm(\"a7\") = which;\n    asm volatile(\"ecall\" : \"=r\"(a0) : \"r\"(a0), \"r\"(a1), \"r\"(a2), \"r\"(a7) : \"memory\");\n    return a0;\n}\n\nvoid console_putchar(int c) {\n    sbi_call_legacy(SBI_CONSOLE_PUTCHAR, c, 0, 0);\n}\n</code></pre> <p><code>asm volatile</code> \u8868\u793a\u5728 C \u4ee3\u7801\u4e2d\u76f4\u63a5\u63d2\u5165\u6c47\u7f16\u4ee3\u7801\uff0c\u5b83\u5206\u4e3a\u56db\u90e8\u5206\uff1a</p> <pre><code>asm asm-qualifiers ( AssemblerTemplate \n                 : OutputOperands \n                 [ : InputOperands\n                 [ : Clobbers ] ])\n</code></pre> <p>\u6211\u4eec\u4f7f\u7528 <code>volatile</code> \u4f5c\u4e3a asm-qualifiers \u8868\u793a\u7981\u6b62\u7f16\u8bd1\u5668\u5bf9\u8fd9\u4e00\u6bb5\u4ee3\u7801\u8fdb\u884c\u53ef\u80fd\u7684\u4f18\u5316\u3002</p> <p>AssemblerTemplate \u8868\u793a\u6c47\u7f16\u7684\u6a21\u677f\uff0cOutputOperands \u8868\u793a\u54ea\u4e9b C \u53d8\u91cf\u5e94\u8be5\u88ab\u662f\u4e3a\u8fd9\u4e00\u6bb5\u6c47\u7f16\u7684\u8f93\u51fa\uff0cInputOperands \u8868\u793a\u54ea\u4e9b C \u53d8\u91cf\u5e94\u8be5\u88ab\u89c6\u4e3a\u8fd9\u4e00\u6bb5\u6c47\u7f16\u7684\u8f93\u5165\uff0cClobbers \u8868\u793a\u54ea\u4e00\u4e9b\u5bc4\u5b58\u5668\u6216\u7cfb\u7edf\u72b6\u6001\u4f1a\u88ab\u8fd9\u4e00\u6bb5\u6c47\u7f16\u4ee3\u7801\u4fee\u6539\u3002</p> <p>See also: https://gcc.gnu.org/onlinedocs/gcc-12.1.0/gcc/Extended-Asm.html</p> <p>Lab \u5b9e\u9a8c\u62a5\u544a 4</p> <p>\u5c1d\u8bd5\u8c03\u7528\u65b0\u7248\u672c SBI \u7684 <code>sbi_get_spec_version()</code> \u65b9\u6cd5\u3002</p> <p>\u5728 <code>main.c</code> \u4e2d\uff0c\u5728 <code>while(1);</code> \u6b7b\u5faa\u73af\u524d\u52a0\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>struct sbiret ret = sbi_call(?, ?, 0, 0, 0);\nprintf(\"sbicall: err: %d, ret: %p\\n\", ret.error, ret.value);\n</code></pre> <p>\u53c2\u7167 SBI \u624b\u518c riscv-sbi.pdf\uff0c\u586b\u5165 ? \u5e94\u8be5\u7684\u503c\u3002<code>make run</code> \u7f16\u8bd1\u5e76\u8fd0\u884c\uff0c\u89e3\u91ca\u8f93\u51fa\u7684\u503c\u3002</p>"},{"location":"lab/xv6lab-baremetal/#_4","title":"\u7f16\u8bd1\u8fc7\u7a0b","text":"<pre><code>$ /d/o/SUSTech-OS-2025 (xv6-lab1)&gt; make\nriscv64-unknown-elf-gcc -fPIE -fno-pic -fno-plt -Wall -Wno-unused-variable -Werror -O -fno-omit-frame-pointer -ggdb -march=rv64g -MD -mcmodel=medany -ffreestanding -fno-common -nostdlib -mno-relax -Ios -std=gnu17 -fno-stack-protector -D LOG_LEVEL_ERROR -c os/console.c -o build/os/console.o\nriscv64-unknown-elf-gcc -fPIE -fno-pic -fno-plt -Wall -Wno-unused-variable -Werror -O -fno-omit-frame-pointer -ggdb -march=rv64g -MD -mcmodel=medany -ffreestanding -fno-common -nostdlib -mno-relax -Ios -std=gnu17 -fno-stack-protector -D LOG_LEVEL_ERROR -c os/main.c -o build/os/main.o\nriscv64-unknown-elf-gcc -fPIE -fno-pic -fno-plt -Wall -Wno-unused-variable -Werror -O -fno-omit-frame-pointer -ggdb -march=rv64g -MD -mcmodel=medany -ffreestanding -fno-common -nostdlib -mno-relax -Ios -std=gnu17 -fno-stack-protector -D LOG_LEVEL_ERROR -c os/printf.c -o build/os/printf.o\nriscv64-unknown-elf-gcc -fPIE -fno-pic -fno-plt -Wall -Wno-unused-variable -Werror -O -fno-omit-frame-pointer -ggdb -march=rv64g -MD -mcmodel=medany -ffreestanding -fno-common -nostdlib -mno-relax -Ios -std=gnu17 -fno-stack-protector -D LOG_LEVEL_ERROR -c os/sbi.c -o build/os/sbi.o\nriscv64-unknown-elf-gcc -fPIE -fno-pic -fno-plt -Wall -Wno-unused-variable -Werror -O -fno-omit-frame-pointer -ggdb -march=rv64g -MD -mcmodel=medany -ffreestanding -fno-common -nostdlib -mno-relax -Ios -std=gnu17 -fno-stack-protector -D LOG_LEVEL_ERROR -c os/string.c -o build/os/string.o\nriscv64-unknown-elf-gcc -fPIE -fno-pic -fno-plt -Wall -Wno-unused-variable -Werror -O -fno-omit-frame-pointer -ggdb -march=rv64g -MD -mcmodel=medany -ffreestanding -fno-common -nostdlib -mno-relax -Ios -std=gnu17 -fno-stack-protector -D LOG_LEVEL_ERROR -c os/entry.S -o build/os/entry.o\nriscv64-unknown-elf-ld -z max-page-size=4096 -T os/kernel.ld -o build/kernel build/os/console.o build/os/main.o build/os/printf.o build/os/sbi.o build/os/string.o build/os/entry.o\nriscv64-unknown-elf-objcopy -O binary build/kernel build/kernel.bin\nriscv64-unknown-elf-objdump -S build/kernel &gt; build/kernel.asm\nriscv64-unknown-elf-objdump -t build/kernel | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$/d' &gt; build/kernel.sym\nBuild kernel done\n</code></pre> <p>\u4ec0\u4e48\u662f make, Makefile</p> <p>Makefile \u662f\u4e00\u79cd\u63cf\u8ff0\u7f16\u8bd1\u6d41\u7a0b\u7684\u6587\u4ef6\uff0c\u800c <code>make</code> \u547d\u4ee4\u5219\u6309\u7167 Makefile \u4e2d\u6307\u5b9a\u7684\u6d41\u7a0b\u8fdb\u884c\u7f16\u8bd1\u3002</p> <p>\u63a8\u8350\u89c2\u770b\uff1ahttps://www.bilibili.com/video/BV188411L7d2</p>"},{"location":"lab/xv6lab-baremetal/#_5","title":"\u7f16\u8bd1\u94fe\u63a5\u53c2\u6570","text":"<p>gcc \u662f\u6211\u4eec\u5e38\u7528\u7684 C \u8bed\u8a00\u7f16\u8bd1\u5668\uff0c\u800c <code>riscv64-unknown-elf-gcc</code> \u5219\u8868\u793a\u4f7f\u7528 RISC-V 64 \u4f4d\u3001\u9762\u5411\u672a\u77e5\u5e73\u53f0\u3001\u4ea7\u51fa ELF \u683c\u5f0f\u7684 gcc \u5957\u4ef6\u3002</p> <p>\u5269\u4e0b\u7684\u7f16\u8bd1\u53c2\u6570\u6211\u4eec\u53ef\u4ee5\u5206\u5f00\u7406\u89e3\uff1a</p> <ul> <li> <p><code>-march=rv64g -mcmodel=medany -mno-relax</code></p> <p>\u8fd9\u8868\u793a\u6211\u4eec\u7684\u76ee\u6807\u67b6\u6784\u662f rv64g\uff0c\u5bfb\u5740\u6a21\u578b\u662f <code>medany</code>\uff0c\u5e76\u4e14\u94fe\u63a5\u5668\u4e0d\u8981\u8fdb\u884c Relax\u3002</p> <p>See also: https://gcc.gnu.org/onlinedocs/gcc/RISC-V-Options.html</p> </li> <li> <p><code>-ffreestanding -fno-common -nostdlib</code></p> <p>\u8fd9\u8868\u793a\u6211\u4eec\u4e0d\u4f7f\u7528\u6807\u51c6\u5e93\u51fd\u6570\uff0c\u4e5f\u4e0d\u5047\u8bbe\u4e00\u4e9b\u901a\u7528\u51fd\u6570\uff08\u5982 memset\uff09\u7684\u5b9a\u4e49\u4e0e\u6807\u51c6\u51fd\u6570\u5e93\u5b9a\u4e49\u4e00\u81f4\u3002</p> </li> <li> <p><code>-fno-pie -no-pie -fno-plt -fno-omit-frame-pointer -fno-stack-protector</code></p> <p>\u8fd9\u8868\u793a\u751f\u6210\u7684 ELF \u6587\u4ef6\u4e0d\u8981\u4f7f\u7528\u4f4d\u7f6e\u65e0\u5173\u4ee3\u7801 (Position-Independent Executable)\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u5bfc\u81f4\u751f\u6210 got \u548c plt \u6bb5\uff0c\u6211\u4eec\u7684\u5185\u6838\u8fd8\u6682\u65f6\u65e0\u6cd5\u5904\u7406\u5982\u6b64\u590d\u6742\u7684\u7ed3\u6784\u3002 <code>-fno-omit-frame-pointer -fno-stack-protector</code> \u8868\u793a\u4fdd\u7559 frame-pointer\uff0c\u7981\u7528\u6808\u4fdd\u62a4\u3002</p> </li> <li> <p><code>-Wall -Wno-unused-variable -Werror -ggdb</code></p> <p>\u8fd9\u8868\u793a\u663e\u793a\u6240\u6709\u8b66\u544a\u3001\u4f46\u662f\u4e0d\u63d0\u793a\u672a\u4f7f\u7528\u7684\u53d8\u91cf\u8b66\u544a\u3001\u5e76\u5c06\u6240\u6709 warning \u5f53\u4f5c error\u3002\u6700\u540e <code>-ggdb</code> \u8868\u793a\u4f7f\u7528 gdb \u8c03\u8bd5\u3002</p> </li> <li> <p><code>-Ios -std=gnu17 -O2 -c os/entry.S -o build/os/entry.o</code></p> <p>\u8868\u793a\u4f7f\u7528 os \u76ee\u5f55\u4f5c\u4e3a include \u76ee\u5f55\uff0c\u4f7f\u7528 gnu17 C\u6807\u51c6\uff0c\u542f\u7528 O2 \u4f18\u5316\u3002</p> <p>\u7f16\u8bd1 (<code>-c</code>) \u539f\u6587\u4ef6 <code>os/entry.S</code>\uff0c\u8f93\u51fa\u5230 <code>build/os/entry.o</code> \u4e2d\u3002</p> </li> </ul> <p>ld \u8868\u793a\u94fe\u63a5\u5668\uff0c\u6211\u4eec\u4f7f\u7528 ld \u5c06\u6240\u6709\u7f16\u8bd1\u5668\u4ea7\u751f\u7684 .o \u6587\u4ef6\u94fe\u63a5\u4e3a\u6700\u7ec8\u7684 kernel ELF \u6587\u4ef6\u3002</p> <p><code>riscv64-unknown-elf-ld -z max-page-size=4096 -T os/kernel.ld -o build/kernel build/os/console.o build/os/main.o build/os/printf.o build/os/sbi.o build/os/string.o build/os/entry.o</code></p> <p>\u8fd9\u4e00\u4e32\u547d\u4ee4\u8868\u793a\uff1a</p> <ul> <li>\u4f7f\u7528 os/kernel.ld \u4f5c\u4e3a\u94fe\u63a5\u811a\u672c</li> <li>\u8f93\u51fa\u4e3a <code>build/kernel</code></li> <li>\u8f93\u5165\u4e3a\u6240\u6709 .o \u6587\u4ef6</li> </ul>"},{"location":"lab/xv6lab-baremetal/#linker-script","title":"Linker Script","text":"<p>\u7f16\u8bd1\u811a\u672c\u8868\u793a\uff1a\u94fe\u63a5\u5668\u5e94\u8be5\u5982\u4f55\u6392\u5217\u6240\u6709 .o \u6587\u4ef6\u4e2d\u7684\u6bb5\uff08Section\uff09\uff0c\u5373\u5185\u5b58\u5e03\u5c40 (Memory Layout)\uff0c\u5e76\u6307\u660e\u4ea7\u751f\u7684 ELF \u6587\u4ef6\u5e94\u8be5\u5982\u4f55\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d (Program Header)\u3002</p> <pre><code>OUTPUT_ARCH(riscv)\nENTRY(_entry)\nBASE_ADDRESS = 0x80200000;\n\nSECTIONS\n{\n    . = BASE_ADDRESS;\n    skernel = .;\n\n    s_text = .;\n    .text : {\n        *(.text.entry)\n        *(.text .text.*)\n        . = ALIGN(4K);\n        e_text = .;\n    }\n\n    . = ALIGN(4K);\n    s_rodata = .;\n    .rodata : {\n        *(.rodata .rodata.*)\n    }\n\n    . = ALIGN(4K);\n    e_rodata = .;\n    s_data = .;\n    .data : {\n        *(.data.apps)\n        *(.data .data.*)\n    }\n\n    . = ALIGN(4K);\n    e_data = .;\n    .bss : {\n        *(.bss.stack)\n        s_bss = .;\n        *(.bss .bss.*)\n    }\n\n    . = ALIGN(4K);\n    e_bss = .;\n    ekernel = .;\n\n    /DISCARD/ : {\n        *(.eh_frame)\n    }\n}\n</code></pre> <p>\u5f00\u5934\u7684 <code>OUTPUT_ARCH</code> \u8868\u793a\u751f\u6210\u7684 ELF \u6587\u4ef6\u9002\u7528\u4e0e RISC-V \u67b6\u6784\uff0c<code>ENTRY</code> \u8868\u793a ELF \u7684\u5165\u53e3\u70b9\u4e3a\u7b26\u53f7 <code>_entry</code>\u3002\u7136\u540e\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5e38\u91cf\u4e3a <code>BASE_ADDRESS</code> \u4f7f\u5b83\u7b49\u4e8e 0x80200000\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u5185\u6838\u7684\u8d77\u59cb\u5730\u5740\u3002</p> <p>\u5728 <code>SECTIONS</code> \u4e2d\uff0c\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u5f53\u524d\u5730\u5740 (<code>.</code> \u7b26\u53f7) (\u60f3\u8c61\u94fe\u63a5\u5668\u6b63\u5728\u4ece\u67d0\u4e2a\u5730\u5740\u5f00\u59cb\u7ed9\u6240\u6709 section \u5b89\u6392\u4f4d\u7f6e) \u4e3a 0x80200000\uff0c\u5e76\u5bfc\u51fa <code>skernel</code> \u548c <code>s_text</code> \u7b26\u53f7\u7684\u503c\u4e3a\u5f53\u524d\u5730\u5740\u3002</p> <p>\u968f\u540e\uff0c\u6211\u4eec\u5b9a\u4e49 (.text) \u6bb5\uff0c\u8fd9\u901a\u5e38\u8868\u793a\u4ee3\u7801\u6bb5\uff1a</p> <pre><code>.text : {\n    *(.text.entry)\n    *(.text .text.*)\n    . = ALIGN(4K);\n    e_text = .;\n}\n</code></pre> <p>\u9996\u5148\u6392\u5217\u6240\u6709\u4f4d\u4e8e <code>.text.entry</code> \u7684\u7b26\u53f7\uff0c\u968f\u540e\u6392\u5217\u6240\u6709\u4f4d\u4e8e <code>.text</code> \u7684\u7b26\u53f7\u3002</p> <p>\u6211\u4eec\u5728 <code>.text</code> \u6bb5\u4e2d\u9996\u5148\u5305\u542b\u4e86\u4e00\u4e2a\u7279\u6b8a\u7684 Section <code>.text.entry</code>\uff0c\u8fd9\u4e2a section \u662f\u5728 <code>entry.S</code> \u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\uff1a</p> <pre><code>    .section .text.entry\n    .globl _entry\n_entry:\n</code></pre> <p>\u6211\u4eec\u5728 <code>entry.S</code> \u6587\u4ef6\u4e2d\u6307\u5b9a <code>_entry</code> \u7b26\u53f7\u5e94\u8be5\u88ab\u653e\u7f6e\u5230 <code>.text.entry</code> \u6bb5\uff0c\u5e76\u5728\u94fe\u63a5\u811a\u672c\u4e2d\u6307\u5b9a\u8fd9\u4e2a\u6bb5\u4e3a\u5185\u6838\u7684\u5f00\u59cb\u5730\u5740\u3002\u8fd9\u6837\u6211\u4eec\u5373\u53ef\u786e\u4fdd _entry \u4f1a\u88ab\u653e\u7f6e\u5230\u5185\u6838\u8d77\u59cb\u5730\u5740\u3002\u5f53\u6211\u4eec\u542f\u52a8\u5185\u6838\u65f6\uff0c\u6211\u4eec\u4f1a\u4ece\u8fd9\u4e2a\u8d77\u59cb\u5730\u5740\u5f00\u59cb\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u6267\u884c\u4e86\u5185\u6838\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53cd\u6c47\u7f16 <code>build/kernel</code> \u6765\u89c2\u5bdf\u8fd9\u4e00\u70b9\uff1a</p> <pre><code>$ llvm-objdump-19 -d build/kernel | less\nbuild/kernel:   file format elf64-littleriscv\n\nDisassembly of section .text:\n\n0000000080200000 &lt;skernel&gt;:\n80200000: 00007117      auipc   sp, 0x7\n80200004: 00010113      mv      sp, sp\n80200008: 00000097      auipc   ra, 0x0\n8020000c: 174080e7      jalr    0x174(ra) &lt;main&gt;\n</code></pre> <p>\u7136\u540e\uff0c\u5c06\u5f53\u524d\u5730\u5740\u5bf9\u9f50\u5230 4K \u8fb9\u754c\uff0c\u5bfc\u51fa <code>e_text</code> \u548c <code>s_trampolime</code> \u7b26\u53f7\u3002</p> <p>\u5269\u4f59\u7684 <code>.rodata</code>, <code>.data</code> \u548c <code>.bss</code> \u5219\u8868\u793a\u6570\u636e\u6bb5\uff0c\u4f46\u662f\u7565\u6709\u4e0d\u540c\uff1a</p> <ul> <li><code>.rodata</code> \u8868\u793a\u53ea\u8bfb\u7684\u6570\u636e\u6bb5</li> <li><code>.data</code> \u8868\u793a\u53ef\u8bfb\u53ef\u5199\u7684\u6570\u636e\u6bb5</li> <li><code>.bss</code> \u8868\u793a\u5e94\u8be5\u5728\u7a0b\u5e8f\u542f\u52a8\u65f6\u88ab\u6e05\u96f6\u7684\u6570\u636e\u6bb5</li> </ul> <p>\u5f53\u7136\uff0c\u6240\u6709\u6570\u636e\u6bb5\u5747\u662f\u4e0d\u53ef\u6267\u884c\u7684\u3002</p> <p>\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>readelf</code> \u5de5\u5177\u89c2\u5bdf\u6700\u540e\u4ea7\u51fa\u7684 kernel ELF \u6587\u4ef6\uff1a</p> <pre><code>$ /d/o/SUSTech-OS-2025 (xv6-lab1)&gt; llvm-readelf-19 -a build/kernel\nELF Header:\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00\n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           RISC-V\n  Version:                           0x1\n  Entry point address:               0x80200000\n  Start of program headers:          64 (bytes into file)\n  Start of section headers:          29208 (bytes into file)\n  Flags:                             0x4, double-float ABI\n  Size of this header:               64 (bytes)\n  Size of program headers:           56 (bytes)\n  Number of program headers:         4\n  Size of section headers:           64 (bytes)\n  Number of section headers:         19\n  Section header string table index: 18\nThere are 19 section headers, starting at offset 0x7218:\n\nSection Headers:\n  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0\n  [ 1] .text             PROGBITS        0000000080200000 001000 001000 00  AX  0   0  4\n  [ 2] .rodata           PROGBITS        0000000080201000 002000 0001f0 00   A  0   0  8\n  [ 3] .data             PROGBITS        0000000080202000 003000 000008 00  WA  0   0  8\n  [ 4] .bss              NOBITS          0000000080203000 003008 004000 00  WA  0   0  1\n  [ 5] .debug_info       PROGBITS        0000000000000000 003008 0010c0 00      0   0  1\n  [ 6] .debug_abbrev     PROGBITS        0000000000000000 0040c8 0006e5 00      0   0  1\n  [ 7] .debug_loclists   PROGBITS        0000000000000000 0047ad 0004b5 00      0   0  1\n  [ 8] .debug_aranges    PROGBITS        0000000000000000 004c70 000130 00      0   0 16\n  [ 9] .debug_line       PROGBITS        0000000000000000 004da0 000fe7 00      0   0  1\n  [10] .debug_str        PROGBITS        0000000000000000 005d87 0003bc 01  MS  0   0  1\n  [11] .debug_line_str   PROGBITS        0000000000000000 006143 0000d3 01  MS  0   0  1\n  [12] .comment          PROGBITS        0000000000000000 006216 00001a 01  MS  0   0  1\n  [13] .riscv.attributes RISCV_ATTRIBUTES 0000000000000000 006230 000065 00      0   0  1\n  [14] .debug_frame      PROGBITS        0000000000000000 006298 0004c8 00      0   0  8\n  [15] .debug_rnglists   PROGBITS        0000000000000000 006760 00007f 00      0   0  1\n  [16] .symtab           SYMTAB          0000000000000000 0067e0 0006f0 18     17  31  8\n  [17] .strtab           STRTAB          0000000000000000 006ed0 000279 00      0   0  1\n  [18] .shstrtab         STRTAB          0000000000000000 007149 0000cc 00      0   0  1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n  L (link order), O (extra OS processing required), G (group), T (TLS),\n  C (compressed), x (unknown), o (OS specific), E (exclude),\n  R (retain), p (processor specific)\n\nElf file type is EXEC (Executable file)\nEntry point 0x80200000\nThere are 4 program headers, starting at offset 64\n\nProgram Headers:\n  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align\n  ATTRIBUTES     0x006230 0x0000000000000000 0x0000000000000000 0x000065 0x000000 R   0x1\n  LOAD           0x001000 0x0000000080200000 0x0000000080200000 0x0011f0 0x0011f0 R E 0x1000\n  LOAD           0x003000 0x0000000080202000 0x0000000080202000 0x000008 0x005000 RW  0x1000\n  GNU_STACK      0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW  0x10\n\n Section to Segment mapping:\n  Segment Sections...\n   00     .riscv.attributes \n   01     .text .rodata \n   02     .data .bss \n   03     \n   None   .debug_info .debug_abbrev .debug_loclists .debug_aranges .debug_line .debug_str .debug_line_str .comment .debug_frame .debug_rnglists .symtab .strtab .shstrtab\n</code></pre> <ul> <li>\u6700\u7ec8\u7684\u6587\u4ef6\u7c7b\u578b\u4e3a\uff1a<code>Type: EXEC (Executable file)</code></li> <li>\u5165\u53e3\u5730\u5740\u4e3a\uff1a <code>Entry point address: 0x80200000</code></li> <li>\u4e00\u5171\u6709 19 \u4e2a Sections\uff1a<ul> <li>Sections\u6709\u81ea\u5df1\u7684 Flags,\u5176\u4e2d A \u8868\u793a\u8fd9\u4e00\u4e2a Section \u5728\u52a0\u8f7d\u65f6\u5e94\u8be5\u88ab\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0cW \u8868\u793a\u53ef\u4ee5\u5199\u5165\uff0cX \u8868\u793a\u53ef\u4ee5\u6267\u884c\u3002</li> </ul> </li> <li>\u4e00\u5171\u6709 4 \u4e2a Program Headers\uff0c\u5176\u4e2d\u6709\u4e24\u4e2a LOAD:<ul> <li>\u7b2c\u4e00\u4e2a LOAD \u8868\u793a\uff1a<ul> <li>\u5728\u865a\u62df\u5730\u5740 (VirtAddr) 0x80200000 \u5904\uff0c\u6620\u5c04\u7269\u7406\u5730\u5740 (PhysAddr) 0x80200000\uff0c\u5206\u914d 0x0011d0 \u5b57\u8282\u7684\u5185\u5b58\u7a7a\u95f4 (MemSiz)\uff0c\u8be5\u5185\u5b58\u6bb5\u7684\u6743\u9650\u4e3a RE (Read &amp; Executable)\u3002</li> <li>\u4ece\u8be5 ELF \u6587\u4ef6\u7684 (Offset) 0x001000 \u5904\u590d\u5236 0x0011d0 \u5b57\u8282 (FileSiz) \u5230\u4e0a\u8ff0\u5185\u5b58\u7a7a\u95f4\u3002</li> </ul> </li> <li>\u7b2c\u4e8c\u4e2a LOAD \u8868\u793a\uff1a<ul> <li>\u5728\u865a\u62df\u5730\u5740 0x80202000 \u5904\uff0c\u6620\u5c04\u7269\u7406\u5730\u5740 0x80202000\uff0c\u5206\u914d 0x005000 \u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u8be5\u5185\u5b58\u6bb5\u6743\u9650\u4e3a RW (Read &amp; Write)\u3002</li> <li>\u4ece\u8be5 ELF \u6587\u4ef6\u7684 0x3000 \u5904\uff0c\u590d\u5236 0x0008 \u5b57\u8282\u5230\u8be5\u5185\u5b58\u6bb5\u3002\u4f46\u662f\uff0c\u8be5\u5185\u5b58\u6bb5\u5206\u914d\u4e86 0x5000 \u7684\u7a7a\u95f4\uff0c\u8fd9\u8868\u793a\u5269\u4e0b\u672a\u88ab\u586b\u5145\u7684\u7a7a\u95f4\u5168\u90fd\u662f\u96f6\uff0c\u8fd9\u5373\u662f bss \u6bb5\u3002</li> </ul> </li> </ul> </li> <li>\u5728 <code>Section to Segment mapping:</code> \u5904\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff1a<ul> <li>\u7b2c\u4e00\u4e2a Program Headers \u5305\u542b .text, .rodata \u4e09\u4e2a Sections\u3002</li> <li>\u7b2c\u4e8c\u4e2a Program Headers \u5305\u542b .data \u548c .bss \u6bb5\u3002</li> </ul> </li> </ul>"},{"location":"lab/xv6lab-contextswitch/","title":"Context Switch","text":"<p>\u4e0a\u4e0b\u6587\u5207\u6362 (Context Switch) \u662f\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u6982\u5ff5\uff0c\u672c\u7ae0\u6211\u4eec\u5c06\u96c6\u4e2d\u4e8e Context Switch \u5728\u6280\u672f\u4e0a\u7684\u5b9e\u73b0\uff0c\u548c xv6 \u4e2d\u8c03\u5ea6\u5668 (scheduler) \u7684\u8bbe\u8ba1\u3002</p>"},{"location":"lab/xv6lab-contextswitch/#context","title":"\u4ec0\u4e48\u662f Context","text":"<p>\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0cContext (\u4e0a\u4e0b\u6587) \u662f\u6307\u5728\u67d0\u4e00\u65f6\u523b\u7a0b\u5e8f\u8fd0\u884c\u6240\u9700\u7684\u6240\u6709\u72b6\u6001\u4fe1\u606f\u7684\u96c6\u5408\u3002\u5728 xv6 \u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u89c4\u5b9a\u6bcf\u4e2a Process \u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u53ef\u88ab\u8c03\u5ea6\u7684\u5b9e\u4f53\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a Process \u62e5\u6709\u81ea\u5df1\u7684 Context\u3002</p> <p>\u7406\u89e3 Context \u7684\u91cd\u8981\u6027\u5728\u4e8e\uff1a\u5f53\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u5207\u6362\u6267\u884c\u4e0d\u540c\u7684\u8fdb\u7a0b\u65f6\uff0c\u5fc5\u987b\u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u7684 Context\uff0c\u5e76\u52a0\u8f7d\u8981\u5207\u6362\u5230\u7684\u8fdb\u7a0b\u7684 Context\u3002\u8fd9\u6837\u624d\u80fd\u786e\u4fdd\u8fdb\u7a0b\u5728\u4e0b\u6b21\u83b7\u5f97 CPU \u65f6\u80fd\u591f\u4ece\u4e4b\u524d\u7684\u72b6\u6001\u7ee7\u7eed\u6267\u884c\u3002\u8fd9\u4e2a\u4fdd\u5b58\u548c\u6062\u590d Context \u7684\u8fc7\u7a0b\u5c31\u662f Context Switch \u7684\u6838\u5fc3\u5185\u5bb9\u3002</p> <p>\u60f3\u8c61\u4e00\u4e0b\u4f60\u6b63\u5728\u8bfb\u4e00\u672c\u4e66\uff0c\u5f53\u4f60\u9700\u8981\u6682\u65f6\u53bb\u505a\u522b\u7684\u4e8b\u60c5\u65f6\uff0c\u4f60\u4f1a\u7528\u4e66\u7b7e\u6807\u8bb0\u5f53\u524d\u9605\u8bfb\u7684\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u4e66\u7b7e\u5c31\u76f8\u5f53\u4e8e\u4fdd\u5b58\u4e86\u4f60\u7684\"\u9605\u8bfb\u4e0a\u4e0b\u6587\"\u3002\u5f53\u4f60\u56de\u6765\u7ee7\u7eed\u8bfb\u4e66\u65f6\uff0c\u901a\u8fc7\u4e66\u7b7e\u5c31\u80fd\u77e5\u9053\u4ece\u54ea\u91cc\u7ee7\u7eed\u8bfb\u8d77\u3002\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684 Context \u4f5c\u7528\u4e0e\u6b64\u7c7b\u4f3c\uff0c\u53ea\u662f\u9700\u8981\u4fdd\u5b58\u548c\u6062\u590d\u7684\u4fe1\u606f\u8981\u590d\u6742\u5f97\u591a\u3002</p>"},{"location":"lab/xv6lab-contextswitch/#context-switch_1","title":"\u4e3a\u4ec0\u4e48\u8981 Context Switch","text":"<p>\u4ece\u8c03\u5ea6 (Scheduling) \u7684\u89d2\u5ea6\u6765\u770b\uff0cContext Switch \u662f\u5b9e\u73b0\u591a\u4efb\u52a1\u5904\u7406\u548c\u8d44\u6e90\u590d\u7528\u7684\u5173\u952e\u673a\u5236\uff1a</p> <ol> <li> <p>CPU \u8d44\u6e90\u7684\u65f6\u5206\u590d\u7528</p> <p>\u5f53\u7cfb\u7edf\u4e2d\u6709\u591a\u4e2a\u5c31\u7eea\u8fdb\u7a0b\u9700\u8981\u8fd0\u884c\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u8ba9\u5b83\u4eec\u8f6e\u6d41\u4f7f\u7528 CPU\u3002\u5373\u4f7f\u64cd\u4f5c\u7cfb\u7edf\u53ea\u6709\u5355\u4e2aCPU\uff0c\u901a\u8fc7\u65f6\u5206\u590d\u7528\u8f6e\u6d41\u8fd0\u884c\u4e0d\u540c\u7684\u8fdb\u7a0b\uff0c\u53ef\u4ee5\u5b9e\u73b0\u6240\u6709\u8fdb\u7a0b\u597d\u50cf\u5728\u540c\u65f6\u8fd0\u884c\u7684\u6548\u679c\u3002\u8c03\u5ea6\u5668\u4f1a\u6839\u636e\u8c03\u5ea6\u7b56\u7565\uff08\u5982 Round Robin\u3001Priority Scheduling \u7b49\uff09\u51b3\u5b9a\u5728\u67d0\u4e2a\u65f6\u523b\u5e94\u8be5\u8fd0\u884c\u54ea\u4e2a\u8fdb\u7a0b\u3002\u4e3a\u4e86\u5207\u6362\u5230\u88ab\u8c03\u5ea6\u7684\u8fdb\u7a0b\uff0c\u5c31\u5fc5\u987b\u6267\u884c Context Switch\u3002</p> </li> <li> <p>\u63d0\u9ad8\u7cfb\u7edf\u541e\u5410\u91cf</p> <p>\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u56e0\u4e3a I/O \u64cd\u4f5c\u800c\u963b\u585e\u65f6\uff0cCPU \u4f1a\u95f2\u7f6e\u3002\u901a\u8fc7 Context Switch\uff0c\u8c03\u5ea6\u5668\u53ef\u4ee5\u5207\u6362\u5230\u5176\u4ed6\u5c31\u7eea\u8fdb\u7a0b\uff0c\u8fd9\u6837 CPU \u5c31\u80fd\u5728\u7b49\u5f85 I/O \u7684\u540c\u65f6\u7ee7\u7eed\u6267\u884c\u5176\u4ed6\u4efb\u52a1\uff0c\u6700\u7ec8\u63d0\u9ad8\u4e86\u6574\u4e2a\u7cfb\u7edf\u7684\u8d44\u6e90\u5229\u7528\u7387\u548c\u541e\u5410\u91cf\u3002</p> </li> <li> <p>\u54cd\u5e94\u4ea4\u4e92\u5f0f\u4efb\u52a1</p> <p>\u7528\u6237\u4ea4\u4e92\u7a0b\u5e8f\u9700\u8981\u53ca\u65f6\u54cd\u5e94\u3002\u901a\u8fc7 Context Switch\uff0c\u8c03\u5ea6\u5668\u53ef\u4ee5\u6682\u505c\u5f53\u524d\u8fd0\u884c\u7684\u6279\u5904\u7406\u4efb\u52a1\uff0c\u8fc5\u901f\u5207\u6362\u5230\u9700\u8981\u7acb\u5373\u54cd\u5e94\u7684\u4ea4\u4e92\u5f0f\u4efb\u52a1\uff0c\u5b9e\u73b0\u66f4\u597d\u7684\u7528\u6237\u4f53\u9a8c\u3002</p> </li> </ol>"},{"location":"lab/xv6lab-contextswitch/#context-switch_2","title":"\u4ec0\u4e48\u65f6\u5019\u8fdb\u884c Context Switch","text":"<p>\u901a\u5e38 Context Switch \u53d1\u751f\u5728\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a</p> <ol> <li> <p>\u65f6\u95f4\u7247\u5230\u671f\u65f6\uff08Time Slice Expiration\uff09</p> <p>\u5728\u91c7\u7528\u65f6\u95f4\u7247\u8f6e\u8f6c\u8c03\u5ea6\u7b97\u6cd5\u65f6\uff0c\u5f53\u8fdb\u7a0b\u7528\u5b8c\u5206\u914d\u7684\u65f6\u95f4\u7247\uff0c\u7cfb\u7edf\u7684\u65f6\u949f\u4e2d\u65ad\u89e6\u53d1\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5f3a\u5236\u8fdb\u884c Context Switch\uff0c\u5207\u6362\u5230\u5176\u4ed6\u5c31\u7eea\u8fdb\u7a0b\u3002</p> </li> <li> <p>\u8fdb\u7a0b\u8fdb\u5165\u963b\u585e\u72b6\u6001\u65f6\uff08Process Blocking\uff09</p> <p>\u8fdb\u7a0b\u53d1\u8d77\u7cfb\u7edf\u8c03\u7528\u7b49\u5f85 I/O \u64cd\u4f5c\uff0c\u8fdb\u7a0b\u7b49\u5f85\u67d0\u4e2a\u4e8b\u4ef6\uff08\u5982\u4fe1\u53f7\u91cf\uff09\uff0c\u8fdb\u7a0b\u7533\u8bf7\u8d44\u6e90\u4f46\u65e0\u6cd5\u7acb\u5373\u83b7\u5f97\u3002</p> <p>\u6b64\u65f6\u8fdb\u7a0b\u4e3b\u52a8\u653e\u5f03 CPU\uff0c\u8c03\u5ea6\u5668\u9009\u62e9\u5176\u4ed6\u5c31\u7eea\u8fdb\u7a0b\u8fd0\u884c\u3002</p> </li> <li> <p>\u8fdb\u7a0b\u4e3b\u52a8\u8ba9\u51fa CPU \u65f6\uff08Voluntary Yield\uff09</p> <p>\u8fdb\u7a0b\u8c03\u7528 <code>yield</code> \u7cfb\u7edf\u8c03\u7528\uff0c\u4e3b\u52a8\u653e\u5f03\u5269\u4f59\u7684\u65f6\u95f4\u7247\uff0c\u901a\u5e38\u7528\u4e8e\u8fdb\u7a0b\u611f\u77e5\u5230\u81ea\u5df1\u77ed\u671f\u5185\u65e0\u4e8b\u53ef\u505a\u65f6\u3002</p> </li> </ol>"},{"location":"lab/xv6lab-contextswitch/#xv6-context-switch","title":"xv6 Context Switch \u5b9e\u73b0","text":"<p>\u5728 xv6 \u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8fdb\u7a0b\u7684\u5185\u6838 Context \u4e3a\uff1a</p> <pre><code>// Saved registers for kernel context switches.\nstruct context {\n    uint64 ra;\n    uint64 sp;\n\n    // callee-saved\n    uint64 s0;\n    uint64 s1;\n    uint64 s2;\n    uint64 s3;\n    uint64 s4;\n    uint64 s5;\n    uint64 s6;\n    uint64 s7;\n    uint64 s8;\n    uint64 s9;\n    uint64 s10;\n    uint64 s11;\n};\n</code></pre> <p>\u5728 <code>switch.S</code> \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\"\u51fd\u6570\" <code>swtch</code>\uff0c\u8be5\u51fd\u6570\u7684\u539f\u578b\u4e3a <code>void swtch(struct context *old, struct context *new)</code>\u3002</p> <pre><code># Context switch\n#   void swtch(struct context *old, struct context *new);\n# Save current registers in old. Load from new.\n\n.globl swtch\nswtch:\n    sd ra, 0(a0)\n    sd sp, 8(a0)\n    sd s0, 16(a0)\n    sd s1, 24(a0)\n    sd s2, 32(a0)\n    sd s3, 40(a0)\n    sd s4, 48(a0)\n    sd s5, 56(a0)\n    sd s6, 64(a0)\n    sd s7, 72(a0)\n    sd s8, 80(a0)\n    sd s9, 88(a0)\n    sd s10, 96(a0)\n    sd s11, 104(a0)\n\n    ld ra, 0(a1)\n    ld sp, 8(a1)\n    ld s0, 16(a1)\n    ld s1, 24(a1)\n    ld s2, 32(a1)\n    ld s3, 40(a1)\n    ld s4, 48(a1)\n    ld s5, 56(a1)\n    ld s6, 64(a1)\n    ld s7, 72(a1)\n    ld s8, 80(a1)\n    ld s9, 88(a1)\n    ld s10, 96(a1)\n    ld s11, 104(a1)\n\n    ret\n</code></pre> <p>\u5f53\u6211\u4eec\u9700\u8981\u8fdb\u884c\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8c03\u7528 <code>swtch</code> \u51fd\u6570\uff0c\u5e76\u7ed9\u51fa\u4e24\u4e2a <code>struct context*</code> \u6307\u9488\uff0c\u5206\u522b\u8868\u793a\uff0c\u5f53\u524d\u7684 Context \u5e94\u8be5\u88ab\u4fdd\u5b58\u5230\u54ea\u91cc (old)\uff0c\u548c\u4e4b\u540e\u5e94\u8be5\u4ece\u54ea\u91cc\u7ee7\u7eed\u6267\u884c (new)\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u662f C \u8bed\u8a00\u4e2d\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u6309\u7167 RISC-V \u7684 Calling Convention \u6784\u9020\u73af\u5883\uff0c\u4f8b\u5982\u8fd4\u56de\u5730\u5740\u4f1a\u88ab\u5199\u5165\u5728 <code>ra</code> \u5bc4\u5b58\u5668\u4e2d\uff0c\u8fd9\u901a\u5e38\u662f\u901a\u8fc7 <code>jalr</code> \u6307\u4ee4\u5b9e\u73b0\u7684\u3002</p> <p>\u800c\u6839\u636e RISC-V \u7684 Calling Convention\uff0c\u5bc4\u5b58\u5668\u7684\u503c\u8981\u4e48\u9700\u8981\u8c03\u7528\u8005\u81ea\u5df1\u4fdd\u5b58 (Caller-saved register)\uff0c\u88ab\u8c03\u7528\u8005\u80fd\u591f\u968f\u610f\u4fee\u6539\u8fd9\u4e9b\u5bc4\u5b58\u5668\uff1b\u8981\u4e48\u88ab\u8c03\u7528\u8005\u5728\u9700\u8981\u4fee\u6539\u8fd9\u4e9b\u5bc4\u5b58\u5668\u65f6\u4fdd\u5b58 (Callee-saved register)\u3002\u5e76\u4e14\uff0c\u8c03\u7528\u8005\u4f1a\u5728\u81ea\u5df1\u7684\u6808\u5e27 (Stack Frame) \u4e0a\u4fdd\u5b58\u8fd9\u4e9b caller-saved register (\u8fd9\u4e00\u6b65\u662f\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u8fdb\u884c\u7684)\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u4f4f <code>sp</code> \u5bc4\u5b58\u5668\uff0c\u5373\u53ef\u518d\u4e0b\u6b21\u8fd4\u56de\u65f6\u8ba9 <code>old</code> \u627e\u56de\u8fd9\u4e9b caller-saved register\u3002</p> <p></p> <p>\u4e0b\u56fe\u5c55\u793a\u4e86 P1 \u5207\u6362\u5230 P2 \u7684\u8fc7\u7a0b\uff0cP1 \u548c P2 \u6709\u5404\u81ea\u7684 Stack\uff0c\u6709\u5404\u81ea\u7684 Context \u7ed3\u6784\u4f53\u3002</p> <p></p> <p>P1 \u5728\u6267\u884c <code>P1</code> \u51fd\u6570\u65f6\uff0c\u4f1a\u5728\u51fd\u6570\u5f00\u5934 (prologue) \u4fdd\u5b58 <code>P1</code> \u7684\u8c03\u7528\u8005\u7684\u8fd4\u56de\u5730\u5740\uff0c\u540c\u65f6\u5c40\u90e8\u53d8\u91cf\u4e5f\u662f\u5728\u6808\u4e0a\u5f00\u8f9f\u7684\u3002\u5728 P1 \u8c03\u7528 <code>swtch</code> \u524d\uff0c\u7f16\u8bd1\u5668\u5728\u5df2\u7ecf\u5c06\u6240\u6709 Caller-Saved Registers \u4fdd\u5b58\u5728\u6808\u4e0a\uff0c\u7136\u540e\u7f16\u8bd1\u5668\u751f\u6210 <code>jal swtch</code> \u7684\u6c47\u7f16\uff0c\u8fd9\u4e00\u8c03\u6c47\u7f16\u6267\u884c\u65f6\u4f1a\u5c06 ra \u8bbe\u7f6e\u4e3a <code>P1</code> \u51fd\u6570\u4e2d <code>jal</code> \u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u3002</p> <p>\u5728\u8c03\u7528 <code>swtch</code> \u65f6\uff0c<code>a0</code> \u6307\u5411\u4e86 P1 \u7684 <code>struct context</code> \u7ed3\u6784\u4f53\uff0c<code>swtch</code> \u4f7f\u7528 <code>sd</code> \u6307\u4ee4\u4fdd\u5b58 ra, sp \u548c s0 - s11 \u5bc4\u5b58\u5668\u3002</p> <p>\u4e4b\u540e\uff0c<code>swtch</code> \u4ece <code>a1</code> \u52a0\u8f7d\u5373\u5c06\u6062\u590d\u7684 P2 \u7684 Context\uff0c\u4f7f\u7528 <code>ld</code> \u6307\u4ee4\u4ece <code>struct context</code> \u7ed3\u6784\u4f53\u4e2d\u8bfb\u53d6\u5c5e\u4e8e P2 \u7684 ra, sp \u548c s0 - s11 \u5bc4\u5b58\u5668\u3002</p> <p>\u5728 CPU \u6267\u884c\u5230 <code>ret</code> \u65f6\uff0cpc \u88ab\u6062\u590d\u4e3a ra \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6b64\u65f6\u5f00\u59cb\u6267\u884c\u4e0a\u6b21 P2 \u8c03\u7528 <code>swtch</code> \u65f6\u4fdd\u5b58\u7684\u8fd4\u56de\u5730\u5740\u3002</p> <p>\u81f3\u6b64\uff0c\u6210\u529f\u5b8c\u6210\u4e86\u4ece P1 \u5230 P2 \u7684\u5207\u6362\u3002</p> <p>\u6b64\u5916\uff0c<code>swtch</code> \u65b9\u6cd5\u662f\u5929\u751f\u6210\u5bf9\u7684\uff1a\u5982\u679c\u4e0a\u6b21\u4f7f\u7528 swtch \u79bb\u5f00\u4e86\u5f53\u524d\u8fdb\u7a0b\uff0c\u90a3\u4e48\u4e0b\u6b21\u8fd4\u56de\u65f6\uff0c\u5fc5\u5b9a\u662f\u6709\u5176\u4ed6\u8fdb\u7a0b\u8c03\u7528\u4e86 swtch \u56de\u5230\u4e86\u8be5\u8fdb\u7a0b\u3002</p>"},{"location":"lab/xv6lab-contextswitch/#xv6-process","title":"xv6 Process","text":"<p>\u4ee3\u7801\uff1a<code>os/sched.c</code>, <code>os/smp.c</code>, <code>os/proc.h</code></p> <p>\u5728 xv6 \u4e2d\uff0cProcess Control Block (PCB) \u88ab\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>// Per-process state\nstruct proc {\n    spinlock_t lock;\n    // p-&gt;lock must be held when accessing to these fields:\n    enum procstate state;  // Process state\n    int pid;               // Process ID\n    uint64 exit_code;\n    void *sleep_chan;\n    int killed;\n\n    struct proc *parent;  // Parent process\n\n    // User Memory Management\n    struct mm *mm;\n    struct vma *vma_ustack;\n    struct vma *vma_brk;\n    struct vma *vma_trapframe;\n    struct vma *vma_trampoline;\n\n    // User Trapframe\n    struct trapframe *__kva trapframe;  // data page for trampoline.S\n\n    uint64 __kva kstack;                // Virtual address of kernel stack\n    struct context context;             // swtch() here to run process\n};\n\nenum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };\n</code></pre> <p>\u6bcf\u4e2a Process \u6709\u81ea\u5df1\u7684 pid, \u8fdb\u7a0b\u72b6\u6001\u3001parent \u6307\u9488\u3001\u5185\u6838\u6808\u3001\u548c\u5185\u6838 Context\u3002</p> <p>\u5bf9\u4e8e\u6709\u7528\u6237\u6001\u7684 Process\uff0cPCB \u4e2d\u8fd8\u6709\u8d1f\u8d23\u7ba1\u7406\u5185\u5b58\u7684 <code>struct mm</code>\uff0c\u548c\u4fdd\u5b58 User mode \u4e0b Trap \u89e6\u53d1\u65f6\u6570\u636e\u7684 Trapframe\u3002</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u81ea\u65cb\u9501 <code>spinlock_t</code>\uff0c\u5c3d\u7ba1\u6211\u4eec\u76ee\u524d\u7406\u8bba\u8bfe\u8fd8\u6ca1\u6709\u63a5\u89e6\u5230\u9501\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u4f46\u662f\u6211\u4eec\u5728 xv6 \u4e2d\u89c4\u5b9a\uff1a\u8bbf\u95ee\u6240\u6709 <code>struct proc</code> \u7684\u6210\u5458\u65f6\uff0c\u90fd\u9700\u8981\u5728\u6301\u6709 <code>p-&gt;lock</code> \u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u3002</p> <p>\u5077\u8dd1\uff1a\u4ec0\u4e48\u662f\u9501</p> <p>\u9501 (lock) \u662f\u4e00\u79cd\u63a7\u5236\u5e76\u53d1\u8bbf\u95ee\u7684\u57fa\u672c\u5de5\u5177\u3002</p> <p>\u6211\u4eec\u89c4\u5b9a\uff1a\u5728\u6211\u4eec\u6301\u6709 (holding) \u4e00\u628a\u81ea\u65cb\u9501\u65f6\uff1a1. \u8be5 CPU \u4e0d\u80fd\u88ab\u4e2d\u65ad\uff0c2. \u5176\u4ed6 CPU \u4e0d\u80fd\u540c\u65f6\u6301\u6709\u8fd9\u4e00\u628a\u9501\u3002</p> <p>\u5982\u679c\u62a2\u4e0d\u5230\u9501\uff0c\u90a3\u4e48 CPU \u4f1a\u8fdb\u884c\u539f\u5730\u7a7a\u8f6c\u76f4\u5230\u62a2\u5230\u9501\u3002</p> <p>\u6211\u4eec\u4f7f\u7528 <code>acquire</code> \u548c <code>release</code> \u539f\u8bed\u8868\u793a \u4e0a\u9501 \u548c \u89e3\u9501 \u7684\u52a8\u4f5c\u3002</p>"},{"location":"lab/xv6lab-contextswitch/#struct-cpu","title":"<code>struct cpu</code>","text":"<p>\u5728 xv6 \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 <code>struct cpu</code> \u63cf\u8ff0\u6bcf\u4e2a CPU \u7684\u72b6\u6001\uff0c\u6211\u4eec\u662f\u7528 <code>mycpu()</code> \u65b9\u6cd5\u83b7\u53d6\u5f53\u524d <code>cpu</code> \u5bf9\u8c61\u3002</p> <pre><code>struct cpu {\n    int mhart_id;                  // mhartid for this cpu, passed by OpenSBI\n    struct proc *proc;             // current process\n    struct context sched_context;  // scheduler context, swtch() here to run scheduler\n    int inkernel_trap;             // whether we are in a kernel trap context\n    int noff;                      // how many push-off\n    int interrupt_on;              // Is the interrupt Enabled before the first push-off?\n    uint64 sched_kstack_top;       // top of per-cpu sheduler kernel stack\n    int cpuid;                     // for debug purpose\n};\n</code></pre>"},{"location":"lab/xv6lab-contextswitch/#_1","title":"\u5173\u4e2d\u65ad","text":"<p>\u5728\u5185\u6838\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u6709\u65f6\u4f1a\u5e0c\u671b\u5f53\u524d\u7684\u6267\u884c\u4e0d\u4f1a\u88ab\u6253\u65ad\u3001\u4e0d\u4f1a\u88ab\u5176\u4ed6\u4efb\u52a1\u62a2\u5360\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5173\u95ed\u4e2d\u65ad\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\uff08\u5f53\u7136\uff0c\u5f02\u5e38\u8fd8\u662f\u4f1a\u76f4\u63a5\u8df3\u5165 Trap Handler \u7684\uff09</p> <p>\u6211\u4eec\u4f7f\u7528 <code>push_off()</code> \u548c <code>pop_off()</code> \u8868\u793a\u4e00\u5bf9 \u5173\u4e2d\u65ad/\u5f00\u4e2d\u65ad\u7684\u64cd\u4f5c\u3002\u7531\u4e8e\u6211\u4eec\u53ef\u80fd\u4f1a\u6709\u5d4c\u5957 <code>push_off</code> \u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5173\u4e2d\u65ad\u89c6\u4e3a\u4e00\u79cd\u201c\u538b\u6808\u201d\u64cd\u4f5c\uff0c\u5e76\u4e14\u5f53\u4e14\u4ec5\u5f53\u6808\u7a7a\u65f6\u624d\u6062\u590d\u539f\u6837\uff0c\u6211\u4eec\u5728 <code>struct cpu</code> \u4e2d\u8bb0\u5f55\u4e24\u4e2a\u53d8\u91cf\uff1a</p> <ol> <li> <p><code>noff</code>\uff1a\u6211\u4eec\u76ee\u524d <code>push_off</code>/<code>pop_off</code> \u7684\u6df1\u5ea6\u662f\u591a\u5c11\u3002</p> <p>\u4f8b\u5982 <code>push_off()</code>, <code>push_off()</code>, <code>pop_off()</code> \u5e8f\u5217\u540e\uff0c<code>noff</code> \u5e94\u8be5\u4e3a 1.</p> </li> <li> <p>\u5728\u7b2c\u4e00\u6b21 <code>push_off()</code> \u65f6\uff0c\u5373 <code>noff == 0</code> \u65f6\uff0cCPU \u7684\u4e2d\u65ad\u662f\u5f00\u7684\u8fd8\u662f\u5173\u7684\u3002</p> </li> </ol> <pre><code>void push_off(void) {\n    uint64 ra = r_ra();\n\n    int old = intr_get();\n    intr_off();\n\n    if (mycpu()-&gt;noff == 0) {\n        // warnf(\"intr on saved: %p\", ra);\n        mycpu()-&gt;interrupt_on = old;\n    }\n    mycpu()-&gt;noff += 1;\n}\n\nvoid pop_off(void) {\n    uint64 ra = r_ra();\n\n    struct cpu *c = mycpu();\n    if (intr_get())\n        panic(\"pop_off - interruptible\");\n    if (c-&gt;noff &lt; 1)\n        panic(\"pop_off - unpair\");\n    c-&gt;noff -= 1;\n    if (c-&gt;noff == 0 &amp;&amp; c-&gt;interrupt_on) {\n        if (c-&gt;inkernel_trap)\n            panic(\"pop_off-&gt;intr_on happens in kernel trap\");\n        // we only open the interrupt if: \n        //    1. the push-pop stack is cleared, and \n        //    2. the interrupt was on before the first push-off\n        intr_on();\n    }\n}\n</code></pre>"},{"location":"lab/xv6lab-contextswitch/#xv6-scheduler","title":"xv6 scheduler","text":"<p>xv6 \u4e2d\uff0c\u6bcf\u4e2a CPU \u90fd\u6709\u4e00\u4e2a\u81ea\u5df1\u7684 scheduler\u3002<code>scheduler</code> \u65b9\u6cd5\u4ece\u4e0d\u8fd4\u56de\uff0c\u5176\u4e2d\u662f\u4e00\u4e2a <code>while(1)</code> \u6b7b\u5faa\u73af\u3002</p> <p><code>p = fetch_task();</code> \uff1a\u6bcf\u6b21\u5faa\u73af\u65f6\uff0cscheduler \u90fd\u5c1d\u8bd5\u83b7\u53d6\u4e00\u4e2a task\u3002</p> <p>\u5982\u679c\u83b7\u53d6\u4e0d\u5230\uff0c\u68c0\u67e5\u662f\u5426\u6240\u6709\u8fdb\u7a0b\u90fd\u9000\u51fa\u4e86\u3002\u5982\u679c\u662f\uff0c\u5219\u8868\u660e\u7cfb\u7edf\u5e94\u8be5\u7ed3\u675f\u8fd0\u884c\u4e86\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u6211\u4eec\u4f7f\u7528 <code>wfi</code> (Wait For Interrupt) \u6307\u4ee4\u7b49\u5f85\u4e0b\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\uff0c\u8fd9\u4e00\u6b65\u7b49\u4ef7\u4e8e\u7528 <code>while(1);</code> \u4f7fCPU\u7a7a\u8f6c\u4e00\u6bb5\u65f6\u95f4\u3002</p> <p>\u5982\u679c\u6211\u4eec\u6210\u529f\u83b7\u53d6\u5230\u4e86\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5219\u5bf9\u8be5\u8fdb\u7a0b\u4e0a\u9501 <code>acquire(&amp;p-&gt;lock)</code>\uff0c\u5c06\u5176\u72b6\u6001\u8bbe\u7f6e\u4e3a RUNNING\uff0c\u5c06\u5f53\u524d cpu \u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u8bbe\u4e3a\u8be5\u8fdb\u7a0b\uff0c\u968f\u540e\uff0c\u4f7f\u7528 <code>swtch</code> \u65b9\u6cd5\u8df3\u8f6c\u5230\u8be5\u8fdb\u7a0b\u4fdd\u5b58\u7684 Context \u4e2d\uff0c\u5e76\u4fdd\u5b58\u5f53\u524d Context \u5230 cpu-&gt;sched_context \u4e2d\u3002</p> <pre><code>// Scheduler never returns.  It loops, doing:\n//  - choose a process to run.\n//  - swtch to start running that process.\n//  - eventually that process transfers control\n//    via swtch back to the scheduler.\nvoid scheduler() {\n    struct proc *p;\n    struct cpu *c = mycpu();\n\n    // We only get here once.\n    // After each cpu boots, it calls scheduler().\n    // If this scheduler finds any possible process to run, it will switch to it.\n    //  And the scheduler context is saved on \"mycpu()-&gt;sched_context\"\n\n    for (;;) {\n        // intr may be on here.\n\n        p = fetch_task();\n        if (p == NULL) {\n            // if we cannot find a process in the task_queue\n            //  maybe some processes are SLEEPING and some are RUNNABLE\n            if (all_dead()) {\n                panic(\"[cpu %d] scheduler dead.\", c-&gt;cpuid);\n            } else {\n                // nothing to run; stop running on this core until an interrupt.\n                intr_on();\n                asm volatile(\"wfi\");\n                intr_off();\n                continue;\n            }\n        }\n\n        acquire(&amp;p-&gt;lock);\n        assert(p-&gt;state == RUNNABLE);\n        infof(\"switch to proc %d(%d)\", p-&gt;index, p-&gt;pid);\n        p-&gt;state = RUNNING;\n        c-&gt;proc  = p;\n        swtch(&amp;c-&gt;sched_context, &amp;p-&gt;context);\n\n        // When we get back here, someone must have called swtch(..., &amp;c-&gt;sched_context);\n        assert(c-&gt;proc == p);\n        assert(!intr_get());        // scheduler should never have intr_on()\n        assert(holding(&amp;p-&gt;lock));  // whoever switch to us must acquire p-&gt;lock\n        c-&gt;proc = NULL;\n\n        if (p-&gt;state == RUNNABLE) {\n            add_task(p);\n        }\n        release(&amp;p-&gt;lock);\n    }\n}\n</code></pre> <p>\u5f53\u6211\u4eec\u4ece swtch \u8fd4\u56de\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a</p> <ol> <li>\u56e0\u4e3a swtch \u662f\u6210\u5bf9\u7684\uff0c\u6211\u4eec\u4e0a\u6b21\u4ece swtch \u79bb\u5f00\uff0c\u8fd9\u6b21\u80af\u5b9a\u662f\u6709\u8c01\u8c03\u7528\u4e86 swtch(... , &amp;c-&gt;sched_context)</li> <li>\u8fd9\u662f\u4e2a per-cpu scheduler\uff0c\u800c\u5728\u79bb\u5f00\u65f6\u6211\u4eec\u5c06\u8be5 CPU \u7684\u63a7\u5236\u6743\u79fb\u4ea4\u7ed9\u4e86\u8fdb\u7a0b p\uff0c\u6240\u4ee5\u80af\u5b9a\u662f\u4ece\u8fdb\u7a0b p swtch \u56de\u6765\u7684\u3002(\u8fd9\u91cc\u5176\u5b9e\u8981\u6c42\u4e86\u8fdb\u7a0b\u53ea\u80fd\u901a\u8fc7 scheduler \u6765\u8fdb\u884c\u5207\u6362\uff0c\u800c\u4e0d\u80fd\u76f4\u63a5 Pa \u2194 Pb)\u3002</li> </ol> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u4e09\u884c assert \u6765\u786e\u4fdd\u6211\u4eec\u7684 scheduler \u673a\u5236\u8fd0\u884c\u6b63\u5e38\uff1a</p> <ol> <li>swtch \u8fd4\u56de\u65f6\uff0c\u4e2d\u65ad\u4e00\u5b9a\u662f\u5173\u95ed\u7684</li> <li>\u6211\u4eec\u4e00\u5b9a\u6301\u6709\u8005 p-&gt;lock \u8fd9\u628a\u9501</li> <li>\u5f53\u524d cpu \u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u4e00\u5b9a\u662f p</li> </ol> <p>\u6700\u540e\uff0c\u6211\u4eec\u6e05\u9664 <code>c-&gt;proc</code>\u3002\u5982\u679c p \u8fd8\u80fd\u7ee7\u7eed\u8fd0\u884c (RUNNABLE)\uff0c\u5219\u5c06\u5176\u4e22\u56de\u961f\u5217\u3002\u91ca\u653e p-&gt;lock \u540e\uff0cscheduler \u8fdb\u5165\u4e0b\u4e00\u4e2a\u5faa\u73af\u3002</p>"},{"location":"lab/xv6lab-contextswitch/#sched","title":"sched \u65b9\u6cd5","text":"<p><code>sched</code> \u65b9\u6cd5\u7528\u4e8e\u5c06 CPU \u63a7\u5236\u6743\u7531\u5f53\u524d\u5185\u6838\u8fdb\u7a0b\u4ea4\u8fd8\u7ed9 scheduler\u3002</p> <p>\u6211\u4eec\u89c4\u5b9a\u5728 sched \u65f6\uff1a</p> <ol> <li>\u5fc5\u987b\u6301\u6709 curr_proc()-&gt;lock \u8fd9\u628a\u9501\uff0c\u56e0\u4e3a\u8981\u64cd\u4f5c\u8be5 <code>struct proc</code> \u7ed3\u6784\u4f53\u3002</li> <li> <p>\u5fc5\u987b\u53ea\u6301\u6709 curr_proc()-&gt;lock \u8fd9\u628a\u9501\uff0c\u9632\u6b62\u5185\u6838\u51fa\u73b0\u6b7b\u9501</p> <p>\u8fd9\u4e00\u6b65\u662f\u901a\u8fc7\u68c0\u67e5 mycpu()-&gt;noff \u5b9e\u73b0\u7684\uff0c\u56e0\u4e3a\u6bcf\u6b21 acquire \u4f1a pushoff \u4e00\u6b21\uff0c\u6bcf\u6b21 release \u4f1a popoff \u4e00\u6b21\u3002</p> </li> <li> <p>\u5fc5\u987b\u5df2\u7ecf\u4fee\u6539 p-&gt;state \u4e3a\u975e RUNNING\u3002</p> </li> <li>\u7981\u6b62\u5728 kernel trap \u73af\u5883\u4e2d\u8c03\u7528 sched\u3002</li> </ol> <p>\u5982\u679c\u68c0\u67e5\u901a\u8fc7\uff0c\u5219\u5c06\u5f53\u524d\u8fdb\u7a0b\u72b6\u6001\u4fdd\u5b58\u5230 p-&gt;context, \u5e76\u8df3\u8f6c\u5230 scheduler \u7684 context \u4e0a\u9762\u3002</p> <p>\u540c\u7406\uff0c\u5982\u679c scheduler \u8fd8\u4f1a\u5207\u6362\u56de\u6765\uff0c\u6211\u4eec\u4e00\u6837\u8981\u6c42 scheduler \u5728\u7ed9\u4e88 CPU \u63a7\u5236\u6743\u65f6\u5c06 p-&gt;lock \u4e0a\u9501\u3002</p> <pre><code>// Switch to scheduler.  Must hold only p-&gt;lock\n// and have changed proc-&gt;state. Saves and restores\n// interrupt_on because interrupt_on is a property of this\n// kernel thread, not this CPU. It should\n// be proc-&gt;interrupt_on and proc-&gt;noff, but that would\n// break in the few places where a lock is held but\n// there's no process.\nvoid sched() {\n    int interrupt_on;\n    struct proc *p = curr_proc();\n\n    if (!holding(&amp;p-&gt;lock))\n        panic(\"not holding p-&gt;lock\");\n    if (mycpu()-&gt;noff != 1)\n        panic(\"holding another locks\");\n    if (p-&gt;state == RUNNING)\n        panic(\"sched running process\");\n    if (mycpu()-&gt;inkernel_trap)\n        panic(\"sched should never be called in kernel trap context.\");\n    assert(!intr_get());\n\n    interrupt_on = mycpu()-&gt;interrupt_on;\n\n    infof(\"switch to scheduler %d(%d)\", p-&gt;index, p-&gt;pid);\n    swtch(&amp;p-&gt;context, &amp;mycpu()-&gt;sched_context);\n    infof(\"switch back from scheduler %d(%d)\", p-&gt;index, p-&gt;pid);\n\n    mycpu()-&gt;interrupt_on = interrupt_on;\n\n    // if scheduler returns here: p-&gt;lock must be holding.\n    if (!holding(&amp;p-&gt;lock))\n        panic(\"not holding p-&gt;lock after sched.swtch returns\");\n}\n</code></pre>"},{"location":"lab/xv6lab-contextswitch/#cpu-interrupt_on","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u4fdd\u5b58 <code>cpu-&gt;interrupt_on</code>","text":"<p>\u56e0\u4e3a\u8be5\u5c5e\u6027\u662f\u5f53\u524d\u5185\u6838\u8fdb\u7a0b\u7684\u5c5e\u6027\uff0c\u800c\u5e76\u4e0d\u662f\u5f53\u524d cpu \u7684\u5c5e\u6027\u3002\u56e0\u4e3a\u6211\u4eec\u4f1a\u5728\u6ca1\u6709 Process \u7684\u60c5\u51b5\u4e0b\u4f7f\u7528 push_off/pop_off\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5c06 <code>interrupt_on</code> \u6807\u5fd7\u653e\u7f6e\u5728 <code>struct cpu</code> \u4e2d\uff0c\u800c\u4e0d\u662f <code>struct proc</code> \u4e2d\uff0c\u5e76\u4e14\u5728 <code>sched</code> \u5207\u6362\u5185\u6838\u8fdb\u7a0b\u65f6\uff0c\u5c06\u8be5\u5c5e\u6027\u4fdd\u5b58\u5728\u8be5\u5185\u6838\u8fdb\u7a0b\u7684\u6808\u4e0a\u3002</p> <p>\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981\u4fdd\u5b58 noff\uff1a\u56e0\u4e3a\u6211\u4eec\u5f3a\u5236\u8981\u6c42\u5b83\u4e3a 1\u3002</p> <p>\u5982\u679c\u6211\u4eec\u6ce8\u91ca\u6389\u4fdd\u5b58 <code>interrupt_on</code> \u8fd9\u4e00\u884c\uff0c\u4e0b\u56fe\u5c55\u793a\u4e86 Kernel Process 1 (\u7ea2\u8272) \u7684 Interrupt On \u72b6\u6001\u662f\u5982\u4f55\u901a\u8fc7 sched \u548c scheduler (\u84dd\u8272) \u9519\u8bef\u5f71\u54cd\u5230 Kernel Process 2 (\u9ec4\u8272) \u7684\uff1a</p> <p>Kernel Process 2 \u5148\u8fd0\u884c\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u6b64\u65f6\u4e2d\u65ad\u4e3a\u5173\uff0c\u7136\u540e\u8c03\u7528 sched \u6682\u65f6\u79bb\u5f00(\u865a\u7ebf)\uff0c\u800c\u6b64\u65f6 Kernel Process 1 \u5f00\u59cb\u6267\u884c(\u5b9e\u7ebf)\u3002P1 \u6267\u884c\u65f6\uff0c\u4e2d\u65ad\u4e3a\u5f00\u3002\u5728 P1 \u8c03\u7528 sched \u5207\u6362\u5230 scheduler \u65f6\uff0c\u4e2d\u65ad\u72b6\u6001\u88ab acquire-&gt;push_off \u4fdd\u5b58\u5728 <code>cpu-&gt;interrupt_on</code> \u4e2d\uff0c\u968f\u540e scheduler \u9009\u62e9\u4e86 P2 \u7ee7\u7eed\u6267\u884c\u3002\u800c P2 \u5728\u9000\u51fa sched \u65f6\u8c03\u7528\u4e86 <code>release</code>-&gt;<code>pop_off</code> \u800c\u9519\u8bef\u6062\u590d\u4e86\u4e2d\u65ad\u5f00\u7684\u72b6\u6001\u3002</p> <p></p>"},{"location":"lab/xv6lab-contextswitch/#lab","title":"Lab \u7ec3\u4e60","text":"<p>\u76ee\u524d\uff0c\u6211\u4eec\u89c4\u5b9a <code>sched</code> \u8c03\u5ea6\u4e0d\u5141\u8bb8\u53d1\u751f\u5728 kernel trap \u73af\u5883\u4e2d\u3002\u8bf7\u4f60\u4fee\u6539\u5185\u6838\u4ee3\u7801\uff0c\u4f7f\u5f97\u6211\u4eec\u80fd\u5728\u65f6\u949f\u4e2d\u65ad\u4e2d\u8fdb\u884c\u5185\u6838\u7ebf\u7a0b\u5207\u6362\u3002</p>"},{"location":"lab/xv6lab-interrupts/","title":"\u4e2d\u65ad &amp; \u5f02\u5e38\u5904\u7406","text":"<p>\u63a8\u8350\u9605\u8bfb</p> <p>CSAPP, Chapter 8, Exceptional Control Flow.</p> <p>https://csapp.cs.cmu.edu/2e/ch8-preview.pdf</p>"},{"location":"lab/xv6lab-interrupts/#exceptional-control-flow","title":"Exceptional Control Flow","text":"<p>\u5728\u6b63\u5e38\u7684\u7a0b\u5e8f\u8fd0\u884c\u72b6\u6001\u4e0b\uff0c\u63a7\u5236\u6d41 (\u53ef\u4ee5\u8ba4\u4e3a\u662f pc \u6307\u9488\u7684\u5e8f\u5217) \u662f\u6309\u7167\u7a0b\u5e8f\u6240\u9884\u5b9a\u7684\u987a\u5e8f\u4e00\u6b65\u6b65\u6267\u884c\u7684\u3002\u4f46\u662f\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u53ef\u907f\u514d\u5730\u9700\u8981\u5904\u7406\u4e00\u4e9b\u5728\u201c\u9884\u5b9a\u4e4b\u5916\u7684\u201d\u60c5\u51b5\uff0c\u4f8b\u5982\u7a0b\u5e8f\u51fa\u9519\u3001\u6216\u8005\u5916\u90e8\u72b6\u6001\u6709\u6240\u6539\u53d8\uff0c\u6bd4\u5982\u6709\u6570\u636e\u5305\u62b5\u8fbe\u7f51\u5361\u3001\u7528\u6237\u6572\u51fb\u952e\u76d8\u7b49\u4e8b\u4ef6\u3002\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u901a\u8fc7\u6539\u53d8\u63a7\u5236\u6d41\u6765\u5904\u7406\u8fd9\u4e9b\u4e8b\u4ef6\uff0c\u6211\u4eec\u5c06\u8fd9\u79cd\u63a7\u5236\u6d41\u79f0\u4e3a Exceptional Control Flow (\u5f02\u5e38\u63a7\u5236\u6d41)\u3002</p>"},{"location":"lab/xv6lab-interrupts/#exceptions-traps-and-interrupts","title":"Exceptions, Traps, and Interrupts","text":"<p>\u5728 RISC-V \u4f53\u7cfb\u67b6\u6784\u4e2d\uff0c\u6211\u4eec\u5c06 Exception (\u5f02\u5e38)\u3001Trap (\u9677\u9631) \u548c Interrupt (\u4e2d\u65ad) \u5b9a\u4e49\u5982\u4e0b\uff1a</p> <ul> <li>Exception: \u4e00\u79cd\u4e0d\u5bfb\u5e38\u7684\u60c5\u51b5\uff0c\u51fa\u73b0\u5728\u6307\u4ee4\u6267\u884c\u7684\u65f6\u523b\u3002</li> <li>Interrupt: \u4e00\u79cd\u5916\u90e8\u7684\u4e8b\u4ef6\uff0c\u4e0e\u5f53\u524d RISC-V \u6838\u5fc3\u6307\u4ee4\u6267\u884c\u662f\u5f02\u6b65\u7684\u3002</li> <li>Trap: \u4e00\u79cd\u540c\u6b65\u7684\u3001\u7531\u4e8e\u5f02\u5e38\u5bfc\u81f4\u7684\u63a7\u5236\u6d41\u8f6c\u79fb\u3002\u6211\u4eec\u53ef\u4ee5\u5c06 Trap \u8ba4\u4e3a\u662f\u5bf9 Exception \u548c Interrupt \u7684\u5904\u7406\u884c\u4e3a\u3002</li> </ul> <p>\u4ec0\u4e48\u662f\u540c\u6b65/\u5f02\u6b65 (Synchronous / Asynchronous)</p> <p>\u56de\u60f3\u5728\u6570\u5b57\u903b\u8f91\u8bfe\u7a0b\u4e0a\u5b9e\u73b0\u7684\u5355\u5468\u671f RISC-V CPU\uff0c\u6211\u4eec\u6709\u65f6\u949f\u4fe1\u53f7 clk\uff0c\u6bcf(n)\u4e2a\u65f6\u949f\u5468\u671f\u6267\u884c\u4e00\u6761\u6307\u4ee4\u3002</p> <p>\u540c\u6b65\u7684\u5f02\u5e38\u662f\u7531\u4e8e\u6307\u4ee4\u6267\u884c\u65f6\u4ea7\u751f\u7684\uff0c\u6240\u4ee5\u5f02\u5e38\u7684\u4ea7\u751f\u662f\u4e0e clk \u5bf9\u9f50\u7684\uff1b\u800c\u5f02\u6b65\u7684\u5f02\u5e38\u5219\u5b8c\u5168\u4e0e\u5f53\u524d\u6307\u4ee4\u3001clk\u65e0\u5173\u3002</p> <p></p> <p>\u6240\u4ee5\uff0c\u5f88\u663e\u7136\u4e3a\u4ec0\u4e48 Trap \u6240\u6307\u7684\u63a7\u5236\u6d41\u8f6c\u79fb\u662f\u201c\u540c\u6b65\u201d\u7684\uff1a\u6211\u4eec\u8d77\u7801\u9700\u8981\u7b49\u5f85\u65f6\u949f\u5468\u671f\u6765\u4e34\u624d\u80fd\u8fdb\u884c\u63a7\u5236\u6d41\u8f6c\u79fb\u3002</p> <p>We use the term exception to refer to an unusual condition occurring at run time associated with an instruction in the current RISC-V thread. We use the term trap to refer to the synchronous transfer of control to a trap handler caused by an exceptional condition occurring within a RISC-V thread. Trap handlers usually execute in a more privileged environment.</p> <p>We use the term interrupt to refer to an external event that occurs asynchronously to the current RISC-V thread. When an interrupt that must be serviced occurs, some instruction is selected to receive an interrupt exception and subsequently experiences a trap.</p> <p>Source: riscv-spec-v2.1.pdf, Section 1.3 \"Exceptions, Traps, and Interrupts\".</p> <p>RISC-V \u4e0e x86 \u7684\u4e0d\u540c\uff1a</p> <p>\u5728\u4e0d\u540c\u7684\u6559\u6750\u4e2d\uff0c\u6211\u4eec\u5bf9 Exception (\u5f02\u5e38)\u3001Trap (\u9677\u9631) \u548c Interrupt (\u4e2d\u65ad) \u6709\u7740\u7c7b\u4f3c\u7684\u5b9a\u4e49\uff0c\u4f8b\u5982 CSAPP \u53c2\u7167 x86 \u6a21\u578b\u63cf\u8ff0\u4e86\u5982\u4e0b\u56db\u79cd\u7c7b\u578b\u7684\u63a7\u5236\u6d41\u4e2d\u65ad\uff1a\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u5f02\u5e38\u63a7\u5236\u6d41\u4ea7\u751f\u662f\u5426\u540c\u6b65\u4e0e\u6307\u4ee4\u6d41\u3001\u4ee5\u53ca\u8df3\u8f6c\u81f3\u5f02\u5e38\u63a7\u5236\u6d41\u540e\u65f6\u5019\u4f1a\u8fd4\u56de\u5230\u539f\u6765\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u3002</p> <p></p> <p>\u4f8b\u5982\uff0cx86 \u4e2d\u7684\u5f02\u5e38\u7c7b\u578b\uff1a Page Fault (\u7f3a\u9875\u5f02\u5e38)\uff0cMachine Check (Abort) (\u5185\u5b58\u6216\u786c\u4ef6\u9519\u8bef)\u3002</p> <p>\u4f46\u662f\uff0c\u5728 RISC-V \u6a21\u578b\u4e0b\uff0c\u4e0a\u8ff0\u7684\u8fd4\u56de\u884c\u4e3a\u5747\u662f\u53ef\u4ee5\u901a\u8fc7\u8f6f\u4ef6\u6a21\u62df\u7684\uff0c\u6240\u4ee5\u5728 RISC-V \u786c\u4ef6\u6a21\u578b\u4e0a\uff0c\u5bfc\u81f4\u63a7\u5236\u6d41\u6539\u53d8\u7684\u539f\u56e0\u53ea\u6709\u4e24\u79cd\uff1a\u5f02\u5e38 (Exception) \u548c\u4e2d\u65ad (Interrupt)\u3002</p>"},{"location":"lab/xv6lab-interrupts/#csr-mstatussstatus","title":"CSR: mstatus/sstatus","text":"<p>CSR</p> <p>\u5982\u679c\u4f60\u4e0d\u6e05\u695a CSR \u662f\u4ec0\u4e48\uff0c\u8bf7\u53c2\u7167\uff1aQRH - CSR</p> <p>mstatus/sstatus: Machine/Supervisor Status Register. \u8be5\u5bc4\u5b58\u5668\u4fdd\u5b58\u7740 RISC-V \u6838\u5fc3\u7684\u63a7\u5236\u72b6\u6001\uff0csstaus \u5b9e\u9645\u4e0a\u662f mstatus \u7684\u4e00\u4e2a Restricted View.</p> <p></p> <p></p> <p>\u7531\u4e8e RISC-V \u7684\u624b\u518c\u5bf9 CSR \u5bc4\u5b58\u5668\u6bcf\u4e2a Field \u7684\u5b9a\u4e49\u5b9e\u5728\u662f\u592a\u96be\u627e\uff0c\u6211\u4eec\u5728\u6b64\u5904\u63d0\u4f9b\u4e00\u4e2a\u7528\u4e8e\u5feb\u901f\u67e5\u627e\u7684\u8868\uff1a</p> Field \u5168\u79f0 (\u731c\u7684) \u610f\u4e49 SPP Supervisor Previous Privilege \u8fdb\u5165 Supervisor mode \u524d\uff0cHart \u6240\u5904\u7684\u7279\u6743\u7ea7\u3002 SIE Supervisor Interrupt Enabled Supervisor \u4e0b\uff0c\u4e2d\u65ad\u542f\u7528\u6807\u5fd7\u4f4d\u3002 SPIE Supervisor Previous Interrupt Enabled \u8fdb\u5165 Supervisor \u524d\u7684\u4e2d\u65ad\u542f\u7528\u72b6\u6001\u3002 SUM Supervisor User-Memory \u5141\u8bb8 Supervisor \u6a21\u5f0f\u4e0b\u8bbf\u95ee\u5e26 U-bit \u7684\u9875\u9762 <p>\u5176\u4ed6\u6211\u4eec\u76ee\u524d\u7528\u4e0d\u5230\u7684\uff1a</p> Field \u5168\u79f0 (\u731c\u7684) \u610f\u4e49 FS/VS/XS Float-Point Status / Vector Status / user-eXtension Status \u6d6e\u70b9\u6a21\u5757/\u5411\u91cf\u6a21\u5757/\u7528\u6237\u81ea\u5b9a\u4e49\u6a21\u5757\u7684\u72b6\u6001\uff0c\u8868\u793a\u662f\u5426\u9700\u8981\u5728\u4e2d\u65ad\u5904\u7406\u5668\u4e2d\u4fdd\u5b58\u5b83\u4eec SD Status Dirty FS/VS/XS \u662f\u5426\u6709 Dirty MBE/SBE/UBE Machine/Supervisor/User Big-Endianess Machine / Supervisor / User \u6a21\u5f0f\u4e0b\u662f\u5426\u4f7f\u7528\u5927\u7aef\u5e8f\u8fdb\u884c\u975e\u53d6\u503c\u7684\u8bbf\u5b58 SXL/UXL Supervisor/User XLEN Supervisor/User \u4f7f\u7528 32 \u4f4d/64 \u4f4d\u3002 MPRV Modify PRiVilege MXR Make eXecutable Readable"},{"location":"lab/xv6lab-interrupts/#trap","title":"Trap \u76f8\u5173\u5bc4\u5b58\u5668\uff1a","text":"<p>\u6211\u4eec\u9996\u5148\u5217\u4e3e\u4e00\u4e0b\u5728 Trap \u5904\u7406\u6d41\u7a0b\u4e2d\u7528\u5230\u7684\u5bc4\u5b58\u5668\uff1a</p> <ul> <li>stvec : Supervisor Trap Vector Base Address Register</li> <li>\u5b58\u50a8\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u5730\u5740\u3002\u4e00\u822c\u79f0\u4e4b\u201c\u4e2d\u65ad\u5411\u91cf\u201d\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u7eed\u8bb2\u89e3\u3002</li> <li>sip : Supervisor Interrupt Pending</li> <li>\u8868\u793a\u6709\u54ea\u4e9b\u4e2d\u65ad\u7b49\u5f85\u5904\u7406</li> <li>sie : Supervisor Interrupt Enabled</li> <li>\u8868\u793a\u53ef\u4ee5\u5904\u7406\u90a3\u4e9b\u4e2d\u65ad</li> <li>\u6ce8\u610f\u4e0d\u8981\u4e0e sstatus.SIE \u641e\u6df7\u3002</li> <li>sepc: Supervisor Exception Program Counter</li> <li>\u53d1\u751f\u4e2d\u65ad\u65f6\u7684 PC \u6307\u9488</li> <li>scause: Supervisor Cause</li> <li>\u53d1\u751f\u4e2d\u65ad\u7684\u539f\u56e0</li> <li>stval: Supervisor Trap Value</li> <li>\u53d1\u751f\u4e2d\u65ad\u7684\u989d\u5916\u4fe1\u606f</li> </ul>"},{"location":"lab/xv6lab-interrupts/#stvec","title":"stvec","text":""},{"location":"lab/xv6lab-interrupts/#scause","title":"scause","text":"<p>When a trap is taken into S-mode, scause is written with a code indicating the event that caused the trap.</p> <p></p> <p></p>"},{"location":"lab/xv6lab-interrupts/#sie-sip","title":"sie &amp; sip","text":"<p>The sip register is an 64-bit read/write register containing information on pending interrupts, while sie is the corresponding 64-bit read/write register containing interrupt enable bits.</p> <p>Interrupt cause number i (as reported in CSR scause, Section 4.1.8) corresponds with bit i in both sip and sie. Bits 15:0 are allocated to standard interrupt causes only, while bits 16 and above are designated for platform or custom use.</p> <p></p> <p></p>"},{"location":"lab/xv6lab-interrupts/#sepc","title":"sepc","text":"<p>When a trap is taken into S-mode, sepc is written with the virtual address of the instruction that was interrupted or that encountered the exception.</p>"},{"location":"lab/xv6lab-interrupts/#stval","title":"stval","text":"<p>When a trap is taken into S-mode, stval is written with exception-specific information to assist software in handling the trap.</p> <p>If stval is written with a nonzero value when a breakpoint, address-misaligned, access-fault, or page-fault exception occurs on an instruction fetch, load, or store, then stval will contain the faulting virtual address.</p>"},{"location":"lab/xv6lab-interrupts/#_2","title":"\u786c\u4ef6\u5904\u7406\u6d41\u7a0b","text":""},{"location":"lab/xv6lab-interrupts/#trap_1","title":"\u8fdb\u5165 Trap","text":"<p>\u5f53\u4e00\u4e2a Exception \u53d1\u751f\u65f6\uff0c\u6216\u8005 Hart \u51c6\u5907\u597d\u5904\u7406 Interrupt \u65f6\uff0c Trap \u53d1\u751f\uff0cCPU \u5728\u786c\u4ef6\u7535\u8def\u4e0a\u5b8c\u6210\u4ee5\u4e0b\u51e0\u4ef6\u4e8b\u60c5\uff1a</p> <ol> <li>scause &lt;= {1b'Is_Interrupt, 63b'Cause}</li> <li>stavl &lt;= Trap_Value</li> <li>sepc &lt;= pc</li> <li>sstatus.SPP &lt;= Current_Privilege_Level</li> <li>sstatus.SPIE &lt;= sstatus.SIE</li> <li>sstatus.SIE &lt;= 0</li> <li>pc &lt;= stvec</li> </ol> <p>\u7528\u4e2d\u6587\uff1a\u8bbe\u7f6e <code>scause</code> \u4e0e <code>stval</code>\uff0c\u4fdd\u5b58 PC \u5230 <code>spec</code>\uff0c\u4fdd\u5b58\u5f53\u524d\u7279\u6743\u7ea7(U/S)\u5230 <code>sstatus.SPP</code>\uff0c\u4fdd\u5b58\u5f53\u524d\u4e2d\u65ad\u72b6\u6001\u5230 <code>sstatus.SPIE</code>\uff0c\u5c06\u4e2d\u65ad\u5173\u95ed <code>sstatus.SIE = 0</code>\uff0c\u8df3\u8f6c\u5230 <code>stvec</code>\u3002</p>"},{"location":"lab/xv6lab-interrupts/#sret","title":"sret","text":"<p>RISC-V \u4f7f\u7528 <code>sret</code> \u6307\u4ee4\u4ece Supervisor \u7684 Trap \u4e2d\u9000\u51fa\uff0c\u8be5\u6307\u4ee4\u4f1a\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>sstauts.SIE &lt;= sstatus.SPIE</li> <li>Current_Privilege_Level &lt;= sstauts.SPP</li> <li>pc &lt;= epc</li> </ol> <p>\u7528\u4e2d\u6587\uff1a\u8fd8\u539f <code>sstatus.SIE</code> \u4e3a <code>sstatus.SPIE</code>\uff0c\u5c06\u7279\u6743\u7ea7(U/S)\u8bbe\u7f6e\u4e3a <code>sstauts.SPP</code>\uff0c\u5c06 PC \u8bbe\u7f6e\u4e3a <code>sepc</code>\u3002</p> <p>\u5b9e\u9645\u4e0a sret \u5c31\u662f Trap \u65f6\u4e09\u6b65\u4fdd\u5b58\u7684\u9006\u6b65\u9aa4\uff1a\u8fd8\u539f <code>SIE</code>\u3001\u7279\u6743\u7ea7\u548c PC \u5bc4\u5b58\u5668\u3002</p>"},{"location":"lab/xv6lab-interrupts/#interrupt","title":"\u4ec0\u4e48\u65f6\u5019\u80fd\u5904\u7406 Interrupt","text":"<p>RISC-V \u5b9a\u4e49\u4e86\u4e09\u79cd\u6807\u51c6\u7684\u4e2d\u65ad\uff1aSoftware Interrupt, Timer Interrupt \u548c External Interrupt\uff0c\u5bf9\u5e94 scause \u4e2d\u7684 Exception Code 1, 5, 9, \u5bf9\u5e94 sip/sie \u4e2d\u7684\u7b2c 1, 5, 9 bit.</p> <p>\u8fdb\u5165\u4e2d\u65ad\u7684\u6761\u4ef6\uff1a</p> <ul> <li>(\u5f53\u524d\u8fd0\u884c\u5728 S \u6a21\u5f0f\uff0c\u4e14 <code>sstatus.SIE</code> == 1) \u6216\u8005 \u5f53\u524d\u8fd0\u884c\u5728 U \u6a21\u5f0f\u3002</li> <li>\u4e2d\u65ad\u7c7b\u578b bit i \u5728 <code>sie</code> \u548c <code>sip</code> \u4e2d\u5747\u4e3a 1.</li> </ul> <p>An interrupt i will trap to S-mode if both of the following are true:</p> <p>(a) either the current privilege mode is S and the SIE bit in the sstatus register is set, or the current privilege mode has less privilege than S-mode; and</p> <p>(b) bit i is set in both sip and sie.</p> <p>\u5f53 Software/Timer/External Interrupt \u5230\u8fbe CPU \u65f6\uff0c<code>sip</code> \u4e2d\u5bf9\u5e94\u7684 bit \u4f1a\u88ab\u62c9\u9ad8\uff0c\u7136\u540e CPU \u4f1a\u6309\u7167\u5982\u4e0a\u6761\u4ef6\u8fdb\u884c\u68c0\u67e5\uff0c\u5982\u679c\u7b26\u5408\u6761\u4ef6\uff0c\u5219\u4f1a\u8fdb\u5165 Trap\u3002</p>"},{"location":"lab/xv6lab-interrupts/#trap-handler","title":"Trap Handler","text":""},{"location":"lab/xv6lab-interrupts/#_3","title":"\u4e2d\u65ad\u5411\u91cf","text":"<p>stvec \u89c4\u5b9a\u4e2d\u65ad\u5411\u91cf\u5165\u53e3\u4e00\u5b9a\u662f\u5bf9\u9f50\u5230 4 bytes (\u5373\u6700\u540e\u4e24 bit \u4e3a 0)\uff1b\u540c\u65f6\uff0c\u7528\u8fd9\u4e24\u4f4d\u8868\u793a\u4e24\u79cd\u6a21\u5f0f\uff1a</p> <ol> <li>Direct \u6a21\u5f0f\uff1a\u6240\u6709 Trap \u7684\u5165\u53e3\u5747\u4e3a pc &lt;= BASE</li> <li>Vectored \u6a21\u5f0f\uff1a\u5bf9\u4e8e\u5f02\u6b65\u7684\u4e2d\u65ad\uff0cpc &lt;= BASE + 4 * cause</li> </ol> <p>\u5728\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Direct \u6a21\u5f0f\u3002</p> <p>\u6211\u4eec\u5728 <code>entry.S</code> \u4e2d\u5b9a\u4e49\u4e86\u9002\u7528\u4e8eS mode \u7684\u4e2d\u65ad\u5411\u91cf\u5165\u53e3\u70b9 <code>kernel_trap_entry</code> \uff1a</p> <pre><code>    .globl kernel_trap_entry\n    .align 2\nkernel_trap_entry:\n    // we store all registers in the stack\n    add sp, sp, -0x100\n    sd x0, 0x00(sp)\n    sd x1, 0x08(sp)\n    sd x2, 0x10(sp)\n    // ...\n    sd x30, 0xf0(sp)\n    sd x31, 0xf8(sp)\n\n    mv a0, sp   // make a0 point to the ktrapframe structure\n    call kernel_trap\n\n    // restore all registers\n    //ld x0, 0x00(sp) // do not write to x0\n    ld x1, 0x08(sp)\n    ld x2, 0x10(sp)\n    // ...\n    ld x30, 0xf0(sp)\n    ld x31, 0xf8(sp)\n\n    // restore stack\n    add sp, sp, 0x100\n\n    // return from trap\n    sret\n</code></pre> <p>\u5165\u53e3\u70b9\u5728\u6808\u4e0a\u7533\u8bf7 0x100 bytes \u7684\u7a7a\u95f4\uff0c\u5e76\u4fdd\u5b58\u6240\u6709\u901a\u7528\u5bc4\u5b58\u5668\u5230\u6808\u4e0a\uff0c\u6b64\u65f6\uff0c\u6808\u4e0a\u5f62\u6210\u4e86\u7ed3\u6784\u4f53 <code>struct ktrapframe</code>\uff0c\u7528\u4e8e\u5feb\u901f\u7d22\u5f15\u6808\u4e0a\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u3002\u7136\u540e\uff0c\u5c06 <code>a0</code> \u8bbe\u7f6e\u4e3a <code>sp</code>\uff0c\u8c03\u7528 <code>kernel_trap</code> \uff0c\u8fdb\u5165 C \u4ee3\u7801\u7ee7\u7eed\u5904\u7406 Trap\u3002</p> <p>\u7531\u4e8e RISC-V \u4f7f\u7528 a0 \u4f5c\u4e3a\u4f20\u9012\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u5bc4\u5b58\u5668\uff0ca0 \u6b64\u65f6\u6307\u5411\u6808\u4e0a\u7684 <code>struct ktrapframe</code> \u7ed3\u6784\u4f53\uff0c<code>kernel_trap</code> \u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u5c06\u7b2c\u4e00\u4e2a\u53c2\u6570\u8bbe\u4e3a <code>struct ktrapframe* ktf</code>\u3002</p> <pre><code>void kernel_trap(struct ktrapframe *ktf) {\n    assert(!intr_get());\n\n    if ((r_sstatus() &amp; SSTATUS_SPP) == 0)\n        panic(\"kerneltrap: not from supervisor mode\");\n\n    if (mycpu()-&gt;inkernel_trap) {\n        print_sysregs(true);\n        print_ktrapframe(ktf);\n        panic(\"nested kerneltrap\");\n    }\n    mycpu()-&gt;inkernel_trap = 1;\n\n    uint64 cause          = r_scause();\n    uint64 exception_code = cause &amp; SCAUSE_EXCEPTION_CODE_MASK;\n    if (cause &amp; SCAUSE_INTERRUPT) {\n        switch (exception_code) {\n            case SupervisorTimer:\n                tracef(\"kernel timer interrupt\");\n                set_next_timer();\n                // we never preempt kernel threads.\n                goto free;\n            case SupervisorExternal:\n                tracef(\"s-external interrupt from kerneltrap!\");\n                plic_handle();\n                goto free;\n            default:\n                panic(\"kerneltrap entered with unhandled interrupt. %p\", cause);\n        }\n    }\n\n    print_sysregs(true);\n    print_ktrapframe(ktf);\n\n    panic(\"trap from kernel\");\n\nfree:\n    assert(!intr_get());\n    mycpu()-&gt;inkernel_trap = 0;\n    return;\n}\n</code></pre> <p>\u5728\u8fdb\u5165 <code>kernel_trap</code> \u65f6\uff0cCPU \u7684\u4e2d\u65ad\u4f4d <code>sstatus.SIE</code> \u5e94\u8be5\u662f\u4fdd\u6301\u5173\u95ed\u7684\uff0c\u5e76\u4e14 Previous Privilege \u5e94\u8be5\u662f Supervisor \u6a21\u5f0f\u3002</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u8bfb\u53d6 <code>scause</code> \u5bc4\u5b58\u5668\u5224\u65ad Trap \u662f\u56e0\u4e3a\u4e2d\u65ad\u8fd8\u662f\u5f02\u5e38\u9677\u5165\u7684\uff0c\u5e76\u4e14\u6211\u4eec\u5904\u7406\u65f6\u949f\u4e2d\u65ad\u548c PLIC \u7ba1\u7406\u7684\u5916\u90e8\u4e2d\u65ad\uff0c\u5bf9\u4e8e\u5176\u4ed6\u9884\u671f\u4e4b\u5916\u7684\u884c\u4e3a\uff0c\u6211\u4eec\u53ef\u4ee5\u6253\u5370\u6808\u4e0a\u4fdd\u5b58\u7684 <code>ktramframe</code> \u7ed3\u6784\u4f53\u5e2e\u52a9\u8c03\u8bd5\uff0c\u5e76\u4f7f\u7528 <code>panic</code> \u5b8f\u4e2d\u65ad CPU \u6267\u884c\u3002</p> <p>\u6700\u540e\uff0c\u6211\u4eec\u4ece <code>kernel_trap</code> \u79bb\u5f00\u3002</p> <p>\u4ece C \u8bed\u8a00\u73af\u5883\u9000\u51fa\u540e\uff0c\u6211\u4eec\u4ece\u6808\u4e0a\u6062\u590d\u6240\u6709\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u6062\u590d\u6808\u7a7a\u95f4\uff0c\u7136\u540e\u4f7f\u7528 <code>sret</code> \u9000\u51fa Trap\u3002</p> <p>\u4e0b\u56fe\u5c55\u793a\u4e86 \u8fdb\u5165 Trap\uff0c\u6784\u9020 ktrapframe\uff0c\u7136\u540e\u6062\u590d\u5e76sret\u8fc7\u7a0b\u7684\u6808\u7ed3\u6784\uff1a</p> <p></p> <p>Lab TODO: </p> <p>\u4fee\u6539 <code>main.c</code>\uff0c\u5728\u542f\u52a8\u6d41\u7a0b\u4e2d\u52a0\u5165 <code>asm volatile(\"ebreak\")</code>\uff0c\u5e76\u5728 <code>kernel_trap</code> \u4e2d\u5904\u7406\u8be5\u5f02\u5e38\uff0c\u5e76\u5c06 s0 \u5bc4\u5b58\u5668\u7684\u503c\u6539\u4e3a 0x114514\uff0c\u4f7f\u4e4b\u540e\u7684 <code>printf</code> \u8f93\u51fa\u8be5\u5bc4\u5b58\u5668\u7684\u503c\u3002</p>"},{"location":"lab/xv6lab-interrupts/#interrupt_1","title":"Interrupt","text":"<p>RISC-V spec \u5b9a\u4e49\u4e86\u6bcf\u4e2a Hart \u6709\u4e09\u4e2a\u6807\u51c6\u7684\u4e2d\u65ad\uff1a\u65f6\u949f\u4e2d\u65ad\u3001\u8f6f\u4ef6\u4e2d\u65ad\u548c\u5916\u90e8\u4e2d\u65ad\u3002</p>"},{"location":"lab/xv6lab-interrupts/#_4","title":"\u65f6\u949f\u4e2d\u65ad","text":"<p>\u65f6\u949f\u4e2d\u65ad\u53ef\u4ee5\u7406\u89e3\u4e3a\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u6267\u884c\u4e00\u6b21\u7684\u7a0b\u5e8f\u3002\u5373\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f1a\u56fa\u5b9a\u89e6\u53d1\u4e00\u6b21\u7684\u4e2d\u65ad\u3002\u5728\u65f6\u949f\u4e2d\u65ad\u7684\u5904\u7406\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5b8c\u6210\u8fdb\u7a0b\u8c03\u5ea6\u7b49\u64cd\u4f5c\u3002</p> <p>RISC-V \u5e73\u53f0\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b9e\u65f6\u7684\u65f6\u95f4\u8ba1\u6570\u5668: <code>mtime</code> \u5bc4\u5b58\u5668\uff0c\u8be5\u5bc4\u5b58\u5668\u4ee5\u6052\u5b9a\u7684\u9891\u7387\u589e\u957f\uff0c\u5e76\u4e14\u5728\u6240\u6709\u6838\u5fc3\u4e4b\u95f4\u5171\u4eab\u3002\u53e6\u5916\uff0cRISC-V \u5bf9\u6bcf\u4e2a\u6838\u5fc3\u63d0\u4f9b\u4e86\u4e00\u4e2a <code>mtimecmp</code> \u5bc4\u5b58\u5668\uff0c\u6bcf\u5f53 <code>mtime &gt;= mtimecmp</code> \u65f6\uff0c\u8be5\u6838\u5fc3\u5c31\u4f1a\u62c9\u9ad8\u65f6\u949f\u4e2d\u65ad\u7684 <code>sip.STIP</code> bit\uff0c\u5982\u679c\u6838\u5fc3\u6ee1\u8db3\u8fdb\u5165\u4e2d\u65ad Trap \u7684\u6761\u4ef6\uff0c\u5219\u4f1a\u8fdb\u5165\u65f6\u949f\u4e2d\u65ad\u3002</p> <p>SBI \u63d0\u4f9b\u4e86\u4e00\u4e2a SBI call\uff1a<code>SBI_SET_TIMER</code> \u5141\u8bb8 Supervisor \u8f6f\u4ef6\u8bbe\u7f6e <code>mtimecmp</code> \u5bc4\u5b58\u5668\u3002\u5728\u5df2\u77e5 mtime \u5bc4\u5b58\u5668\u7684\u589e\u957f\u9891\u7387\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97 10ms \u540e mtime \u4f1a\u589e\u957f\u591a\u5c11\uff0c\u5e76\u8bbe\u7f6e mtimecmp \u4e3a\u8be5\u503c\uff0c\u6211\u4eec\u5373\u53ef\u5728 10ms \u540e\u6536\u5230\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\u3002\u5728\u6bcf\u6b21\u8fdb\u5165\u65f6\u949f\u4e2d\u65ad\u65f6\uff0c\u6211\u4eec\u518d\u6b21\u8ba1\u7b97\u4e0b\u6b21\u7684 mtimecmp\uff0c\u5373\u53ef\u5b9e\u73b0\u6bcf 10ms \u6536\u5230\u4e00\u6b21\u65f6\u95f4\u4e2d\u65ad\u3002</p> <p>\u65f6\u949f\u90e8\u5206\u7684\u4ee3\u7801\u4f4d\u4e8e <code>timer.c</code>\u3002</p> <p>\u5728\u521d\u59cb\u5316\u65f6\u949f\u4e2d\u65ad\u65f6\uff0c\u6211\u4eec\u901a\u8fc7 SBI call <code>SET_TIMER</code> \u8bbe\u7f6e <code>mtimecmp</code>\uff0c\u5e76\u5728 <code>sie</code> \u4e2d\u542f\u7528\u65f6\u949f\u4e2d\u65ad <code>SIE_STIE</code>\u3002</p> <p>\u5728 <code>kernel_trap</code> \u4e2d\u5904\u7406\u65f6\u949f\u4e2d\u65ad\u65f6\uff0c\u6211\u4eec\u8ba1\u7b97\u4e0b\u4e00\u6b21\u7684 <code>mtimecmp</code>\uff0c\u5e76\u518d\u6b21 SBI call <code>SET_TIMER</code>\uff0c\u5faa\u73af\u5f80\u590d\u3002</p> <p>Lab \u5b9e\u9a8c</p> <p>\u8bf7\u4f60\u5c06 <code>TICKS_PER_SEC</code> \u5b8f\u4fee\u6539\u4e3a 1\uff0c<code>make run</code> \u540e\u89c2\u5bdf\u6bcf\u6b21\u89e6\u53d1\u65f6\u949f\u4e2d\u65ad\u65f6\u7684 cycle \u8bfb\u6570\u3002</p> <p>\u6ce8\u91ca\u6389 <code>trap.c</code> \u4e2d <code>kernel_trap</code> \u8c03\u7528 <code>set_next_timer</code>\uff0c\u5e76\u518d\u6b21 <code>make run</code> \u89c2\u5bdf\u6bcf\u6b21\u89e6\u53d1\u65f6\u949f\u4e2d\u65ad\u65f6\u7684 cycle \u8bfb\u6570\u3002</p> <p>\u8bf7\u89e3\u91ca\u4f60\u7684\u53d1\u73b0\u3002</p>"},{"location":"lab/xv6lab-interrupts/#plic-platform-level-interrupt-controller","title":"PLIC (Platform-Level Interrupt Controller)","text":"<p>PLIC \u662f RISC-V \u5e73\u53f0\u4e0a\u7528\u4e8e\u7ba1\u7406\u5916\u90e8\u4e2d\u65ad\u7684 IP \u6838\uff0c\u6bcf\u4e2a RISC-V \u5e73\u53f0\u62e5\u6709\u591a\u4e2a\u6838\u5fc3 (Hart)\uff0c\u800c\u6bcf\u4e2a\u5e73\u53f0\u4e00\u822c\u53ea\u6709\u4e00\u4e2a PLIC\u3002</p> <p>Specification: https://github.com/riscv/riscv-plic-spec/blob/master/riscv-plic.adoc</p>"},{"location":"lab/xv6lab-interrupts/#plic","title":"PLIC \u7ed3\u6784","text":"<p>PLIC \u7ba1\u7406 1~1023 \u4e2a\u4e2d\u65ad\u6e90\uff0c\u6bcf\u4e2a\u4e2d\u65ad\u6e90\u62e5\u6709\u4e00\u4e2a\u4f18\u5148\u7ea7 Priority \u3002PLIC \u5c06\u80fd\u591f\u63a5\u6536\u4e2d\u65ad\u7684\u5bf9\u8c61 (Interrupt Targets) \u79f0\u4e3a Hart Context (where a hart context is a given privilege mode on a given hart)\uff0c\u6bcf\u4e2a Context \u5bf9\u5e94\u7740\u4e00\u4e2a Hart \u548c\u4e00\u4e2a\u7279\u6743\u7ea7\u522b\u3002\u7531\u4e8e\u76ee\u524d RISC-V \u6ca1\u6709\u89c4\u5b9a User-Mode Interrupt\uff0c\uff08\u4f8b\u5982 RISC-V privilege spec \u53ea\u89c4\u5b9a\u4e86 mie/mip \u548c sie/sip\uff0c\u5bf9\u5e94\u7740 Machine Mode \u548c Supervisor Mode \u7684\u4e2d\u65ad\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u4e2a\u6838\u5fc3\u62e5\u6709\u4e24\u4e2a Context\u3002</p> <p>PLIC \u80fd\u591f\u7ba1\u7406 0~15871 \u4e2a Context\uff0c\u80fd\u8bbe\u7f6e\u6bcf\u4e2a\u4e2d\u65ad\u6e90\u662f\u5426\u5141\u8bb8\u8def\u7531\u81f3\u67d0\u4e2a Context (Enabled Bit)\uff0c\u6bcf\u4e2a Context \u80fd\u63a5\u6536\u7684 Priority Threshold\u3002</p> <p>PLIC \u4f1a\u62c9\u8d77 Hart \u7684 mip.MEIP/sip.SEIP bit\uff0c\u800c\u8be5 hart \u662f\u5426\u8fdb\u5165 Interrupt \u7684 Trap \u7531\u4e0a\u8ff0 <code>\u8fdb\u5165\u4e2d\u65ad\u7684\u6761\u4ef6</code> \u51b3\u5b9a\u3002</p> <p></p>"},{"location":"lab/xv6lab-interrupts/#memory-mapped-register","title":"Memory-Mapped Register","text":"<p>PLIC \u4f7f\u7528 Memory-Mapped Register \u5411\u7cfb\u7edf\u66b4\u9732\u7ba1\u7406\u63a5\u53e3\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5bc4\u5b58\u5668 (\u6d88\u6b67\u4e49\uff1a\u6b64\u5904\u7684\u5bc4\u5b58\u5668\u4e0d\u662f\u7279\u6307 RISC-V \u6838\u5fc3\u7684 x0 - x31 General Purpose Registers)\uff0c\u6211\u4eec\u4f7f\u7528\u504f\u79fb\u91cf\u6765\u5b9a\u4f4d\u6bcf\u4e2a\u5bc4\u5b58\u5668\u3002\u901a\u5e38\uff0c\u8fd9\u79cd IP \u6838\u6709\u7740\u56fa\u5b9a\u7684\u57fa\u5730\u5740\uff0c\u5728 QEMU \u4e0a\uff0c\u8fd9\u4e2a\u5730\u5740\u662f <code>0x0c00_0000</code></p> <pre><code>gef &gt; monitor info mtree\n    000000000c000000-000000000c5fffff (prio 0, i/o): riscv.sifive.plic\n</code></pre> <p>\u4f8b\u5982\uff0cSpecification \u4e2d\u7684 Memory Map \u89c4\u5b9a\uff0c<code>base + 0x4 * i</code> \u662f\u7b2c i \u4e2a\u4e2d\u65ad\u6e90\u7684</p> <pre><code>base + 0x000000: Reserved (interrupt source 0 does not exist)\nbase + 0x000004: Interrupt source 1 priority\nbase + 0x000008: Interrupt source 2 priority\n...\nbase + 0x000FFC: Interrupt source 1023 priority\n</code></pre> <p>\u5728 <code>plicinit</code> \u4e2d\uff0c\u6211\u4eec\u5411 <code>base + 10*4 = 1</code> \u8bbe\u7f6e UART0 (10\u53f7\u4e2d\u65ad) \u7684 Interrupt Priority \u4e3a 1\uff0c\u5728 <code>plicinithart</code> \u4e2d\uff0c\u6211\u4eec\u5c06\u8be5 Hart \u7684 S-mode Context \u5141\u8bb8\u6765\u81ea 10 \u53f7\u4e2d\u65ad\u3001\u5e76\u8bbe\u7f6e Priority Threshold \u4e3a 0\uff0c\u6700\u540e\uff0c\u542f\u7528\u8be5\u6838\u5fc3\u7684 <code>sie.SEIE</code> \u4f4d\uff0c\u8868\u793a\u8be5\u6838\u5fc3\u5141\u8bb8 Supervisor-Mode External Interrupt\u3002</p> <p>Lab \u7ec3\u4e60</p> <p>\u8bf7\u5bf9\u7167 PLIC Specification \u4e2d\u7684 Memory Map \u89e3\u91ca <code>plic.c</code> \u4e2d\u5bf9\u6240\u6709 PLIC \u7684 Memory-Mapped Register \u7684\u8bbf\u95ee\uff0c\u5e76\u89e3\u91ca\u5b83\u4eec\u7684\u610f\u4e49\u3002</p>"},{"location":"lab/xv6lab-interrupts/#claim-complete","title":"Claim &amp; Complete","text":"<p>\u5728 Hart \u56e0\u4e3a External Interrupt \u9677\u5165 Trap \u540e\uff0cHart \u9700\u8981\u5411 PLIC \u7533\u8bf7\u5904\u7406\u8be5\u4e2d\u65ad\u3002\u5728\u5904\u7406\u5b8c\u6210\u540e\uff0cHart \u8fd8\u9700\u8981\u5411 PLIC \u7533\u660e\u8be5\u4e2d\u65ad\u5904\u7406\u5b8c\u6bd5\u3002</p> <p></p>"},{"location":"lab/xv6lab-paging/","title":"RISC-V \u9875\u8868\u6a21\u578b &amp; xv6 \u5185\u6838\u9875\u8868","text":""},{"location":"lab/xv6lab-paging/#satp","title":"satp","text":"<p>satp (Supervisor Address Translation and Protection) \u5bc4\u5b58\u5668\u662f\u63a7\u5236 S mode \u548c U mode \u4e0b\u5730\u5740\u7ffb\u8bd1\u7684\u5bc4\u5b58\u5668\uff0c\u5176\u4e2d\u5305\u542b\u4e09\u4e2a\u5c5e\u6027\uff1a<code>MODE</code>, <code>ASID</code> \u548c <code>PPN</code>\u3002</p> <p>This register holds the physical page number (PPN) of the root page table, i.e., its supervisor physical address divided by 4 KiB; an address space identifier (ASID), which facilitates address-translation fences on a per-address-space basis; and the MODE field, which selects the current address-translation scheme. Further details on the access to this register are described in Section 3.1.6.5.</p> <p></p> <p>Mode \u8868\u793a\u4f7f\u7528\u7684\u5730\u5740\u7ffb\u8bd1\u6a21\u5f0f\uff0c0 \u5219\u8868\u793a\u7981\u7528\u5730\u5740\u7ffb\u8bd1\uff0c\u6240\u6709\u8bf7\u6c42\u7684\u5730\u5740\u5747\u4f5c\u4e3a\u7269\u7406\u5730\u5740\u770b\u5f85\uff0c<code>PPN</code> \u8868\u793a\u6839\u9875\u8868\u7684\u57fa\u5730\u5740\u3002\u5728\u6211\u4eec\u7684\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Sv39 \u4f5c\u4e3a\u9875\u8868\u6a21\u5f0f\u3002</p> <p>\u6211\u4eec\u6682\u4e14\u4e0d\u9700\u8981\u7406\u89e3 ASID \u7684\u4f5c\u7528\u3002</p> <p></p>"},{"location":"lab/xv6lab-paging/#sv39","title":"Sv39","text":"<p>RISC-V \u7684 Sv39 \u6a21\u5f0f\u652f\u6301\u4e86 39-bit \u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u6bcf\u4e2a\u9875\u9762\u5927\u5c0f 4KiB\u3002</p> <p>\u6709\u6548\u7684\u865a\u62df\u5730\u5740\u4e3a 64 \u4f4d\uff0c\u4f46\u662f 63-39 \u4f4d\u5fc5\u987b\u4e0e\u7b2c 38 \u4f4d\u76f8\u540c\uff0c\u5426\u5219\u4f1a\u4ea7\u751f Page Fault \u5f02\u5e38\u3002\u6240\u4ee5\uff0cSv39 \u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e00\u5171\u4e3a <code>(1 &lt;&lt; 39) = 512 GiB</code> \u7684\u7a7a\u95f4\uff0c\u5176\u4e2d\u5206\u4e3a\u9ad8\u5730\u5740\u548c\u4f4e\u5730\u5740\u5404 <code>256 GiB</code> \u7684\u7a7a\u95f4\u3002</p> <p>Sv39 implementations support a 39-bit virtual address space, divided into 4 KiB pages. An Sv39 address is partitioned as shown in Figure 4.19. Instruction fetch addresses and load and store effective addresses, which are 64 bits, must have bits 63\u201339 all equal to bit 38, or else a page-fault exception will occur. The 27-bit VPN is translated into a 44-bit PPN via a three-level page table, while the 12-bit page offset is untranslated.</p> <p></p> <p>\u865a\u62df\u5730\u5740\u5206\u4e3a\u56db\u90e8\u5206\uff1aVPN[2-0] (Virtual Page Number) \u548c page offset\u3002\u4e09\u7ea7 VPN \u8868\u793a\u5728\u4e09\u7ea7\u9875\u8868\u4e2d\u7684 index, \u800c page offset \u8868\u793a\u5f53\u524d\u5730\u5740\u5728\u88ab\u7ffb\u8bd1\u7684\u9875\u9762\u4e2d\u7684\u504f\u79fb\u91cf\u3002</p> <p>Sv39 \u4e2d\u7684 PTE \u957f\u5ea6\u4e3a 8-byte\uff0c\u5206\u4e3a\u4e24\u90e8\u5206\uff1aPPN \u548c Flags\u3002PPN (Physical Page Number) \u548c\u865a\u62df\u5730\u5740\u4e2d\u7684 page offset \u7ec4\u6210\u6700\u7ec8\u7684\u7269\u7406\u5730\u5740\uff0cFlags \u5219\u8868\u793a\u8be5\u865a\u62df\u5730\u5740\u9875\u9762\u7684\u8bbf\u95ee\u6743\u9650\u7b49\u4fe1\u606f\u3002</p> <p>Flags \u5b9a\u4e49\u5982\u4e0b\uff1a</p> <ul> <li>D, A: Dirty, Accessed\u3002\u8868\u793a\u8be5\u9875\u9762\u6700\u8fd1\u88ab\u8bbf\u95ee / \u5199\u5165\u8fc7\u3002</li> <li>G: Global\u3002\u8868\u793a\u8be5\u6620\u5c04\u5173\u7cfb\u5728\u6240\u6709\u9875\u8868\u4e2d\u5747\u5b58\u5728\u3002</li> <li>U: User\u3002\u8868\u793a\u8be5\u6620\u5c04\u5173\u7cfb\u5141\u8bb8\u5728\u7528\u6237\u6743\u9650\u4e0b\u8bbf\u95ee\u3002</li> <li>V: Valid\u3002\u8be5 bit \u8868\u793a\u6b64 PTE \u4e3a\u6709\u6548 PTE\uff0c\u5426\u5219\u6574\u4e2a PTE \u89c6\u4e3a\u65e0\u6548\u3002</li> <li>R, W, X: Read, Write, Executable \u6743\u9650</li> </ul> <p>RWX \u5b9a\u4e49\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6ce8\u610f <code>XWR == 3'b000</code> \u7684\u60c5\u51b5\u8868\u793a\u7269\u7406\u5730\u5740 [PPN: 12b0] \u4e3a\u4e0b\u4e00\u7ea7\u9875\u8868\u7684\u57fa\u5730\u5740\u3002</p> <p></p> <p>\u5730\u5740\u7ffb\u8bd1\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>See also: riscv-privilege.pdf, 4.3.2 Virtual Address Translation Process</p> <p>\u6587\u5b57\u63cf\u8ff0\uff0c\u4ee5\u4e0b <code>{xx | yy}</code> \u8868\u793a\u5728 <code>xx</code> bit \u53f3\u8fb9\u5e76\u4e0a <code>yy</code> bit\uff0c\u7c7b\u4f3c\u4e8e Verilog \u7684\u5199\u6cd5\u3002</p> <ol> <li>\u5206\u89e3 Virtual Address: <code>{ 25'signed_ext, 9'VPN2, 9'VPN1, 9'VPN0, 12'pgoff} = 64'VirtualAddress</code></li> <li>\u5c06 satp \u5bc4\u5b58\u5668\u4e2d\u7b2c\u4e8c\u7ea7\u9875\u8868\u7684\u57fa\u5730\u5740\u53d6\u51fa</li> <li>\u4f7f\u7528 VPN2 \u4f5c\u4e3a index \u5728\u7b2c\u4e8c\u7ea7\u9875\u8868\u4e2d\u627e\u5230 PTE\u3002</li> </ol> <p>\u8fd9\u4e00\u6b65\u7b49\u6548\u4e8e C \u4ee3\u7801\uff1a<code>uint64 pte2 = *(uint64*)(satp.base + VPN2 * 8);</code></p> <ol> <li>\u5982\u679c <code>pte2.WXR != 3'b000</code>\uff0c\u5219\u8868\u793a\u8be5 PTE \u4e3a 1GiB \u5927\u9875\u6620\u5c04\u3002</li> </ol> <p>\u68c0\u67e5 PPN \u662f\u5426\u5bf9\u9f50\u5230 1GiB\uff0caka\uff1a<code>pte2.PPN1 == 9'b0 &amp;&amp; pte2.PPN0 == 9'b0</code>\u3002\u5982\u679c\u6ee1\u8db3\uff0c\u5219\u8df3\u8f6c\u81f3 10.\uff0c\u5426\u5219 Page Fault\u3002</p> <ol> <li>\u5426\u5219\uff0c<code>{pte2.PPN, 12'b0}</code> \u4e3a\u7b2c\u4e00\u7ea7\u9875\u8868\u7684\u57fa\u5730\u5740</li> <li>\u4f7f\u7528 VPN1 \u4f5c\u4e3a index \u5728\u7b2c\u4e00\u7ea7\u9875\u8868\u4e2d\u627e\u5230 PTE\u3002</li> </ol> <p>\u8fd9\u4e00\u6b65\u7b49\u6548\u4e8e C \u4ee3\u7801\uff1a<code>uint64 pte1 = *(uint64*)((pte2.ppn &lt;&lt; 12) + VPN1 * 8);</code></p> <ol> <li>\u5982\u679c <code>pte1.WXR != 3'b000</code>\uff0c\u5219\u8868\u793a\u8be5 PTE \u4e3a 2MiB \u5927\u9875\u6620\u5c04\u3002</li> </ol> <p>\u68c0\u67e5 PPN \u662f\u5426\u5bf9\u9f50\u5230 2MiB\uff0caka\uff1a<code>pte2.PPN0 == 9'b0</code>\u3002\u5982\u679c\u6ee1\u8db3\uff0c\u5219\u8df3\u8f6c\u81f3 10.\uff0c\u5426\u5219 Page Fault\u3002</p> <ol> <li>\u5426\u5219\uff0c<code>{pte1.PPN | 12'b0}</code> \u4e3a\u7b2c\u96f6\u7ea7\u9875\u8868\u7684\u57fa\u5730\u5740</li> <li>\u4f7f\u7528 VPN0 \u4f5c\u4e3a index \u5728\u7b2c\u96f6\u7ea7\u9875\u8868\u4e2d\u627e\u5230 PTE\u3002</li> </ol> <p>\u8fd9\u4e00\u6b65\u7b49\u6548\u4e8e C \u4ee3\u7801\uff1a<code>uint64 pte0 = *(uint64*)((pte1.ppn &lt;&lt; 12) + VPN0 * 8);</code></p> <ol> <li> <p>\u5f97\u5230\u6700\u7ec8\u7684\u7269\u7406\u5730\u5740\uff1a<code>PA = (final_pte.ppn &lt;&lt; 12) | final_page_offset</code>\uff0c</p> <p>\u5982\u679c\u4e3a 2MiB \u5927\u9875\u6620\u5c04\uff0c<code>final_page_offset = {9'bVPN0, 12'bpgoff}</code>\u3002</p> <p>\u5982\u679c\u4e3a 1GiB \u5927\u9875\u6620\u5c04\uff0c<code>final_page_offset = {9'bVPN1, 9'bVPN0, 12'bpgoff}</code></p> <p>\u5426\u5219\uff0c<code>final_page_offset = pgoff</code></p> </li> <li> <p>\u6743\u9650\u68c0\u67e5\uff1a\u68c0\u67e5 <code>final_pte.rwx</code> \u662f\u5426\u4e0e\u8bbf\u5b58\u8bf7\u6c42\u76f8\u540c\u3002</p> </li> </ol>"},{"location":"lab/xv6lab-paging/#a-d","title":"A &amp; D","text":"<p>\u6bcf\u4e2a\u53f6 PTE \u5305\u542b Accessed \u548c Dirty \u4e24\u4e2a bits\uff1a</p> <ul> <li>A \u8868\u793a\uff1a\u81ea\u4ece\u4e0a\u6b21 A bit \u88ab\u6e05\u96f6\uff0c\u8be5\u865a\u62df\u9875\u9762\u66fe\u7ecf\u88ab\u8bfb\u53d6\u3001\u5199\u5165\u3001\u53d6\u6307 \uff08Instruction Fetch\uff09\u3002</li> <li>D \u8868\u793a\uff1a\u81ea\u4ece\u4e0a\u6b21 D bit \u88ab\u6e05\u96f6\uff0c\u8be5\u865a\u62df\u9875\u9762\u66fe\u7ecf\u88ab\u5199\u5165\u3002</li> </ul> <p>RISC-V \u786c\u4ef6\u5b9e\u73b0\u5141\u8bb8\u4e24\u79cd\u65b9\u5f0f\u6765\u66f4\u65b0 A &amp; D bits:</p> <p>\u5f53\u8bbf\u95ee\u7684\u865a\u62df\u9875\u9762\u88ab\u8bbf\u95ee\u65f6\uff0cA bit \u662f 0\u3001\u6216\u88ab\u5199\u5165\u65f6\uff0cD bit \u662f 0\uff1a</p> <ol> <li>\u53d1\u51fa PageFault\uff0cSupervisor \u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\u9700\u8981\u624b\u52a8\u8bbe\u7f6e A / D bits.</li> <li>\u7531\u786c\u4ef6\u8bbe\u7f6e A / D bits.</li> </ol> <p>Supervisor \u8f6f\u4ef6\u5e94\u5f53\u6b63\u786e\u5904\u7406\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u3002</p> <p>Each leaf PTE contains an accessed (A) and dirty (D) bit.</p> <ul> <li>The A bit indicates the virtual page has been read, written, or fetched from since the last time the A bit was cleared.</li> <li>The D bit indicates the virtual page has been written since the last time the D bit was cleared.</li> </ul> <p>Two schemes to manage the A and D bits are permitted:</p> <p>\u00881. When a virtual page is accessed and the A bit is clear, or is written and the D bit is clear, a page-fault exception is raised. \u00882. When a virtual page is accessed and the A bit is clear, or is written and the D bit is clear, the implementation sets the corresponding bit(s) in the PTE.</p> <p>See also: \"riscv-privilege.pdf\" \"4.3.1 Addressing and Memory Protection\"</p>"},{"location":"lab/xv6lab-paging/#_1","title":"\u6743\u9650\u68c0\u67e5","text":"<p>\u51ed\u76f4\u89c9\u7684\uff0c\u8bfb\u53d6\u7684\u9875\u9762\u8981\u5e26\u6709 R bit\uff0c\u5199\u5165\u7684\u9875\u9762\u8981\u5e26\u6709 W bit\uff0c\u6267\u884c\u7684\u9875\u9762\u8981\u5e26\u6709 X bit\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u4e00\u4e2a\u9875\u9762\u7684\u6743\u9650\u5e26\u6709 U bit\uff0c\u5e76\u4e14\u73b0\u5728 CPU \u6838\u5fc3\u8fd0\u884c\u5728 S mode \u4e0b\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6b64\u8fdb\u884c\u989d\u5916\u68c0\u67e5\uff1a\u5982\u679c <code>sstatus.SUM == 1</code> \u5219\u8bbf\u95ee\u88ab\u5141\u8bb8\uff0c\u5426\u5219 Page Fault.</p> <p>The SUM (permit Supervisor User Memory access) bit modifies the privilege with which S-mode loads and stores access virtual memory. When SUM=0, S-mode memory accesses to pages that are accessible by U-mode (U=1 in Figure 4.18) will fault. When SUM=1, these accesses are permitted.</p> <p>\u901a\u5e38\u6765\u8bf4\uff0cS mode \u4e00\u822c\u8fd0\u884c\u5728 <code>sstatus.SUM == 0</code> \u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u9875\u8868\u53bb\u8bbf\u95ee\u7528\u6237\u6570\u636e\u65f6\uff0c\u6211\u4eec\u4f1a\u5c06\u8be5 flag \u7f6e 1\uff0c\u5e76\u5728\u8bbf\u95ee\u7ed3\u675f\u540e\u6e05\u96f6\u3002\u8be5\u8fc7\u7a0b\u4e00\u822c\u88ab\u79f0\u4e3a uaccess \u539f\u8bed (primitive).</p> <p>See also: https://github.com/torvalds/linux/blob/master/arch/riscv/include/asm/uaccess.h</p>"},{"location":"lab/xv6lab-paging/#risc-v","title":"RISC-V \u7269\u7406\u5730\u5740\u5e03\u5c40","text":"<p>RISC-V \u5c06\u7269\u7406\u5185\u5b58 (DDR / DRAM) \u7684\u8d77\u59cb\u5730\u5740\u6620\u5c04\u5230\u7269\u7406\u5730\u5740 <code>0x8000_0000</code> \u4e0a\uff0c\u800c\u4e0d\u662f\u7269\u7406\u5730\u5740 <code>0x0000_0000</code> \u5904\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u6709 128 MiB (0x0800_0000) \u7684 DRAM \u5927\u5c0f\uff0cRISC-V \u6838\u5fc3\u4f1a\u5c06 DRAM \u7a7a\u95f4\u6620\u5c04\u5230 <code>[0x8000_0000, 0x8800_0000)</code> \u4e0a\u9762\u3002</p> <p>\u5bf9\u4e8e QEMU \u7684 virt \u673a\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u7ffb\u9605 qemu \u7684\u6e90\u4ee3\u7801\u627e\u5230\u5176\u7269\u7406\u5730\u5740\u7684\u6620\u5c04\uff1a</p> <pre><code>static const MemMapEntry virt_memmap[] = {\n    [VIRT_DEBUG] =        {        0x0,         0x100 },\n    [VIRT_MROM] =         {     0x1000,        0xf000 },\n    [VIRT_TEST] =         {   0x100000,        0x1000 },\n    [VIRT_RTC] =          {   0x101000,        0x1000 },\n    [VIRT_CLINT] =        {  0x2000000,       0x10000 },\n    [VIRT_ACLINT_SSWI] =  {  0x2F00000,        0x4000 },\n    [VIRT_PCIE_PIO] =     {  0x3000000,       0x10000 },\n    [VIRT_PLATFORM_BUS] = {  0x4000000,     0x2000000 },\n    [VIRT_PLIC] =         {  0xc000000, VIRT_PLIC_SIZE(VIRT_CPUS_MAX * 2) },\n    [VIRT_APLIC_M] =      {  0xc000000, APLIC_SIZE(VIRT_CPUS_MAX) },\n    [VIRT_APLIC_S] =      {  0xd000000, APLIC_SIZE(VIRT_CPUS_MAX) },\n    [VIRT_UART0] =        { 0x10000000,         0x100 },\n    [VIRT_VIRTIO] =       { 0x10001000,        0x1000 },\n    [VIRT_FW_CFG] =       { 0x10100000,          0x18 },\n    [VIRT_FLASH] =        { 0x20000000,     0x4000000 },\n    [VIRT_IMSIC_M] =      { 0x24000000, VIRT_IMSIC_MAX_SIZE },\n    [VIRT_IMSIC_S] =      { 0x28000000, VIRT_IMSIC_MAX_SIZE },\n    [VIRT_PCIE_ECAM] =    { 0x30000000,    0x10000000 },\n    [VIRT_PCIE_MMIO] =    { 0x40000000,    0x40000000 },\n    [VIRT_DRAM] =         { 0x80000000,           0x0 },\n};\n</code></pre> <p>\u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 gdb \u8fde\u63a5\u5230 qemu \u4e0a\u65f6\uff0c\u8f93\u5165 <code>monitor info mtree -f</code> \u67e5\u770b Memory Tree \u7684\u7ed3\u6784\uff1a</p> <pre><code>(qemu) gef\u27a4  monitor info mtree -f\nFlatView #0\n AS \"memory\", root: system\n AS \"cpu-memory-0\", root: system\n Root memory region: system\n  0000000000001000-000000000000ffff (prio 0, rom): riscv_virt_board.mrom\n  0000000000100000-0000000000100fff (prio 0, i/o): riscv.sifive.test\n  0000000000101000-0000000000101023 (prio 0, i/o): goldfish_rtc\n  0000000002000000-0000000002003fff (prio 0, i/o): riscv.aclint.swi\n  0000000002004000-000000000200bfff (prio 0, i/o): riscv.aclint.mtimer\n  0000000003000000-000000000300ffff (prio 0, i/o): gpex_ioport_window\n  000000000c000000-000000000c5fffff (prio 0, i/o): riscv.sifive.plic\n  0000000010000000-0000000010000007 (prio 0, i/o): serial\n  0000000010001000-00000000100011ff (prio 0, i/o): virtio-mmio\n  0000000010002000-00000000100021ff (prio 0, i/o): virtio-mmio\n  0000000010003000-00000000100031ff (prio 0, i/o): virtio-mmio\n  0000000010004000-00000000100041ff (prio 0, i/o): virtio-mmio\n  0000000010005000-00000000100051ff (prio 0, i/o): virtio-mmio\n  0000000010006000-00000000100061ff (prio 0, i/o): virtio-mmio\n  0000000010007000-00000000100071ff (prio 0, i/o): virtio-mmio\n  0000000010008000-00000000100081ff (prio 0, i/o): virtio-mmio\n  0000000010100000-0000000010100007 (prio 0, i/o): fwcfg.data\n  0000000010100008-0000000010100009 (prio 0, i/o): fwcfg.ctl\n  0000000010100010-0000000010100017 (prio 0, i/o): fwcfg.dma\n  0000000020000000-0000000021ffffff (prio 0, romd): virt.flash0\n  0000000022000000-0000000023ffffff (prio 0, romd): virt.flash1\n  0000000030000000-000000003fffffff (prio 0, i/o): pcie-mmcfg-mmio\n  0000000040000000-000000007fffffff (prio 0, i/o): gpex_mmio_window @0000000040000000\n  0000000080000000-000000009fffffff (prio 0, ram): riscv_virt_board.ram\n  0000000400000000-00000007ffffffff (prio 0, i/o): gpex_mmio_window @0000000400000000\n</code></pre> <p>\u5728\u6211\u4eec\u7684\u64cd\u4f5c\u7cfb\u7edf\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8 DRAM \u7a7a\u95f4\u548c\u4e00\u4e9b\u5916\u8bbe(PLIC, UART)\u5373\u53ef</p> <code>Base</code> Size Description <code>0x0000_1000</code> <code>0x0000_f000</code> BootROM <code>0x0c00_0000</code> <code>0x0060_0000</code> PLIC <code>0x1000_0000</code> <code>0x0000_0100</code> Serial UART <code>0x8000_0000</code> DRAM Size DRAM <p>\u5b9e\u9645\u4e0a OpenSBI \u5728\u52a0\u8f7d\u65f6\u4e5f\u4f1a\u5360\u7528\u4e00\u90e8\u5206 DRAM \u7a7a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 gdb \u4e0b\u7528 <code>monitor info roms</code> \u67e5\u770b QEMU \u542f\u52a8\u65f6\u6240\u52a0\u8f7d\u7684\u6587\u4ef6\uff1a</p> <pre><code>(qemu) gef\u27a4  monitor info roms\naddr=0000000000001000 size=0x000028 mem=rom name=\"mrom.reset\"\naddr=0000000000001028 size=0x000030 mem=rom name=\"mrom.finfo\"\naddr=0000000080000000 size=0x042868 mem=ram name=\"/usr/share/qemu/opensbi-riscv64-generic-fw_dynamic.bin\"\naddr=0000000080200000 size=0x002790 mem=ram name=\"build/kernel ELF program header segment 1\"\naddr=0000000080203000 size=0x009048 mem=ram name=\"build/kernel ELF program header segment 2\"\naddr=000000009fe00000 size=0x0012b8 mem=ram name=\"fdt\"\n</code></pre> <p>\u5176\u4e2d\uff0c<code>0x1000</code> \u4e0a\u653e\u7f6e\u7684\u662f BootROM\uff0c\u662f CPU \u4e0a\u7535\u540e\u7684\u6267\u884c\u7684\u7b2c\u4e00\u5757\u4ee3\u7801\u3002\uff08\u7c7b\u4f3c\u4e8e\u5728\u7ec4\u6210\u539f\u7406\u8bfe\u7a0b\u91cc\u9762\u4f7f\u7528\u7684 BlockRAM\uff09 OpenSBI \u88ab\u52a0\u8f7d\u5230 DRAM \u7a7a\u95f4\u5f00\u59cb\u7684 <code>0x8000_0000</code>\u3002\uff08\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5185\u6838\u7684 BASE_ADDRESS \u4e0d\u80fd\u662f <code>0x8000_0000</code> \u800c\u5f97\u662f <code>0x8020_0000</code>\uff09 \u5185\u6838 ELF \u88ab\u52a0\u8f7d\u5230 <code>0x8020_0000</code> \u7684\u5730\u5740\u3002</p> <code>Base</code> Size Description <code>0x8000_0000</code> <code>0x0004_2868</code> OpenSBI <code>0x8020_0000</code> <code>0x0000_2790</code> kernel segment 1 <code>0x8020_3000</code> <code>0x0000_9048</code> kernel segment 1 <p></p>"},{"location":"lab/xv6lab-paging/#_2","title":"\u5185\u6838\u5185\u5b58\u5e03\u5c40","text":"<p>Sv39 \u865a\u62df\u5730\u5740\u7684\u9ad8\u4f4d\u662f Sign-Extension \u7684\uff0c\u5728 <code>&lt; 256 GiB</code> \u548c <code>256 GiB ~ 512 GiB</code> \u4e4b\u95f4\u6709\u7740\u5de8\u5927\u7684 gap\uff0c\u6211\u4eec\u5229\u7528\u6b64\u7279\u6027\u5728\u5730\u5740\u4e0a\u533a\u5206\u7528\u6237\u5730\u5740\uff08\u4f4e\uff0c\u4ee5 0x0000 \u5f00\u5934\uff09\u548c\u5185\u6838\u5730\u5740\uff08\u9ad8\uff0c\u4ee5 0xffff \u5f00\u5934\uff09\u3002</p> <code>Base Address</code> Description <code>0x0000_0000_xxxx_xxxx</code> Userspace <code>0x0000_003f_ffff_f000</code> Trampoline <code>0xffff_ffc0_0000_0000</code> Kernel Direct Mapping of all available physical pages <code>0xffff_fffd_0000_0000</code> Kernel Heap (fixed-size object) <code>0xffff_ffff_8020_0000</code> Kernel Image (.text, .data, .bss) <code>0xffff_ffff_a000_0000</code> Device Memory-Mapped IO <code>0xffff_ffff_d000_0000</code> Kernel stack for processes <code>0xffff_ffff_ff00_0000</code> Kernel stack for per-cpu scheduler <ul> <li>Trampoline (n. \u8e66\u5e8a) \u662f\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u7684\u8df3\u677f\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5b83\u653e\u5728\u4f4e 128 GiB \u7684\u6700\u9ad8\u5904\u3002</li> <li>\u7136\u540e\uff0c\u6211\u4eec\u5c06\u5185\u6838\u7684\u955c\u50cf\uff0c\u5373 build/kernel ELF \u6587\u4ef6\uff0c\u6620\u5c04\u5230 <code>0xffff_ffff_8020_0000</code>\u3002</li> <li>\u5176\u6b21\uff0c\u6620\u5c04\u4e00\u4e9b\u5185\u6838 setup \u6240\u9700\u8981\u7684\u9875\u9762\uff0c\u5982\u6bcf\u4e2a CPU \u7684 scheduler \u6240\u7528\u7684\u6808\uff0c\u4ee5\u53ca\u5916\u8bbe\u6240\u9700\u8981\u7684 MMIO\u3002</li> <li>\u6700\u540e\uff0c\u5269\u4e0b\u7684\u6240\u6709\u53ef\u7528\u7684\u7269\u7406\u9875\u9762\u5c06\u88ab Direct Mapping \u5230 <code>0xffff_ffc0_0000_0000</code>\uff0c\u5e76\u4ea4\u7ed9 kalloc \u7ba1\u7406\u3002</li> </ul> <p></p> <p>Direct Mapping \u7684\u4f5c\u7528\u662f\u8ba9 Kernel \u80fd\u76f4\u63a5\u64cd\u7eb5\u6240\u6709\u53ef\u7528\u7684\u7269\u7406\u5185\u5b58\uff0c\u4f46\u662f\u9664\u4e86\u5185\u6838\u672c\u8eab\u955c\u50cf\u4ee5\u5916\u3002</p> <p>\u5982\u679c\u6ca1\u6709 Direct Mapping\uff0c\u6211\u4eec\u6bcf\u6b21\u90fd\u9700\u8981\u5c06\u65b0\u5206\u914d\u7684\u9875\u9762\u6620\u5c04\u5230\u5185\u6838\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e0a\uff0c\u624d\u80fd\u901a\u8fc7\u865a\u62df\u5730\u5740\u53bb\u8bbf\u95ee\u8be5\u7269\u7406\u9875\u9762\u3002 \u800c\u6709\u4e86 Direct Mapping \u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06\u7269\u7406\u5730\u5740\u52a0\u4e0a\u4e00\u4e2a\u5e38\u91cf\u504f\u79fb\u91cf\uff0c\u5f97\u5230\u4e00\u4e2a\u5185\u6838\u53ef\u8bbf\u95ee\u7684\u865a\u62df\u5730\u5740\uff1a</p> <pre><code>#define KERNEL_DIRECT_MAPPING_BASE  0xffffffc000000000ull\n\n#define KVA_TO_PA(x) (((uint64)(x)) - KERNEL_DIRECT_MAPPING_BASE)\n#define PA_TO_KVA(x) (((uint64)(x)) + KERNEL_DIRECT_MAPPING_BASE)\n</code></pre>"},{"location":"lab/xv6lab-paging/#kalloc","title":"kalloc \u6a21\u5757","text":"<p><code>kalloc.c</code> \u4f1a\u5728\u542f\u52a8\u540e\u63a5\u7ba1 Direct Mapping\uff0c\u5176\u8d1f\u8d23\u4e24\u4e2a\u529f\u80fd\uff1a</p> <ol> <li> <p>\u5bf9\u7269\u7406\u9875\u9762\u7684\u5206\u914d (\u7269\u7406\u9875\u9762\u7ba1\u7406)</p> </li> <li> <p>\u5bf9\u56fa\u5b9a\u5927\u5c0f\u5bf9\u8c61\u7684\u52a8\u6001\u5206\u914d\u548c\u56de\u6536 (\u5bf9\u8c61\u5206\u914d\u5668\u7ba1\u7406)</p> </li> </ol> <p>\u5728 kalloc \u63a5\u7ba1\u5269\u4f59\u7684\u7269\u7406\u5185\u5b58\u540e\uff0c\u6211\u4eec\u9700\u8981\u4ece\u5b83\u5206\u914d\uff1a</p> <ol> <li>\u6bcf\u4e2a object allocator \u7684\u5185\u5b58\u6c60</li> <li>\u6bcf\u4e2a process \u7684 kernel stack</li> <li>\u6bcf\u4e2a cpu \u7684 scheduler stack</li> </ol> <p>\u968f\u540e\uff0c\u7528\u6237\u7a7a\u95f4\u6240\u9700\u8981\u7684\u9875\u9762\u548c\u914d\u7f6e\u9875\u8868\u6240\u9700\u8981\u7684\u9875\u9762\u5747\u7531 <code>kalloc</code> \u6a21\u5757\u7ba1\u7406\u3002</p>"},{"location":"lab/xv6lab-paging/#relocation","title":"Relocation","text":"<p>\u5bf9\u4e8e\u5185\u6838\u672c\u8eab(\u5373\u7f16\u8bd1\u51fa\u6765\u7684 ELF \u6587\u4ef6\uff1a<code>build/kernel</code>\uff0c\u4e5f\u79f0\u4e3a \u5185\u6838\u955c\u50cf)\uff0c\u6211\u4eec\u91c7\u7528\u57fa\u5730\u5740\u504f\u79fb\u6620\u5c04\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5185\u6838\u4e2d\u5b9a\u4e49 (Defined) \u7684\u7b26\u53f7(\u53d8\u91cf\u3001\u51fd\u6570)\uff0c\u5b83\u4eec\u4f1a\u88ab OpenSBI \u52a0\u8f7d\u5230\u6307\u5b9a\u7684\u7269\u7406\u5730\u5740 <code>0x0000_0000_8020_abcd</code>\uff0c\u800c\u8be5\u7b26\u53f7\u6240\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u662f <code>0xffff_ffff_8020_abcd</code>\u3002\u5bf9\u4e8e\u6240\u6709\u7b26\u53f7\uff0c\u8fd9\u4e24\u4e2a\u5730\u5740\u4e4b\u95f4\u6c38\u8fdc\u76f8\u5dee\u4e00\u4e2a\u56fa\u5b9a\u7684\u503c\u3002\u6211\u4eec\u5c06\u8be5\u503c\u5b9a\u4e49\u4e3a\u5185\u6838\u504f\u79fb\u91cf (kernel offset)\u3002</p> <p>\u8be5\u503c\u5b9a\u4e49\u4e3a\u5b8f <code>KERNEL_OFFSET</code>\uff0c\u5e76\u5b9a\u4e49\u5b8f <code>KIVA_TO_PA</code> \u548c <code>PA_TO_KIVA</code> \u5728\u4fbf\u4e8e\u4e24\u8005\u4e4b\u95f4\u8f6c\u6362\u3002(KIAV: Kernel Image Virtual Address)</p> <pre><code>// (Kernel Image Virtual Address) TO (Physical Address)\n#define KIVA_TO_PA(x) (((uint64)(x)) - KERNEL_OFFSET)\n#define PA_TO_KIVA(x) (((uint64)(x)) + KERNEL_OFFSET)\n\n#define KERNEL_VIRT_BASE 0xffffffff80200000ull\n#define KERNEL_PHYS_BASE 0x80200000ull\n#define KERNEL_OFFSET    ((uint64)(KERNEL_VIRT_BASE - KERNEL_PHYS_BASE))\n</code></pre> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u504f\u79fb\u6574\u4e2a\u955c\u50cf\u6587\u4ef6\u52a0\u8f7d\u7684\u57fa\u5730\u5740\u5e76\u4e0d\u4f1a\u6539\u53d8\u4e24\u4e2a\u7b26\u53f7\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff1a</p> <ol> <li>\u7b26\u53f7 a \u88ab\u52a0\u8f7d\u5230 PA_a <code>0x0000_0000_8020_dead</code>\uff0c\u7b26\u53f7 b \u88ab\u52a0\u8f7d\u5230 PA_b <code>0x0000_0000_8020_beef</code>\u3002</li> <li>\u7b26\u53f7 a \u5c06\u4f1a\u88ab\u6620\u5c04\u5230 VA_a <code>0xffff_ffff_8020_dead</code>\uff0c\u7b26\u53f7 b \u5c06\u4f1a\u88ab\u52a0\u8f7d\u5728 VA_b <code>0xffff_ffff_8020_beef</code></li> <li><code>PA_a - PA_b = VA_a - VA_b</code></li> </ol> <p>\u8fd9\u4e2a\u6027\u8d28\u5141\u8bb8\u6211\u4eec\u5728\u4f7f\u7528 <code>PC-relative</code> \u5bfb\u5740\u65f6\uff0c\u80fd\u4e0d\u4f9d\u8d56\u94fe\u63a5\u5668\u4e3a\u7b26\u53f7\u8bbe\u7f6e\u7684\u5730\u5740\uff0c\u800c\u4ec5\u4f9d\u8d56\u4e8e\u67d0\u6761\u6307\u4ee4\u7684 pc \u548c\u8be5\u7b26\u53f7\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u800c\u8fd9\u4e2a\u5dee\u503c\u5728 \u94fe\u63a5\u5668 \u6240\u770b\u5230\u7684\u865a\u62df\u5730\u5740\u4e0b\u548c \u5b9e\u9645\u955c\u50cf\u88ab\u52a0\u8f7d\u7684\u5730\u5740\u4e0b\u4e00\u81f4\u5373\u53ef\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6574\u4e2a ELF \u955c\u50cf\u7684\u57fa\u5730\u5740\u91cd\u5b9a\u4f4d\u5230\u4efb\u4f55\u8d77\u59cb\u5730\u5740\uff0c\u53ea\u9700\u8981\u4fdd\u8bc1\u6240\u6709 Program Headers \u4e4b\u95f4\u7684\u504f\u79fb\u91cf\u662f\u56fa\u5b9a\u7684\u5373\u53ef\u3002\uff08\u5f53\u7136\u6211\u4eec\u7684\u5185\u6838\u5728\u5185\u5b58\u5730\u5740\u4e0a\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u57fa\u5730\u5740\u4e00\u81f4\u5373\u53ef\uff09\u3002\u8fd9\u4e00\u6761\u6027\u8d28\u4e5f\u662f Linux Kernel \u80fd\u5b9e\u73b0\u5bf9\u81ea\u8eab\u955c\u50cf\u7684 KASLR (Kernel address space layout randomization) \u7684\u539f\u7406\u3002</p> <p>See also: https://lwn.net/Articles/569635/</p> <p>\u6211\u4eec\u671f\u671b\u5185\u6838\u4f1a\u8fd0\u884c\u5728 <code>0xffff_ffff_8020_0000</code> \u7684\u9ad8\u5730\u5740\u4e0a\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539 <code>kernel.ld</code> \u4f7f\u94fe\u63a5\u5668\u80fd\u6b63\u786e\u94fe\u63a5\u5185\u6838\u3002</p> <pre><code>OUTPUT_ARCH(riscv)\nENTRY(_entry)\nBASE_ADDRESS = 0xffffffff80200000;\n</code></pre> <p>\u6b64\u65f6 OpenSBI \u65e0\u6cd5\u6b63\u786e\u52a0\u8f7d kernel ELF \u5230\u7269\u7406\u5730\u5740\u4e0a\uff0c\u56e0\u4e3a kernel ELF \u7684 Program Header \u7684\u9884\u8ba1\u52a0\u8f7d\u7684\u7269\u7406\u5730\u5740 (PhysAddr) \u662f <code>0xffff_ffff_8020_0000</code> \u7684\u9ad8\u5730\u5740\uff0c\u7136\u800c\u8fd9\u4e2a\u5730\u5740\u53ea\u80fd\u5728\u5730\u5740\u7ffb\u8bd1\u542f\u7528\u65f6\u88ab\u4f7f\u7528\u3002 \u4f46\u662f\uff0c\u5728\u63a7\u5236\u6743\u4ece OpenSBI \u8f6c\u4ea4\u81f3\u6211\u4eec\u7684\u5185\u6838\u65f6\uff0cCPU \u7684\u5730\u5740\u7ffb\u8bd1\u529f\u80fd\u662f\u6ca1\u6709\u542f\u7528\u7684\u3002</p> <p>Question 1</p> <ol> <li>\u4f7f\u7528 <code>make</code> \u7f16\u8bd1\u5185\u6838\uff0c\u4f7f\u7528 <code>make run</code> \u542f\u52a8\u5185\u6838\uff0c\u89c2\u5bdf\u5185\u6838\u662f\u5426\u80fd\u591f\u542f\u52a8\u3002</li> <li>\u4f7f\u7528 <code>readelf -a build/kernel</code> \u6253\u5370\u51fa kernel ELF \u7684\u7ed3\u6784\uff0c\u5e76\u89e3\u91ca\u91cc\u9762\u7684 Program Headers\u3002</li> </ol> <p>\u968f\u540e\uff0c\u5c06 <code>kernel.ld</code> \u7684\u5185\u5bb9\u8986\u76d6\u4e3a <code>kernel-backup.ld</code> \u4e2d\u7684\u5185\u5bb9\u3002</p> <ol> <li>\u4f7f\u7528 <code>make</code> \u7f16\u8bd1\u5185\u6838\uff0c\u4f7f\u7528 <code>make run</code> \u542f\u52a8\u5185\u6838\uff0c\u89c2\u5bdf\u5185\u6838\u662f\u5426\u80fd\u591f\u542f\u52a8\u3002</li> <li>\u4f7f\u7528 <code>readelf -a build/kernel</code> \u6253\u5370\u51fa kernel ELF \u7684\u7ed3\u6784\uff0c\u5e76\u89e3\u91ca\u91cc\u9762\u7684 Program Headers\u3002</li> </ol> <p>\u4f7f\u7528 <code>make debug</code> \u5f00\u542f\u4e00\u4e2a\u5e26\u8c03\u8bd5\u7684 qemu\uff0c\u5e76\u5728\u53e6\u4e00\u4e2a\u7a97\u53e3\u542f\u52a8 <code>gdb-multiarch</code>\u3002\u5728\u5185\u6838\u5165\u53e3 <code>0x8020_0000</code> \u5904\u6253\u4e0a\u65ad\u70b9 (<code>b *0x80200000</code>)\uff0c\u65ad\u70b9\u547d\u4e2d\u540e\u6253\u5370 satp \u5bc4\u5b58\u5668\u7684\u503c (<code>print $satp</code>)\u3002</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u518d\u6b21\u4fee\u6539 <code>kernel.ld</code> \u4f7f\u94fe\u63a5\u5668\u4ea7\u751f\u7684 ELF \u7684 Program Headers \u62e5\u6709 <code>VirtAddr = 0xffff_ffff_8020_0000</code>\uff0c\u4ee5\u53ca <code>PhysAddr = 0x8020_0000</code>\u3002</p> <p>\u6211\u4eec\u5728\u7b2c\u4e00\u4e2a\u6bb5 <code>.text</code> \u540e\u9762\u6ce8\u660e <code>AT(0x80200000)</code>\uff0c\u8868\u793a\u8fd9\u4e2a\u6bb5\u4f1a\u88ab\u52a0\u8f7d\u5230\u7269\u7406\u5730\u5740 <code>0x8020_0000</code>\u3002</p> <pre><code>BASE_ADDRESS = 0xffffffff80200000;\nSECTIONS\n{\n    . = BASE_ADDRESS;\n    skernel = .;\n    s_text = .;\n\n    .text : AT(0x80200000) {\n        *(.text.entry)\n        // ...\n    }\n    // ...\n}\n</code></pre> <p>\u6b64\u65f6\u518d <code>make run</code> \u8fd0\u884c\u5185\u6838\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 OpenSBI \u6b63\u786e\u627e\u5230\u4e86\u6211\u4eec\u5185\u6838\u7684\u5165\u53e3\u70b9\uff1a</p> <pre><code>Domain0 Next Address      : 0x0000000080200000\nDomain0 Next Arg1         : 0x000000009fe00000\nDomain0 Next Mode         : S-mode\n...\nclean bss: 0x00000000802ac000 - 0x00000000802b3000\nKernel is Relocating...\n</code></pre> <p>Question</p> <p>\u6211\u4eec\u5728 <code>kernel.ld</code> \u91cc\u9762\u6307\u5b9a\u7684\u865a\u62df\u5730\u5740\u662f <code>0xffff_ffff_8020_0000</code>\uff0c\u4f46\u662f <code>entry.S</code> \u4e2d\u4ecd\u7136\u4f7f\u7528\u7684\u662f</p> <pre><code>_entry:\n    lla sp, boot_stack_top\n    call main\n</code></pre> <p>\u8bf7\u601d\u8003\uff1a\u4e3a\u4ec0\u4e48\u5728\u7a0b\u5e8f\u8fd0\u884c\u5728 <code>0x0000_0000_8020_0000</code> \u7684\u5730\u5740\u4e0a\u65f6\uff0c\u4f7f\u7528 <code>lla</code> \u52a0\u8f7d\u7b26\u53f7\u548c <code>call main</code> \u8df3\u8f6c main \u80fd\u627e\u5230\u6b63\u786e\u7684\u7269\u7406\u5730\u5740\uff0c\u800c\u4e0d\u662f\u5728\u6b64\u65f6\u4e3a\u975e\u6cd5\u7684\u865a\u62df\u5730\u5740 <code>0xffff_ffff_8020_0000</code>\uff1f</p> <p>Hint: \u6211\u4eec\u662f\u5982\u4f55\u5bfb\u5740\u7684\uff1f\u56de\u5fc6\u8ba1\u7b97\u673a\u7ec4\u6210\u8bfe\u4e0a\u5b66\u4e60\u7684\u5bfb\u5740\u6a21\u5f0f\u3002</p> <p>\u4e0a\u8ff0 <code>_entry</code> \u4ee3\u7801\u7f16\u8bd1\u540e\u7684\u6c47\u7f16\u662f\uff1a</p> <pre><code>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code:riscv:RISCV \u2500\u2500\u2500\u2500\n\u25cf\u2192  0x80200000 &lt;skernel+0000&gt;   auipc  sp, 0xac\n    0x80200004 &lt;skernel+0004&gt;   mv     sp, sp\n    0x80200008 &lt;skernel+0008&gt;   auipc  ra, 0x2\n    0x8020000c &lt;skernel+000c&gt;   jalr   488(ra)\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 source:os/entry.S+4 \u2500\u2500\u2500\u2500\n    1      .section .text.entry\n    2      .globl _entry\n    3  _entry:\n\u2192   4      lla sp, boot_stack_top\n    5      call main\n    6\n    7      .section .bss.stack\n    8      .globl boot_stack\n    9  boot_stack:\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u76f4\u63a5\u6784\u5efa\u4e0a\u56fe\u7684\u9875\u8868\uff0c\u6211\u4eec\u9700\u8981\u4e24\u6761\u6216\u66f4\u591a\u6307\u4ee4\u6765\u8df3\u8f6c\u5230\u9ad8\u5730\u5740\uff1a</p> <ol> <li><code>csrw satp</code>: \u8bbe\u7f6e satp \u5bc4\u5b58\u5668\uff0c\u542f\u7528 Sv39 \u5730\u5740\u7ffb\u8bd1</li> <li><code>mv a0, 0xffff_ffff_8020_xxxx</code></li> <li><code>jr a0</code></li> </ol> <p>\u4f46\u662f\uff0c\u5f53\u6211\u4eec\u6267\u884c\u7b2c 1 \u6761\u6307\u4ee4\u65f6\uff0c\u6211\u4eec\u7684 PC \u8fd8\u6307\u5411\u7740 0x8020_xxxx \u4e0a\u9762\uff0c\u5f53\u8bbe\u7f6e\u5b8c satp \u540e\u9875\u8868\u542f\u7528\uff0c\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5bfb\u5740\u5730\u5740\u662f \u4e0a\u4e00\u4e2a PC + 4\uff0c\u4ecd\u7136\u662f\u5728 0x8020_xxxx \u7684\u8303\u56f4\u91cc\u9762\u3002 \u8fd9\u6837\u6211\u4eec\u7684\u7b2c\u4e8c\u6761\u6307\u4ee4\u5c31\u4f1a\u53d1\u751f Instruction Page Fault \u5f02\u5e38\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6211\u4eec\u8bbe\u7f6e\u5b8c\u9ad8\u5730\u5740\u7684\u5185\u6838\u9875\u8868\u540e\uff0c\u6211\u4eec\u5e76\u4e0d\u80fd\u76f4\u63a5\u5207\u6362\u5230\u4ec5\u5305\u542b\u9ad8\u5730\u5740\u7684\u9875\u8868\u4e0a\uff0c\u56e0\u4e3a\u6b64\u65f6\u6211\u4eec\u7684 PC \u6307\u9488\u8fd8\u6307\u5411\u4f4e\u5730\u5740\u3002</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4e34\u65f6\u9875\u8868\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e24\u4efd\u6620\u5c04\uff1a</p> <ol> <li>VA <code>0x0000_0000_8020_0000</code> -&gt; PA <code>0x8020_0000</code></li> <li>VA <code>0xffff_ffff_8020_0000</code> -&gt; PA <code>0x8020_0000</code></li> </ol> <p>\u5f53\u6267\u884c\u5b8c\u4e0a\u8ff0\u7b2c 1 \u6761\u6307\u4ee4\u542f\u7528 Sv39 \u540e\uff0c\u6211\u4eec\u76ee\u524d\u7684 PC \u4ecd\u7136\u6307\u5411\u5408\u6cd5\u7684\u865a\u62df\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u52a0\u8f7d\u4e00\u4e2a\u7edd\u5bf9\u5730\u5740\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u7136\u540e\u4f7f\u7528 <code>jr</code> \u6307\u4ee4\u8df3\u8f6c\u5230\u8be5\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4ece\u800c\u8fdb\u5165\u5230\u5185\u6838\u7684\u9ad8\u5730\u5740\u3002</p> <p>\u6211\u4eec\u5c06\u8fd9\u4e00\u7cfb\u5217\u6b65\u9aa4\u79f0\u4e3a Relocate (\u91cd\u5b9a\u4f4d)\u3002</p> <p>See also: https://0xax.gitbooks.io/linux-insides/content/Booting/linux-bootstrap-6.html</p>"},{"location":"lab/xv6lab-paging/#relocation_start","title":"relocation_start","text":"<p>\u5728 relocation_start \u7684\u4e34\u65f6\u9875\u8868\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 2 MiB \u7684\u5927\u9875\u6620\u5c04\u3002\u6211\u4eec\u5148\u5728 .bss \u6bb5\u4e0a\u5f00\u8f9f\u56db\u4e2a\u5bf9\u9f50\u7684\u7269\u7406\u9875\u9762\uff1a</p> <pre><code>static char relocate_pagetable[PGSIZE] __attribute__((aligned(PGSIZE)));\nstatic char relocate_pagetable_level1_ident[PGSIZE] __attribute__((aligned(PGSIZE)));\nstatic char relocate_pagetable_level1_direct_mapping[PGSIZE] __attribute__((aligned(PGSIZE)));\nstatic char relocate_pagetable_level1_high[PGSIZE] __attribute__((aligned(PGSIZE)));\n</code></pre> <p>\u7136\u540e\uff0c\u6211\u4eec\u8ba1\u7b97\u5185\u6838\u955c\u50cf\u7684\u7ec8\u6b62\u70b9 <code>ekernel</code> \u5411\u4e0a\u5bf9\u9f50\u5230 2MiB \u7684\u5927\u5c0f\u3002\u8fd9\u662f\u56e0\u4e3a 2 MiB \u7684\u5927\u9875\u6620\u5c04\u8981\u6c42\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u540c\u65f6\u5bf9\u9f50\u5230 2MiB \u4e0a\u3002</p> <pre><code>// Kernel Start Point must be aligned to 2MiB\nassert(IS_ALIGNED(KERNEL_PHYS_BASE, PGSIZE_2M));\n\n// Calculate Kernel image size, and round up to 2MiB.\nuint64 kernel_size = (uint64)ekernel - (uint64)skernel;\nuint64 kernel_size_4K = ROUNDUP_2N(kernel_size, PGSIZE);\nuint64 kernel_size_2M = ROUNDUP_2N(kernel_size, PGSIZE_2M);\n\nkernel_image_end_4k = KERNEL_PHYS_BASE + kernel_size_4K;\nkernel_image_end_2M = KERNEL_PHYS_BASE + kernel_size_2M;\n\nprintf(\"Kernel size: %p, Rounded to 2MiB: %p\\n\", kernel_size, kernel_size_2M);\n</code></pre> <p>\u5728 <code>kernel_image_end_2M</code> \u540e\u9762\uff0c\u6211\u4eec\u518d\u5f00\u8f9f\u4e00\u4e2a 2MiB \u7684\u9875\u9762\u4f5c\u4e3a Kernel Direct Mapping \u7684\u7b2c\u4e00\u4e2a\u5185\u5b58\u6c60\uff0c\u8fd9\u662f\u4e3a\u4e86\u5728\u7b2c\u4e8c\u9636\u6bb5\u4e2d\uff0c\u5728 <code>kpagemgr</code>\u8fd8\u672a\u521d\u59cb\u5316\u65f6\uff0c\u7ed9<code>kvmmake</code> \u63d0\u4f9b\u6784\u5efa\u9875\u8868\u65f6\u6240\u9700\u8981\u7684\u7269\u7406\u9875\u9762\u3002</p> <pre><code>// Calculate Kernel Mapping Base &amp; End\nuint64 kernel_phys_base = KERNEL_PHYS_BASE;\nuint64 kernel_phys_end = kernel_phys_base + kernel_size_2M;\nuint64 kernel_virt_base = KERNEL_VIRT_BASE;\nuint64 kernel_virt_end = kernel_virt_base + kernel_size_2M;\n\n// Calculate the first Direct Mapping Base &amp; End\nuint64 kernel_la_phy_base = kernel_image_end_2M;\nuint64 kernel_la_base = KERNEL_DIRECT_MAPPING_BASE + kernel_la_phy_base;\nuint64 kernel_la_end = kernel_la_base + PGSIZE_2M;\n</code></pre> <p>\u7136\u540e\uff0c\u6211\u4eec\u5f00\u59cb\u6620\u5c04\uff1aVA <code>0x0000_0000_8020_0000</code> -&gt; PA <code>0x8020_0000</code></p> <ol> <li>\u5728 <code>pgt_root</code> \u4e0a\u6dfb\u52a0\u4e00\u6761 PTE\uff0c\u4f7f\u5176\u6307\u5411\u7b2c\u4e00\u7ea7\u9875\u8868 <code>pgt_ident</code>\u3002</li> <li>\u4ece <code>kernel_phys_base</code> \u5230 <code>kernel_phys_end</code>\uff0c\u6bcf 2 MiB \u6dfb\u52a0\u4e00\u4e2a PTE \u6620\u5c04</li> <li>\u8ba1\u7b97\u8be5\u7269\u7406\u5730\u5740\u5e94\u8be5\u88ab\u6620\u5c04\u5230\u54ea\u4e2a\u865a\u62df\u5730\u5740\u4e0a\uff0c\u5728\u8fd9\u4e2a\u6620\u5c04\u4e2d\uff0c<code>va = pa</code>\u3002</li> <li>\u8ba1\u7b97 <code>VPN1</code>\uff0c\u5e76\u5728 <code>pgt_ident</code> \u4e2d\u6dfb\u52a0\u6620\u5c04\u3002</li> </ol> <pre><code>// We will still have some instructions executed on pc 0x8020xxxx before jumping to KIVA.\n// Step 2. Setup Identity Mapping for 0x80200000 -&gt; 0x80200000, using 2MiB huge page.\n{\n    uint64 VPN2 = PX(2, kernel_phys_base);\n    pgt_root[VPN2] = MAKE_PTE((uint64)pgt_ident, 0);\n\n    for (uint64 pa = kernel_phys_base; pa &lt; kernel_phys_end; pa += PGSIZE_2M) {\n        uint64 va = pa;\n        uint64 vpn1 = PX(1, va);\n        pgt_ident[vpn1] = MAKE_PTE(pa, PTE_R | PTE_W | PTE_X | PTE_A | PTE_D);\n        printf(\"Mapping Identity: %p to %p\\n\", va, pa);\n    }\n}\n</code></pre> <p>\u7136\u540e\uff0c\u6211\u4eec\u5f00\u59cb\u6620\u5c04\u5185\u6838 ELF \u7684\u865a\u62df\u5730\u5740\uff1aVA <code>0xffff_ffff_8020_0000</code> -&gt; PA <code>0x8020_0000</code>\u3002</p> <p>\u6b64\u65f6 <code>va = pa + KERNEL_OFFSET</code>\u3002</p> <p>\u6700\u540e\uff0c\u6211\u4eec\u6620\u5c04\u7b2c\u4e00\u5757 Direct Mapping\uff1aVA <code>0xffff_ffc0_80xx_0000</code> -&gt; \u7b2c\u4e00\u4e2a\u7a7a\u95f2\u7684 2 MiB \u7269\u7406\u9875 <code>0x80xx_0000</code></p> <p>Question 2</p> <p>\u8bf7\u4f60\u9605\u8bfb <code>main.c</code> \u91cc\u9762\u7684 <code>relocation_start</code> \u5e76\u6b63\u786e\u6784\u5efa\u4e34\u65f6\u9875\u8868\u3002</p> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>vm_print_tmp(pgt_root)</code> \u6253\u5370\u4e34\u65f6\u9875\u8868\u3002\u6700\u7ec8\uff0c\u4f60\u7684\u4e34\u65f6\u9875\u8868\u7ed3\u6784\u5e94\u8be5\u5982\u4e0b\u6240\u793a\uff1a</p> <p></p> <pre><code>=== Temporary PageTable at 0x000000008020b000 ===\n[2], pte[0x000000008020b010]: 0x0000000080000000 -&gt; 0x000000008020a000 -------V\n    [1], pte[0x000000008020a008]: 0x0000000080200000 -&gt; 0x0000000080200000 DA--XWRV\n[102], pte[0x000000008020b810]: 0xffffffc080000000 -&gt; 0x0000000080209000 -------V\n    [2], pte[0x0000000080209010]: 0xffffffc080400000 -&gt; 0x0000000080400000 DA---WRV\n[1fe], pte[0x000000008020bff0]: 0xffffffff80000000 -&gt; 0x0000000080208000 -------V\n    [1], pte[0x0000000080208008]: 0xffffffff80200000 -&gt; 0x0000000080200000 DA--XWRV\n=== END ===\n</code></pre>"},{"location":"lab/xv6lab-paging/#_3","title":"\u56fa\u5b9a\u5927\u5c0f\u5bf9\u8c61\u5206\u914d\u5668","text":"<p>TODO</p>"},{"location":"lab/xv6lab-userspace/","title":"\u7528\u6237\u7a7a\u95f4","text":"<p>\u7528\u6237\u7a7a\u95f4 (Userspace) \u662f\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u7528\u6237\u7a0b\u5e8f\u63d0\u4f9b\u7684\u4e00\u4e2a\u53d7\u9650\u5236\u7684\u8fd0\u884c\u73af\u5883\u3002\u64cd\u4f5c\u7cfb\u7edf\u901a\u8fc7 CPU \u7684\u786c\u4ef6\u529f\u80fd\u8f85\u52a9\u6765\u5b9e\u73b0\u9694\u79bb\uff0c\u8fd9\u901a\u5e38\u5305\u62ec\uff1a</p> <ul> <li>\u7279\u6743\u7ea7\u7684\u9694\u79bb\u3002\u7528\u6237\u7a7a\u95f4\u4e00\u822c\u4f7f\u7528\u4f4e\u7279\u6743\u7ea7\u8fd0\u884c\uff0c\u4f7f\u7528\u9ad8\u7279\u6743\u7ea7\u6307\u4ee4\u4f1a\u89e6\u53d1\u5f02\u5e38\u3002</li> <li>\u5185\u5b58\u7a7a\u95f4\u7684\u9694\u79bb\u3002\u7528\u6237\u7a7a\u95f4\u4e0b\u53ef\u89c1\u7684\u5730\u5740\u662f\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u5176\u8bbe\u7f6e\u7684\u3002</li> </ul>"},{"location":"lab/xv6lab-userspace/#_2","title":"\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u7684\u5207\u6362","text":"<p>RISC-V CPU \u8fd0\u884c\u65f6\u4f1a\u5904\u4e8e\u67d0\u4e2a\u7279\u6743\u7ea7\u72b6\u6001\u3002\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u5728 S mode\uff0c\u800c\u7528\u6237\u6a21\u5f0f\u5904\u4e8e U mode\u3002</p>"},{"location":"lab/xv6lab-userspace/#kernel-user","title":"Kernel -&gt; User","text":"<p>\u5728 CSR <code>sstatus</code> \u4e2d\uff0c<code>SPP</code> \u7684\u63cf\u8ff0\u5982\u4e0b\uff1a</p> <p>The SPP bit indicates the privilege level at which a hart was executing before entering supervisor mode. When a trap is taken, SPP is set to 0 if the trap originated from user mode, or 1 otherwise. When an SRET instruction (see Section 3.3.2) is executed to return from the trap handler, the privilege level is set to user mode if the SPP bit is 0, or supervisor mode if the SPP bit is 1; SPP is then set to 0.</p> <p>\u53ea\u8981\u5728 <code>sret</code> \u6267\u884c\u65f6\uff0c<code>sstatus.SPP</code> \u4e3a 0\uff0c\u6211\u4eec\u5373\u53ef\u53bb\u5230 U mode \u4e0b\u3002\uff08\u8fd9\u5e76\u4e0d\u8981\u6c42\u6211\u4eec\u4e00\u5b9a\u5904\u4e8e Trap Handler \u4e2d\uff09</p>"},{"location":"lab/xv6lab-userspace/#user-kernel","title":"User -&gt; Kernel","text":"<p>\u82e5 CPU \u8fd0\u884c\u5728 U mode \u4e0b\uff0cCPU \u901a\u8fc7\u89e6\u53d1 Trap \u6765\u56de\u5230 S mode\uff0c\u8fd9\u901a\u5e38\u5305\u62ec\uff1a</p> <ul> <li>\u4e2d\u65ad\u3002\u5305\u542b\u65f6\u949f\u4e2d\u65ad\u3001\u5916\u90e8\u4e2d\u65ad\u7b49\u3002</li> <li> <p>\u5f02\u5e38\u901a\u5e38\u5305\u62ec\uff1a</p> <ul> <li>Illegal Instruction</li> <li>(Load, Store, Fetch) Page Fault</li> <li>Environment call (\u8fd9\u662f RISC-V \u7684 syscall \u65b9\u5f0f)</li> </ul> </li> </ul> <p>\u5f53\u9700\u8981\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u7528\u6237\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528 <code>ecall</code> \u6307\u4ee4\u89e6\u53d1\u4e00\u6b21\u5f02\u5e38\uff0c\u800c\u8fd9\u5c06\u4f7f\u5185\u6838 Trap \u56de\u5230 S mode.</p>"},{"location":"lab/xv6lab-userspace/#_3","title":"\u7528\u6237\u9875\u8868 / \u5185\u6838\u9875\u8868","text":"<p>\u5728\u4e0a\u4e00\u8282 Lab \u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 RISC-V \u7684\u9875\u8868\u6a21\u578b\uff0c\u5e76\u4e14\u4e3a\u5185\u6838\u8bbe\u7f6e\u4e86\u9875\u8868\u3002\u5728 PTE \u4e2d\u7684\u7b2c 4 \u4e2a bit U \u8868\u793a\u8be5\u6620\u5c04\u5173\u7cfb\u662f\u5426\u5141\u8bb8\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u8bbf\u95ee\u3002</p> <p>\u6211\u4eec\u5c06 512 GiB \u7684\u5730\u5740\u5207\u5206\u4e3a\u7528\u6237\u5730\u5740(\u4f4e\u5730\u5740)\u548c\u5185\u6838\u5730\u5740(\u9ad8\u5730\u5740)\uff0c\u7528\u6237\u5730\u5740\u4e3a 0x0000_00 \u5f00\u5934\uff0c\u800c\u5185\u6838\u5730\u5740\u4ee5 0xffff_ff \u5f00\u5934\u3002</p> <p>\u6bcf\u4e00\u4e2a\u7528\u6237\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u6240\u4ee5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7528\u6237\u7a0b\u5e8f\uff0c\u6211\u4eec\u90fd\u4e3a\u5b83\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u9875\u8868\u3002\u6211\u4eec\u5c06\u5176\u79f0\u4e3a\u7528\u6237\u9875\u8868\u3002</p> <p>\u5728 xv6 \u4e2d\uff0c\u7528\u6237\u9875\u8868\u5e76\u4e0d\u5305\u542b\u5185\u6838\u9875\u8868\u9879\u76ee\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u5305\u542b\u5185\u6838\u955c\u50cf\u7684\u4ee3\u7801\u3001\u6570\u636e\u548c Direct Mapping \u7b49\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u4ece U mode \u8fdb\u5165 S mode \u7684\u65b9\u5f0f\u662f Trap\uff0c\u800c\u5728\u8fdb\u5165 Trap Handler \u65f6\uff0cCPU \u4f1a\u5c06 pc \u8df3\u8f6c\u4e3a <code>stvec</code>\uff0c\u4f46\u662f\u6b64\u65f6 CPU \u4ecd\u7136\u8fd8\u4f7f\u7528\u7740\u539f\u6765\u7684 satp\uff0c\u5373 U mode \u65f6\u6240\u7528\u7684\u9875\u8868\uff0c\u5e76\u4e0d\u5305\u542b\u5185\u6838\u7a7a\u95f4\u7684\u5730\u5740\u6620\u5c04\u3002\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5728 U mode \u4e0b\u4f7f\u7528\u5185\u6838\u6240\u7528\u7684 <code>stvec</code> (<code>0xffff_ffff_8020_xxxx</code>)\u3002\u8fd9\u4e2a\u95ee\u9898\u4e0e\u6211\u4eec\u5728\u5b9e\u73b0 Relocation \u65f6\u6240\u9047\u5230\u7684\u95ee\u9898\u7c7b\u4f3c\u3002</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e2a\u4e13\u95e8\u7684\u4ee3\u7801\u9875\u9762\uff0c\u8ba9\u5b83\u5728\u5185\u6838\u9875\u8868\u548c\u7528\u6237\u9875\u8868\u4e2d\u90fd\u6620\u5c04\u5230\u76f8\u540c\u7684\u865a\u62df\u5730\u5740\u3002</p> <p>\u5728\u6211\u4eec\u9700\u8981 S mode -&gt; U mode \u65f6\uff0c\u6211\u4eec\u5207\u6362\u5230\u7528\u6237\u9875\u8868\uff0c\u5e76\u8bbe\u7f6e\u7528\u6237\u7684 <code>stvec</code> \u4e3a\u8be5\u4ee3\u7801\u9875\u9762\u4e2d\u7684\u4e00\u4e2a\u7b80\u6613 Trap Handler\u3002\u800c\u5728\u8fdb\u5165\u8be5 Trap Handler \u65f6\uff0c\u5373 U mode -&gt; S mode \u65f6\uff0c\u6211\u4eec\u5207\u6362\u56de\u5185\u6838\u7684\u9875\u8868\u548c\u5185\u6838\u7684 <code>stvec</code>\uff0c\u4fdd\u5b58\u7528\u6237\u7684\u6267\u884c\u73af\u5883\uff0c\u5e76\u6062\u590d\u5185\u6838\u7684\u8fd0\u884c\u73af\u5883\u3002</p> <p>\u6211\u4eec\u5c06\u8be5\u7279\u6b8a\u9875\u9762\u79f0\u4e3a Trampoline\uff0c\u5e76\u5c06\u5176\u6620\u5c04\u5230 <code>0x0000_003f_ffff_f000</code>\u3002</p>"},{"location":"lab/xv6lab-userspace/#trampoline","title":"Trampoline","text":"<p>Trampoline n. \u8e66\u5e8a</p> <p>\u5728 xv6 \u4e2d\uff0cTrampoline \u662f\u4e24\u6bb5\u7279\u6b8a\u7684\u4ee3\u7801 <code>uservec</code> \u548c <code>userret</code>\uff0c\u7528\u4e8e\u5207\u6362\u5230\u7528\u6237\u6001\u548c\u5207\u6362\u56de\u5185\u6838\u6001\u3002</p> <pre><code>    .section trampsec\n.globl trampoline\ntrampoline:\n\n.globl uservec\nuservec:\n        # trap.c sets stvec to point here, so\n        # traps from user space start here,\n        # in supervisor mode, but with a user page table.\n        #\n        # sscratch points to where the process's p-&gt;trapframe is\n        # mapped into user space, at TRAPFRAME.\n\n    # swap a0 and sscratch, so that a0 is TRAPFRAME\n        csrrw a0, sscratch, a0\n\n        # save the user registers (x1 - x31) in TRAPFRAME\n        sd ra, 40(a0)\n        sd sp, 48(a0)\n        # ...\n        sd t5, 272(a0)\n        sd t6, 280(a0)\n\n        # we have saved t0, so we can smash it\n        # resotre a0 from sscratch, and save it\n        csrr t0, sscratch\n        sd t0, 112(a0)\n\n        # save epc\n        csrr t1, sepc\n        sd t1, 24(a0)\n\n        # load kernel's satp, sp, usertrap handler, tp(hartid)\n        ld t1, 0(a0)\n        ld sp, 8(a0)\n        ld t0, 16(a0)\n        ld tp, 32(a0)\n\n        csrw satp, t1\n        sfence.vma zero, zero\n\n        jr t0\n</code></pre> <p>\u5728 Trampoline \u4e2d\uff0c\u6240\u6709 GPR (x1-x31) \u5747\u4e3a\u7528\u6237\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\uff0c\u6211\u4eec\u9700\u8981\u5728\u8fdb\u5165 trap / \u9000\u51fa trap \u65f6\u4fdd\u6301\u6240\u6709 GPR \u4e00\u81f4\u3002</p> <p>\u6211\u4eec\u5c06\u4fdd\u5b58\u7528\u6237\u5bc4\u5b58\u5668\u7684\u5730\u65b9\u79f0\u4e3a Trapframe\uff0c\u5927\u5c0f\u5c0f\u4e8e\u4e00\u4e2a\u9875\u9762\u3002</p> <p>Trapframe \u5b9a\u4e49\u5728 <code>proc.h</code> \u4e2d\uff1a</p> <pre><code>struct trapframe {\n    /*   0 */ uint64 kernel_satp;    // kernel page table\n    /*   8 */ uint64 kernel_sp;      // top of process's kernel stack\n    /*  16 */ uint64 kernel_trap;    // usertrap()\n    /*  24 */ uint64 epc;            // saved user program counter\n    /*  32 */ uint64 kernel_hartid;  // saved kernel tp\n    /*  40 */ uint64 ra;\n    /*  48 */ uint64 sp;\n    /*  ... */\n    /* 272 */ uint64 t5;\n    /* 280 */ uint64 t6;\n};\n</code></pre> <p>\u7531\u4e8e RISC-V \u7684\u6307\u4ee4\u7684 destination \u5747\u4e3a\u5bc4\u5b58\u5668\uff0c\u800c\u6211\u4eec\u5728\u4fdd\u5b58\u7528\u6237\u5bc4\u5b58\u5668\u524d\u4e0d\u80fd\u4fee\u6539\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u6211\u4eec\u8d77\u7801\u9700\u8981\u4e00\u4e2a\u80fd\u4fee\u6539\u7684\u5bc4\u5b58\u5668\u6765\u7ed9\u6211\u4eec\u64cd\u4f5c\u7a7a\u95f4\u3002RISC-V \u63d0\u4f9b\u4e86\u4e00\u4e2a <code>sscratch</code> \u5bc4\u5b58\u5668\u6765\u7ed9 Trap Handler \u4e00\u4e2a\u6682\u5b58\u5bc4\u5b58\u5668\u7684\u5730\u65b9\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>csrrw a0, sscratch, a0</code> \u4ea4\u6362 <code>sscratch</code> \u548c <code>a0</code> \u5bc4\u5b58\u5668\u3002</p> <p>\u6211\u4eec\u89c4\u5b9a\uff0c<code>sscratch</code> \u5bc4\u5b58\u5668\u4fdd\u5b58\u7740\u7528\u6237\u9875\u8868\u4e2d Trapframe \u6240\u6620\u5c04\u7684\u865a\u62df\u5730\u5740\uff0c\u6211\u4eec\u5c06\u5b83\u653e\u7f6e\u5728 Trampoline \u4e0b\u9762\u4e00\u4e2a\u9875\uff0c\u5373 <code>0x0000_003f_ffff_e000</code>\u3002</p> <p>\u5728\u8fdb\u5165 <code>uservec</code> \u540e\uff0c\u6211\u4eec\u4ea4\u6362 a0 \u548c sscratch\uff0c\u6b64\u65f6 a0 \u4e3a <code>0x0000_003f_ffff_e000</code>\uff0c\u6620\u5c04\u5230\u8be5\u8fdb\u7a0b\u7684 <code>struct trapframe</code> \u7ed3\u6784\u4f53\u3002</p> <p>\u968f\u540e\uff0c\u6211\u4eec\u5373\u53ef\u4f7f\u7528 a0 + 40 \u6765\u5f97\u5230 <code>trapframe</code> \u4e2d\u7684 ra \u5b57\u6bb5\u7684\u5730\u5740\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u7528 <code>sd ra, 40(a0)</code> \u7b49\u6765\u4fdd\u5b58\u9664\u4e86 a0 \u4ee5\u5916\u7684\u6240\u6709\u7528\u6237\u5bc4\u5b58\u5668\u3002\u5728\u6b63\u786e\u4fdd\u5b58\u7528\u6237\u5bc4\u5b58\u5668\u540e\uff0c\u6211\u4eec\u80fd\u591f\u4fee\u6539\u6240\u6709\u5bc4\u5b58\u5668\u4e86\uff0c\u6211\u4eec\u5c06\u4fdd\u5b58\u5728 <code>sscratch</code> \u4e2d\u7684\u7528\u6237 <code>a0</code> \u8bfb\u53d6\u5230 t0\uff0c\u5e76\u5199\u5165 trapframe \u4e2d\uff0c\u81f3\u6b64\u6211\u4eec\u6210\u529f\u4fdd\u5b58\u4e86\u6240\u6709\u7528\u6237\u5bc4\u5b58\u5668\u3002\u7136\uff0c\u6211\u4eec\u4fdd\u5b58 <code>sepc</code> \u5bc4\u5b58\u5668\u3002</p> <p>\u6700\u540e\uff0c\u6211\u4eec\u4ece <code>trapframe</code> \u4e2d\u8bfb\u53d6\u5185\u6838\u76f8\u5173\u7684\u6570\u636e\uff0c\u5982\u5185\u6838\u7684\u9875\u8868 <code>satp</code>\uff0c\u5185\u6838\u6808 sp <code>kernel_sp</code>\uff0c\u5185\u6838\u7684 cpuid (tp\u5bc4\u5b58\u5668) <code>kernel_hartid</code>\uff0c\u4ee5\u53ca\u4e0b\u4e00\u9636\u6bb5\u7684\u8df3\u8f6c\u5730\u5740 <code>kenrel_trap</code>\u3002</p> <p>\u5728\u5207\u6362\u56de\u5185\u6838\u7684\u9875\u8868\u540e\uff0c\u6211\u4eec\u5373\u53ef\u8df3\u8f6c <code>tf-&gt;kernel_trap</code> \u8fdb\u5165C\u8bed\u8a00\u73af\u5883\u5904\u7406 User Trap\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u56de\u5230\u4e86\u5185\u6838\u7684\u9875\u8868\u3002</p> <p>\u5728 <code>usertrap</code> \u4e2d\uff0c\u6211\u4eec\u5148\u5c06 stvec \u8bbe\u7f6e\u4e3a <code>kerneltrap</code>\uff0c\u4ee5\u6b64\u6355\u6349\u53ef\u80fd\u51fa\u73b0\u7684\u4e2d\u65ad\u548c\u5f02\u5e38\u3002\u968f\u540e\u8bfb\u53d6 scause \u5904\u7406\u5f02\u5e38\u3002\u6700\u540e\uff0c\u4f7f\u7528 <code>usertrapret</code> \u8fd4\u56de\u7528\u6237\u7a7a\u95f4\u3002</p> <pre><code>void usertrap() {\n    set_kerneltrap();\n\n    assert(!intr_get());\n    if ((r_sstatus() &amp; SSTATUS_SPP) != 0)\n        panic(\"usertrap: not from user mode\");\n\n    struct trapframe *trapframe = curr_proc()-&gt;trapframe;\n    uint64 cause = r_scause();\n\n    // handle usertrap according to scause\n\n    assert(!intr_get());\n    usertrapret();\n}\n</code></pre> <p><code>usertrapret</code> \u5148\u5c06\u5185\u6838\u7684\u4fe1\u606f\u4fdd\u5b58\u5230 <code>trapframe</code>\uff0c\u4fee\u6539 <code>sepc</code>\uff0c\u8bbe\u7f6e <code>sstatus</code> \u8fd4\u56de U mode\uff0c\u8ba1\u7b97\u51fa\u7528\u6237\u9875\u8868\u7684 satp \u548c stvec \u503c\uff0c\u5e76\u8df3\u8f6c\u5230 Trampoline \u4e2d\u7684 <code>userret</code> \u5730\u5740\u3002</p> <pre><code>//\n// return to user space\n//\nvoid usertrapret() {\n    if (intr_get())\n        panic(\"usertrapret entered with intr on\");\n\n    struct trapframe *trapframe = curr_proc()-&gt;trapframe;\n    trapframe-&gt;kernel_satp      = r_satp();                                 // kernel page table\n    trapframe-&gt;kernel_sp        = curr_proc()-&gt;kstack + KERNEL_STACK_SIZE;  // process's kernel stack\n    trapframe-&gt;kernel_trap      = (uint64)usertrap;\n    trapframe-&gt;kernel_hartid    = r_tp();\n\n    w_sepc(trapframe-&gt;epc);\n    // set up the registers that trampoline.S's sret will use to get to user space.\n\n    // set S Previous Privilege mode to User.\n    uint64 x = r_sstatus();\n    x &amp;= ~SSTATUS_SPP;  // clear SPP to 0 for user mode\n    x |= SSTATUS_SPIE;  // enable interrupts in user mode\n    w_sstatus(x);\n\n    // tell trampoline.S the user page table to switch to.\n    uint64 satp  = MAKE_SATP(KVA_TO_PA(curr_proc()-&gt;mm-&gt;pgt));\n    uint64 stvec = (TRAMPOLINE + (uservec - trampoline)) &amp; ~0x3;\n\n    uint64 fn = TRAMPOLINE + (userret - trampoline);\n    tracef(\"return to user @%p, fn %p\", trapframe-&gt;epc);\n    ((void (*)(uint64, uint64, uint64))fn)(TRAPFRAME, satp, stvec);\n}\n</code></pre> <p>\u5728\u8c03\u7528 <code>userret</code> \u65f6\uff0c\u6211\u4eec\u4f20\u5165\u4e863\u4e2a\u53c2\u6570\u3002\u5728\u6c47\u7f16\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 a0-a3 \u5f15\u7528\u5b83\u4eec\u3002</p> <p>\u6211\u4eec\u9996\u5148\u6362\u56de\u7528\u6237\u9875\u8868\uff0c\u6b64\u65f6\u6211\u4eec\u5373\u53ef\u4f7f\u7528 <code>0x0000_003f_ffff_e000</code> \u5f15\u7528 trapframe\uff0c\u7136\u540e\u8bbe\u7f6e\u7528\u6237\u7684 stvec\u3002</p> <p>\u6211\u4eec\u5148\u5c06\u7528\u6237\u7684 a0 \u5b58\u5165 <code>sscratch</code>\uff0c\u7136\u540e\u4ece trapframe \u4e2d\u6062\u590d\u4e86\u5176\u4ed6\u7528\u6237\u5bc4\u5b58\u5668\u3002\u6700\u540e\uff0c\u6211\u4eec\u4f7f\u7528 <code>csrrw a0, sscratch, a0</code> \u4ea4\u6362 a0 \u548c <code>sscratch</code>\uff0c\u6b64\u65f6 a0 \u4e3a\u7528\u6237\u7684 a0\uff0c<code>sscratch</code> \u662f trapframe \u7684\u865a\u62df\u5730\u5740\u3002</p> <pre><code>.globl userret\nuserret:\n        # userret(TRAPFRAME, pagetable, stvec)\n        # switch from kernel to user.\n        # usertrapret() calls here.\n        # a0: TRAPFRAME, in user page table.\n        # a1: user page table, for satp.\n\n        # switch to the user page table.\n        csrw satp, a1\n        sfence.vma zero, zero\n\n        # switch to the user stvec.\n        csrw stvec, a2\n\n        # put the saved user a0 in sscratch, so we\n        # can swap it with our a0 (TRAPFRAME) in the last step.\n        ld t0, 112(a0)\n        csrw sscratch, t0\n\n        # restore all but a0 from TRAPFRAME\n        ld ra, 40(a0)\n        ld sp, 48(a0)\n        # ...\n        ld t5, 272(a0)\n        ld t6, 280(a0)\n\n        # restore user a0, and save TRAPFRAME in sscratch\n        csrrw a0, sscratch, a0\n\n        # return to user mode and user pc.\n        # usertrapret() set up sstatus and sepc.\n        sret\n</code></pre>"},{"location":"lab/xv6lab-userspace/#_4","title":"\u7528\u6237\u9875\u8868\u7684\u8bbe\u7f6e","text":"<p>TODO: proc.c \u8bbe\u7f6e kstack\uff0ctrapframe</p> <p>kvm.c \u6620\u5c04 trampoline</p> <p>vm.c \u6620\u5c04 trampline \u548c trapframe</p>"},{"location":"laben/lab2/","title":"C Language Basics &amp; Makefile","text":"<p>C Language Basics</p> <p>If you haven't learned C, we strongly recommend that you watch Teacher Yu's C/C++ course in advance: https://www.bilibili.com/video/BV1Vf4y1P7pq. Watching up to Chapter 6.5 will help you understand the basic syntax of C.</p> <p>RISC-V Assembly</p> <p>We expect that you have completed the \"Computer Organization\" course and understand the basics of RISC-V assembly.</p> <p>Additionally, always keep \"The RISC-V Instruction Set Manual, Volume I: User-Level ISA, Version 2.1\" (riscv-spec-v2.1.pdf) and \"The RISC-V Instruction Set Manual, Volume II: Privileged Architecture, Document Version 20211203\" (riscv-privileged-20211203.pdf) as reference manuals for RISC-V assembly.</p>"},{"location":"laben/lab2/#types","title":"Types","text":"<p>In C, integer types include long, int, short, char, etc. In most cases, the int type is 32 bits long, while the length of the long type depends on the ABI (Application Binary Interface, specified by the user during compilation). To avoid inconsistencies in the actual length of long, int, etc., due to differences in compilation target architectures, we use fixed-length integer types such as uint64_t, int32_t, etc., in system programming. In different ABI/compiler environments, using these types ensures they are of the specified length.</p> <p>For example, in <code>os/types.h</code>:</p> os/types.h<pre><code>typedef unsigned int uint;\ntypedef unsigned short ushort;\ntypedef unsigned char uchar;\ntypedef unsigned char uint8;\ntypedef unsigned short uint16;\ntypedef unsigned int uint32;\ntypedef unsigned long uint64;\n</code></pre> <p>We define <code>uint64</code>, <code>uint32</code>, etc., as <code>unsigned long</code> and <code>unsigned int</code>, respectively. Since we are programming for the riscv64 architecture, we can ensure that in our XV6, they are 64/32 bits.</p> <p>unsigned</p> <p>Note that in C, the default type for integer literals within the range of the int type is int.</p> <p>When an unsigned int is compared with a signed integer (e.g., int), the signed integer is promoted to unsigned int. If the constant is negative, it may become a very large unsigned value after promotion, leading to unexpected comparison results.</p> <p>Try executing the following code and observe the result:</p> <p></p>"},{"location":"laben/lab2/#pointers","title":"Pointers","text":"<p>A pointer is a variable type in programming languages that stores the memory address of another variable. Through pointers, you can indirectly access and manipulate the values of other variables. Pointers are commonly used in dynamic memory allocation, function parameter passing, and the implementation of data structures (e.g., linked lists, trees, etc.).</p> <ol> <li> <p>Pointer \"content\": It stores a memory address, not the data value directly. For example, pointer p can store the memory address of variable x, not the value of x.</p> </li> <li> <p>Pointer type: A pointer has a type, indicating the type of variable it points to. For example, <code>int* p</code> means p is a pointer to an int.</p> </li> <li> <p>Dereferencing: The process of accessing the variable a pointer points via the pointer to is called dereferencing. In C, you can dereference a pointer using the * operator to get the value it points to.</p> </li> <li> <p>Address-of: All variables stored in memory can have their addresses taken. We use <code>&amp;</code> to denote taking the address of a variable.</p> </li> </ol> <p>For example:</p> <pre><code>int a = 10;     // Define a variable a, initialized to 10.\nint *p = &amp;a;    // Take the memory address of variable a and store it in pointer p.\n*p = 20;        // Modify the memory address pointed to by p to 20.\n\nint b = 30;\nint **pp = &amp;p;  // Take the address of variable p and store it in pointer pp.\n*pp = &amp;b;       // Change the content of pointer p (the address it points to) to the address of variable b.\n**pp = 50;      // Double dereference.\n\nprintf(\"a: %d, b:%d\\n\", a, b);  // Output: a:20, b:50.\n</code></pre> <p>A diagram to understand pointers:</p> <p></p>"},{"location":"laben/lab2/#structs","title":"Structs","text":"<p>We use the <code>struct</code> keyword to indicate that the type is a struct. A struct is a collection of data packed together.</p> <p>For example, we declare a struct <code>struct proc</code> with the following fields:</p> <pre><code>struct proc {\n    int pid;\n    char* name;\n    void* chan;\n    uint64 krkr;\n    uint8 dkdk;\n};\n</code></pre> <p>We use the <code>.</code> operator to access a field of a struct variable and the <code>-&gt;</code> operator to dereference a field of a struct pointer.</p> <pre><code>struct proc p1;\np1.pid = 1234;\n\nstruct proc *pProc = &amp;p1;\npProc-&gt;name = \"proc 1234\";\n</code></pre>"},{"location":"laben/lab2/#compilation-system","title":"Compilation System","text":"<p>In the \"Computer Organization\" course, we briefly introduced the compilation system of C. Typically, compiling a program involves the following steps:</p> <p></p> <ol> <li>The source code .c file is preprocessed by the Pre-processor cpp to generate the .i file.</li> </ol> <p>The .i file is an intermediate file generated during the preprocessing stage of GCC, containing expanded header files, macro definitions, and conditionally compiled code. Use <code>gcc -E</code> to generate the .i file.</p> <ol> <li>The .i file is compiled by the cc1 compiler to generate the assembly file .s.</li> </ol> <p>The compiler performs syntax checking on the .i file. If no errors are found, it converts the .i file into assembly code (human-readable machine code). During this process, the optimizer can optimize the code.</p> <ol> <li>The .s file is assembled by the assembler as to generate the Relocatable objects (relocatable file) .o.</li> </ol> <p>During this process, the assembler converts assembly code into object code (machine code\u2014code that can be directly executed by the machine, not human-readable).</p> <ol> <li>The linker ld links all .o files to generate the final executable.</li> </ol> <p>On Linux systems, object files and executables are typically stored in the ELF (Executable and Linkable Format) file format.    ELF files are divided into different sections, which store specific types of data, such as code (.text), data (.data), and the symbol table (.symtab). Each section has its specific purpose and attributes.</p> <p>Typically, we use \"compiler\" to refer to all the tools used in the compilation and linking process, even though the compiler and linker are two different programs. Specifically, when discussing the compiler and linker, we collectively refer to the tools that perform preprocessing, assembly, and compilation as the compiler; the tool used in the final linking step is called the linker.</p> Experiment Step 1: Observing the C Compilation Process <p>Below is a simple C code example suitable for observing the <code>.i</code>, <code>.s</code>, and <code>.o</code> files during the GCC compilation process:</p> <pre><code>// main.c\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a = 10;\n    int b = 20;\n    int sum = a + b;\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}\n</code></pre>"},{"location":"laben/lab2/#observing-the-compilation-process","title":"Observing the Compilation Process","text":"<ol> <li> <p>Preprocessing: Generate the <code>.i</code> file    <pre><code>gcc -E main.c -o main.i\n</code></pre>    This generates the <code>main.i</code> file, which contains the preprocessed code (macro expansion, header file inclusion, etc.). You can view its contents using <code>cat main.i</code>.</p> </li> <li> <p>Compilation: Generate the <code>.s</code> file    <pre><code>gcc -S main.i -o main.s\n</code></pre>    This generates the <code>main.s</code> file, which contains the assembly code. You can view its contents using <code>cat main.s</code>.</p> </li> <li> <p>Assembly: Generate the <code>.o</code> file    <pre><code>gcc -c main.s -o main.o\n</code></pre>    This generates the <code>main.o</code> file, which contains the object code (machine code). You can analyze the contents of <code>main.o</code> using the <code>objdump</code> tool. For example, use <code>objdump -d hello.o</code> to view the machine code and its corresponding assembly instructions.</p> </li> <li> <p>Linking: Generate the executable    <pre><code>gcc main.o -o main\n</code></pre>    This generates the executable <code>main</code>. You can check the file type of <code>main</code> using <code>file main</code>, which should be ELF. You can use the <code>readelf</code> tool from the GNU Binutils toolset to view the ELF file's header, section information, symbol table, dynamic section information, etc. For example, use <code>readelf -h main</code> to view the file header of <code>main</code>.</p> </li> </ol>"},{"location":"laben/lab2/#definition-and-declaration","title":"Definition and Declaration","text":"<p>Definition and Declaration are two concepts in C that are easily confused.</p> <p>Declaration declares a symbol (variable, function, etc.) and some basic information about it (e.g., variable type, function parameter types, function return type). This allows the compiler to use this type information for code generation during the compilation phase.</p> <p>Definition, on the other hand, actually allocates a memory address for the symbol. The linker during the linking phase assigns addresses to these symbols (e.g., function addresses, global variable addresses).</p> <p>Symbol</p> <p>In C, a symbol is a name used by the compiler to represent various entities in a program (e.g., variables, functions, macros, type names, etc.). Each symbol is associated with a specific memory address or other resource during compilation. When a program is compiled, the compiler creates a symbol table (Symbol Table) to record the names, types, scopes, and corresponding memory addresses or values of these symbols.</p> <p>In short, a symbol is a name representing an entity in a program, and the compiler manages and resolves these names through the symbol table.</p> <p>When the compiler compiles a <code>.c</code> file, it processes the source code line by line and maintains a symbol table representing all symbols seen so far in the current file. When the compiler encounters a reference to a symbol (variable reference, function call), it looks up this symbol table; when the compiler encounters a declaration or definition of a symbol, it saves information about this symbol in the symbol table.</p> <p>Therefore, we must ensure that when referencing a symbol, it has at least been declared, i.e., seen by the compiler. At the same time, in the same file, a definition is also a declaration.</p> <p>For the compiler, if a <code>.c</code> file needs to reference functions or variables from other <code>.c</code> files, it must declare them in advance. When the compiler encounters a symbol that has been declared but not defined in the current file (e.g., printf), the compiler assumes that the symbol will be defined in other object files, leaves some information, and lets the linker find the symbol during the linking phase.</p> <p>For example, <code>a.c</code> defines the variable <code>int a</code>. If <code>main.c</code> wants to reference it, it needs to declare it using <code>extern int a</code>.</p> <pre><code>// a.c\nint a;\n\n// main.c\nextern int a;\nint main() {\n    printf(\"%d\\n\", a);\n}\n</code></pre> <p>During compilation, we first compile <code>a.c</code> and <code>main.c</code> into <code>a.o</code> and <code>main.o</code>, respectively: <code>gcc -c a.c -o a.o</code>, <code>gcc -c main.c -o a.o</code>, then link the two .o files: <code>gcc main.o a.o</code> to generate the executable a.out.</p> <p>When compiling <code>a.c</code>, the compiler-generated <code>a.o</code> indicates that it has a globally visible symbol named <code>a</code>. When compiling <code>main.c</code>, the compiler does not know anything about other .c files. However, we declared the variable <code>a</code> in the first line, so it knows that there will be a symbol named <code>a</code> during linking. The compiler-generated <code>main.o</code> indicates that it needs a symbol named <code>a</code>.</p> <p>The linker will search the symbol tables of all <code>.o</code> files and match symbols based on names and visibility.</p> <p>To organize large projects, we do not manually import symbols from other <code>.c</code> files in each <code>.c</code> file. Instead, we use header files to declare these shared symbols.</p>"},{"location":"laben/lab2/#header-files","title":"Header Files","text":"<p>The purpose of a header file (Header File) is to declare functions, variables, macro definitions, constants, types, etc., to be shared across multiple source files. We use the <code>#include</code> macro at the beginning of <code>.c</code> files to import header files. Its semantics is to directly copy the file content into the current file, a step performed by the preprocessor.</p> <p>If a <code>.c</code> file has types, functions, or variables that need to be referenced by other <code>.c</code> files, we create a corresponding header file. When naming header files, we generally use the same filename but with a <code>.h</code> suffix; for example, for shared information in <code>a.c</code>, we create its header file <code>a.h</code>.</p> <p>For shared functions and variables, we typically declare them in <code>a.h</code> and define them in <code>a.c</code>:</p> <pre><code>// a.h\nextern int a;\nint add(int x, int y);\n\n// a.c\nint a;\n// or int a = 10;\nint add (int x, int y) {\n    return x + y;\n}\n</code></pre> <p>If <code>main.c</code> needs to reference the <code>a</code> variable or <code>add</code> function provided by <code>a.c</code>, it can include the <code>a.h</code> header file at the beginning:</p> <pre><code>// main.c\n#include \"a.h\"\n\nint main() {\n    a = 666;\n    int b = 123;\n    int c = add(a, b);\n}\n</code></pre> <p>Note</p> <ul> <li> <p>A global variable declared and defined in a <code>.c</code> file cannot be directly used by other <code>.c</code> files. For example, if you have <code>int a;</code> in one <code>.c</code> file, you need <code>extern int a;</code> in another file for the two files to share the same <code>a</code>.</p> </li> <li> <p>When defining global variables in multiple <code>.c</code> files, we must ensure the variable names are unique. Otherwise, it will lead to multiple definitions.</p> </li> <li> <p>If we want to define global variables visible only to the current <code>.c</code> file, we can use the <code>static</code> keyword.</p> </li> <li> <p>Header files can only declare variables. If a header file defines a variable and more than one <code>.c</code> file includes this header file, it will also result in multiple definitions because the preprocessor directly copies the included content into the current file, causing both <code>.c</code> files to define the variable.</p> </li> <li> <p>If you want a variable to be shared across multiple <code>.c</code> files, you can declare the variable in the header file using the <code>extern</code> keyword and define it in any one <code>.c</code> file.</p> </li> </ul>"},{"location":"laben/lab2/#readelf-to-read-the-symbol-table","title":"readelf to Read the Symbol Table","text":"<p>Let's explain the difference between Declaration and Definition again:</p> <ul> <li> <p>Definition tells the linker that this .o file contains a symbol, and the linker needs to allocate a memory address for it. If other .o files need to reference this symbol, it must check whether the symbol allows external access, i.e., whether <code>static</code> was used during declaration.</p> </li> <li> <p>Declaration assures the compiler that the symbol will be found during linking, whether it is defined in the current <code>.c</code> file or other <code>.c</code> files. The compiler only needs to generate code based on the declared variable type or function prototype (e.g., the width of variable access (lb, lw, ld), the number of function parameters), and the linker is responsible for finding these symbols.</p> </li> </ul> <p>We can use <code>llvm-readelf-19 --symbol &lt;file&gt;</code> to view the symbol table of an ELF file. The meaning of the fields can be referenced at https://docs.oracle.com/cd/E19455-01/816-0559/chapter6-79797/index.html.</p> <pre><code>$ llvm-readelf-19 --symbols build/os/proc.o | grep -E \"FUNC|OBJECT|GLOBAL\"\nSymbol table '.symtab' contains 1240 entries:\n   Num:    Value          Size Type    Bind   Vis       Ndx Name\n     5: 0000000000000000    72 FUNC    LOCAL  DEFAULT     1 curr_proc\n    23: 0000000000000048   304 FUNC    LOCAL  DEFAULT     1 freeproc\n    97: 0000000000000178    92 FUNC    LOCAL  DEFAULT     1 first_sched_ret\n   128: 0000000000000000     4 OBJECT  LOCAL  DEFAULT     6 proc_inited.1\n   237: 0000000000000000     4 OBJECT  LOCAL  DEFAULT     7 PID.0\n   663: 0000000000000000    32 OBJECT  LOCAL  DEFAULT     4 pid_lock\n   664: 0000000000000020    32 OBJECT  LOCAL  DEFAULT     4 wait_lock\n   665: 0000000000000040   104 OBJECT  LOCAL  DEFAULT     4 proc_allocator\n  1201: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND push_off\n  1202: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND mycpu\n  1203: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND pop_off\n  1210: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND usertrapret\n  1211: 00000000000001d4   544 FUNC    GLOBAL DEFAULT     1 proc_init\n  1212: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND spinlock_init\n  1213: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND allocator_init\n  1214: 00000000000000a8  4096 OBJECT  GLOBAL DEFAULT     4 pool\n  1215: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND kernel_pagetable\n  1216: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND kallocpage\n  1217: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND kalloc\n  1218: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND memset\n  1219: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND kvmmap\n</code></pre> <p>The Type column indicates whether the symbol is a function (FUNC) or a variable (OBJECT). Bind indicates whether the symbol allows other .o files to find it (LOCAL/GLOBAL). Ndx indicates whether the symbol is defined in this .o file. <code>UND</code> means it is an external <code>.o</code>, i.e., a symbol that needs to be imported from other .o files, so its Type and Size are unknown.</p> <p>Now, do you understand the reasons for the two common linking errors: multiple definition and undefined reference?</p> <ul> <li><code>riscv64-unknown-elf-ld: build/os/proc.o:os/proc.c:14: multiple definition of 'idle'; build/os/main.o:os/main.c:7: first defined here</code><ul> <li>The <code>idle</code> variable was defined multiple times in different .c files.</li> </ul> </li> <li><code>riscv64-unknown-elf-ld: build/os/proc.o: in function 'proc_init': os/proc.c:38:(.text+0xd0): undefined reference to 'idle'</code><ul> <li>The <code>idle</code> variable was declared in the header file but not defined.</li> </ul> </li> </ul>"},{"location":"laben/lab2/#make-and-makefile-introduction","title":"Make and Makefile Introduction","text":"<p>Consider a scenario where our project is slightly larger (e.g., containing multiple C files). Every time we run it, we have to execute many gcc commands. Is there a compilation tool that can simplify this process? Next, we introduce the automated build tool, make.</p> <p><code>Makefile</code> is a configuration file used for automating the build process (compilation, linking, etc.) of programs, typically used to manage projects with multiple source files. It defines how to generate target files (e.g., executables, library files) from source code and ensures that only the parts that need updating are recompiled, improving build efficiency.</p> <p><code>Makefile</code> is the input file for the <code>make</code> tool, a classic build tool widely used in Unix/Linux systems.</p> Experiment Step 2: Using Makefile for Automated Build <p>First, we create three files:</p> <pre><code>//print.h header file\n#include &lt;stdio.h&gt;\nvoid print(void);\n\n//print.c\n#include \"print.h\"\nvoid print(){\n    printf(\"Hello, World!\\n\");\n}\n\n//main.c\n#include \"print.h\"\nint main(){\n    print();\n    return 0;\n}\n</code></pre> <p>Due to the dependencies in the files, if we want to run the above code, we need to generate .o object files for each .c file and then link the two .o files to generate the executable:</p> <pre><code>gcc -c main.c\ngcc -c print.c\ngcc -o main main.o print.o\n\n./main\n</code></pre> <p></p> <p></p> <p>As you can see, if we have many files, running the program becomes very complex. To make the compilation process easier, we can use a Makefile.</p> <p>Next, we create a text file named Makefile.</p> <p>Makefile content:</p> <pre><code>main : main.o print.o\n    gcc -o main main.o print.o\nmain.o : main.c print.h\n    gcc -c main.c\nprint.o : print.c print.h\n    gcc -c print.c\nclean:\n    rm main main.o print.o\n</code></pre> <p>Warning</p> <p>In Makefile, indentation must be done with tabs, not spaces; otherwise, it will not execute properly.</p> <p>Finally, we only need to execute the <code>make</code> command to complete the entire compilation process:</p> <p></p>"},{"location":"laben/lab2/#basic-structure-of-makefile","title":"Basic Structure of Makefile","text":"<pre><code>target: dependencies\n[tab] system command\n</code></pre>"},{"location":"laben/lab2/#how-makefile-works","title":"How Makefile Works","text":"<p>By default, when we only enter the <code>make</code> command:</p> <ol> <li>make looks for a file named \"Makefile\" or \"makefile\" in the current directory.</li> <li>If found, it looks for the first target file (target) in the file. In the example above, it finds the \"main\" file and uses it as the final target file.</li> <li>If the main file does not exist, or if the modification time of the <code>.o</code> files it depends on is newer than the <code>main</code> file, it executes the commands defined later to generate the <code>main</code> file.</li> <li>If the <code>.o</code> files that <code>main</code> depends on do not exist, make looks for the dependencies of the <code>.o</code> files in the current file. If found, it generates the <code>.o</code> files according to that rule. (like a stack process)</li> <li>Obviously, your C and Header files exist, so make generates the <code>.o</code> files and then uses them to generate make's ultimate task, the executable <code>main</code>.</li> </ol>"},{"location":"laben/lab2/#make-clean","title":"make clean","text":"<p>From the above analysis, we know that commands like clean, which are not directly or indirectly associated with the first target file, will not be executed automatically. However, we can explicitly ask make to execute them. For example, the command <code>make clean</code> clears all object files for recompilation.</p> <p>For more information about Makefile, refer to: How to Write Makefile 1.0 Documentation</p>"},{"location":"qrh/csr/","title":"\u4ec0\u4e48\u662f CSR","text":"<p>CSR \u5b9a\u4e49</p> <p>CSR Field Specifications: </p> <ul> <li>WPRI</li> <li>WLRL</li> <li>WARL</li> </ul>"},{"location":"qrh/gdb/","title":"GDB","text":""},{"location":"qrh/git/","title":"Git","text":"<p>\u50cf Git \u8fd9\u6837\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u663e\u7740\u5f71\u54cd\u4e86\u73b0\u4ee3\u8f6f\u4ef6\u5f00\u53d1\uff0c\u8fd9\u9700\u8981\u5408\u4f5c\u548c\u5feb\u901f\u8fed\u4ee3\u3002 \u4f60\u4eec\u5e94\u8be5\u5728\u6b64\u524d\u7684\u8bf8\u591a\u8bfe\u7a0b\u4e2d\u4e0e Git \u4ea4\u624b\u8fc7\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u4f7f\u7528 GitLab\u3002</p>"},{"location":"qrh/nav/","title":"\u5feb\u901f\u53c2\u8003\u624b\u518c","text":"<p>\u672c\u624b\u518c\u4f1a\u8bb0\u5f55\u4f60\u5728\u8fdb\u884c\u64cd\u4f5c\u7cfb\u7edf\u5b9e\u9a8c\u4e2d\u53ef\u80fd\u4f1a\u9047\u5230\u7684\u95ee\u9898\uff0c\u6216\u8005\u9700\u8981\u5b66\u4e60\u7684\u524d\u7f6e\u77e5\u8bc6</p> <ul> <li>GDB \u6559\u7a0b</li> <li>Git \u6559\u7a0b</li> </ul>"},{"location":"qrh/ssh-vscode/","title":"SSH & VSCode \u8fdc\u7a0b\u914d\u7f6e","text":""},{"location":"qrh/ssh-vscode/#ssh","title":"\u865a\u62df\u673a SSH \u914d\u7f6e","text":"<p>SSH \u662f\u4e00\u79cd\u5b89\u5168\u7684\u8fdc\u7a0b\u767b\u9646\u670d\u52a1\u5668\u7684\u65b9\u5f0f\uff0c\u4e3b\u8981\u6709\u4e09\u4e2a\u7528\u9014\uff1a</p> <ol> <li>\u8fdc\u7a0b\u767b\u9646\uff0c\u6253\u5f00\u4e00\u4e2a Shell</li> <li>\u4f7f\u7528 <code>scp</code> \u8fdb\u884c\u6587\u4ef6\u4f20\u8f93</li> <li>\u7aef\u53e3\u8f6c\u53d1</li> </ol> <p>\u6211\u4eec\u53ef\u4ee5\u5728\u7269\u7406\u673a\u4e0a\u4f7f\u7528 SSH \u8fde\u63a5\u5230\u865a\u62df\u673a\u5185\u90e8\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5728\u5bbf\u4e3b\u673a\u7684\u684c\u9762\u73af\u5883\u4e2d\u4f7f\u7528\u865a\u62df\u673a\u3002</p>"},{"location":"qrh/ssh-vscode/#openssh-server","title":"\u5b89\u88c5 openssh-server","text":"<p>\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165\uff1a<code>sudo apt install openssh-server</code></p> <p></p> <p>\u8f93\u5165 y \u56de\u8f66\u786e\u5b9a</p>"},{"location":"qrh/ssh-vscode/#ip","title":"\u67e5\u770b\u865a\u62df\u673a ip \u5730\u5740","text":"<p>\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165\uff1a<code>ip a</code>\uff1a</p> <p></p> <p>\u67d0\u4e2a\u4ee5 <code>ens</code> \u6216 <code>enp</code> \u6216 <code>eth</code> \u5f00\u5934\u7684\u7f51\u5361\u4e0b\u9762\uff0cinet \u540e\u9762\u8ddf\u7684\u5730\u5740\u5373\u662fvm\u7684ip\u5730\u5740\u3002</p>"},{"location":"qrh/ssh-vscode/#ssh_1","title":"SSH \u767b\u9646","text":"<p>\u5728\u4f60\u7684\u7269\u7406\u673a\u4e0a\uff1a</p> <ul> <li> <p>Windows \u7528\u6237\uff1a\u6253\u5f00 Windows Terminal\uff0c\u8fdb\u5165 PowerShell</p> </li> <li> <p>macOS \u7528\u6237\uff1a\u6253\u5f00\u7ec8\u7aef (Terminal)</p> </li> </ul> <p>\u8f93\u5165 <code>ssh oslab@vm\u7684ip</code>\uff1a</p> <p></p> <p>\u9996\u6b21\u767b\u9646\u4f1a\u9700\u8981\u786e\u8ba4\u516c\u94a5\uff0c\u8f93\u5165y\u56de\u8f66\u786e\u8ba4\u5373\u53ef\u3002</p> <p>\u6211\u4eec\u5148\u4f7f\u7528\u5bc6\u7801\u767b\u9646\uff0coslab\u7684\u9ed8\u8ba4\u5bc6\u7801\u662f 123456\u3002</p>"},{"location":"qrh/ssh-vscode/#ssh_2","title":"\u8bbe\u7f6e SSH \u5bc6\u94a5\u767b\u9646","text":"<p>SSH \u5bc6\u94a5\u662f\u4e00\u5bf9\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u5bc6\u94a5\uff0c\u5206\u4e3a\u516c\u94a5\u548c\u79c1\u94a5\u3002</p> <p>\u79c1\u94a5\u662f\u4fdd\u5bc6\u7684\uff0c\u9ed8\u8ba4\u5b58\u50a8\u5728 <code>$USER/.ssh/</code> \u76ee\u5f55\u4e0b\uff0c\u4ee5 <code>id_</code> \u5f00\u5934\u3002\u516c\u94a5\u662f\u53ef\u4ee5\u516c\u5f00\u7684\uff0c\u6587\u4ef6\u540d\u901a\u5e38\u662f <code>id_xxx.pub</code> \uff0c\u6211\u4eec\u5c06\u628a\u5b83\u653e\u5230\u865a\u62df\u673a\u91cc\u9762\uff0c\u8868\u793a\u865a\u62df\u673a\u5c06\u5141\u8bb8\u4f7f\u7528\u8be5\u79c1\u94a5\u767b\u9646\u3002</p> <p>\u5728\u7269\u7406\u673a\u7684\u7ec8\u7aef\u4e0a\u8f93\u5165 <code>ssh-keygen</code> \u8fd9\u5c06\u751f\u6210\u4e00\u5bf9\u516c\u79c1\u94a5\u5bf9\u3002</p> <p></p> <p>\u8f93\u5165 <code>cat ~/.ssh/id_ed25519.pub</code> \uff0c\u663e\u793a\u5176\u5185\u5bb9\uff1a</p> <p></p> <p>\u5728\u865a\u62df\u673a\u4e2d \uff1a<code>vim ~/.ssh/authorized_keys</code></p> <p></p> <p>\u6309 i \u8fdb\u5165 insert mode\uff0c\u53f3\u952e\u7c98\u8d34\u3002</p> <p></p> <p>\u6309 ESC \u9000\u51fa insert mode\uff0c\u8f93\u5165 <code>:wq</code> \u4fdd\u5b58\u5e76\u9000\u51fa\u3002</p> <p></p> <p>\u4e4b\u540e\u6211\u4eec\u5728\u7269\u7406\u673a\u4e0a\u4f7f\u7528 ssh \u767b\u9646\u4e0d\u518d\u9700\u8981\u5bc6\u7801\u3002</p>"},{"location":"qrh/ssh-vscode/#scp","title":"scp \u62f7\u8d1d\u6587\u4ef6","text":"<p>\u8bf7\u67e5\u9605 <code>man scp</code>\u3002</p> <p>scp \u547d\u4ee4\u7684\u4e3b\u8981\u683c\u5f0f\u4e3a\uff1a<code>scp [OPTIONS] source ... target</code></p> <p>\u5982\u679c source \u6216 target \u662f SSH \u76ee\u6807\uff0c\u5219\u4f7f\u7528 <code>user@host:file_path</code> \u7684\u683c\u5f0f\u6307\u5b9a\u8fdc\u7a0b\u76ee\u6807\u4e0a\u7684\u6587\u4ef6\u8def\u5f84</p> <p>\u4f8b\u5982 <code>scp -r oslab@192.168.231.128:~/Desktop/SUSTechOS ~/Desktop</code> \u662f\u5c06\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u9762\u7684 <code>~/Desktop/SUSTechOS</code> \u76ee\u5f55\u6574\u4e2a\u590d\u5236\u5230\u5bbf\u4e3b\u673a\u7684\u684c\u9762\u4e0a\u3002</p> <p></p>"},{"location":"qrh/ssh-vscode/#vscode-ssh","title":"vscode SSH \u63d2\u4ef6","text":"<p>\u5728 VSCode \u4e2d\u5b89\u88c5\u8fd9\u4e2a\u63d2\u4ef6\uff1a</p> <p></p> <p>\u4f7f\u7528 Ctrl + Shift + P \u6253\u5f00\u547d\u4ee4\u7a97\u53e3\uff0c\u5728 <code>&gt;</code> \u63d0\u793a\u7b26\u540e\u9762\u8f93\u5165 ssh</p> <p></p> <p>\u9009\u62e9 <code>Remote-SSH: Connect to Host</code> \u56de\u8f66\u786e\u8ba4</p> <p></p> <p>\u8f93\u5165 <code>oslab@ip\u5730\u5740</code>\uff0c\u5e76\u4fdd\u5b58\u914d\u7f6e\uff0c\u7b2c\u4e00\u6b21\u8fde\u63a5\u4f1a\u9009\u62e9\u8fdc\u7a0b\u670d\u52a1\u5668\u73af\u5883\uff0c\u9009\u62e9 Linux\u3002</p> <p>\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5728 VSCode \u4e2d\u6253\u5f00 SSH \u76ee\u6807\u4e0a\u7684 Workspace\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u6253\u5f00 <code>~/Desktop/SUSTechOS</code>\uff0c\u5373\u53ef\u5728\u5bbf\u4e3b\u673a\u4e0a\u7f16\u8f91\u6211\u4eec\u7684\u5185\u6838\u4ee3\u7801\uff0c\u5e76\u5728vscode \u7684 terminal \u7a97\u53e3\u4e2d\u4f7f\u7528 <code>make run</code>\u8fd0\u884c\u3002</p> <p></p>"},{"location":"qrh/vf2/","title":"VisionFive2 \u677f\u5b50\u6559\u7a0b","text":""},{"location":"qrh/vf2/#visionfive2","title":"VisionFive2 \u5f00\u53d1\u677f\u4f7f\u7528\u6559\u7a0b","text":"<p>\u6211\u4eec\u4f1a\u53d1\u4ee5\u4e0b\u6750\u6599\uff0c\u8bf7\u6838\u5bf9\u6e05\u5355\uff1a</p> <ul> <li>VisionFive 2 \u5f00\u53d1\u677f</li> <li>nanoDAP \u8c03\u8bd5\u5668</li> <li>\u675c\u90a6\u7ebf\u82e5\u5e72\uff0810\u6839\u4ee5\u4e0a\uff09</li> <li>\u4e00\u5f20 32G SD\u5361</li> <li>\u4e00\u4e2a\u8bfb\u5361\u5668</li> </ul> <p>\u8bf7\u4f60\u81ea\u884c\u51c6\u5907\u4e00\u4e2a\u624b\u673a\u5145\u7535\u5668\u5934\uff0c\u548c Type-C \u7ebf\u3002</p> <p>\u62c6\u5f00\u5305\u88c5\u540e\uff0c\u8bf7\u4f60\u5c06\u4e00\u4e0b\u5185\u5bb9\u7269\u4ea4\u8fd8\u5230\u8bb2\u53f0\uff1a</p> <ul> <li>\u5199\u6709 \u201c\u6609\u00b7\u661f\u5149 VisionFive 2\u201d \u7684\u7eb8\u58f3</li> <li>\u9ed1\u8272\u9759\u7535\u888b</li> <li>\u4e00\u5305\u88c5\u6709\u5851\u6599\u87ba\u4e1d\u811a\u57ab\u7684\u888b\u5b50</li> <li>\uff08\u5982\u6709\uff09\u4e00\u4e2a\u7528\u888b\u5b50\u88c5\u7740\u7684 USB \u7f51\u5361</li> </ul> <p>\u5176\u4f59\u5783\u573e\u8bf7\u8bfe\u540e\u81ea\u884c\u5904\u7406\u3002</p> <p></p>"},{"location":"qrh/vf2/#_1","title":"\u5b89\u88c5\u5de5\u5177","text":"<p>\u5728 VM \u4e2d\uff1a<code>sudo apt install minicom</code> \u5b89\u88c5\u4e32\u53e3\u5de5\u5177 minicom\u3002</p> <p></p>"},{"location":"qrh/vf2/#uart","title":"\u8fde\u63a5 UART \u63a5\u53e3","text":"<p>\u4f7f\u7528 \u4e09\u6839 \u675c\u90a6\u7ebf\u8fde\u63a5\u677f\u5b50\u4e0a\u7684 GND, UART TX, UART RX \u7aef\u53e3\u3002</p> <p>\u7528\u53f3\u4e0a\u89d2\u7684 Pin 6, 8, 10\u3002 \u6ce8\u610f\u4e0d\u8981\u8fde\u63a5\u5230 5V Power \u4e0a\u9762\uff01\uff01</p> <p></p> <p>\u5b9e\u62cd\u56fe\uff1a</p> <p></p> <p>\u5c06\u677f\u5b50\u4e0a\u7684 GND, UART TX, UART RX \u5206\u522b\u8fde\u63a5\u5230\u8c03\u8bd5\u5668\u4e0a\u7684 GND, U_RX, U_TX \u4e0a\u9762\uff0c\u6ce8\u610f UART \u7684 RX \u548c TX \u662f\u4ea4\u53c9\u7684\uff0c\u8c03\u8bd5\u5668\u6b63\u53cd\u9762\u90fd\u6709\u7aef\u53e3\u63d0\u793a\u3002</p> <p></p> <p>\u4e0d\u8981\u63a5\u8c03\u8bd5\u5668\u4e0a\u9762\u7684 5V \u548c 3V3 \uff01\uff01\uff01\uff01 \u4e5f\u4e0d\u8981\u8bd5\u56fe\u901a\u8fc7\u8c03\u8bd5\u5668\u7ed9 VisionFive2 \u677f\u5b50\u4f9b\u7535\uff01\uff01</p>"},{"location":"qrh/vf2/#vm","title":"\u8fde\u63a5\u5230 VM","text":"<p>\u542f\u52a8 VMware \u4e2d\u7684\u865a\u62df\u673a\u3002</p> <p>\u5c06\u8c03\u8bd5\u5668\u63d2\u5165\u7535\u8111USB\u53e3\uff08macOS \u7528\u6237\u8bf7\u81ea\u5907 Type-C \u5230 USB-A \u8f6c\u63a5\u5668\uff09\uff0c\u4f60\u5e94\u8be5\u4f1a\u6536\u5230\u4ee5\u4e0b\u63d0\u793a\u3002</p> <p></p> <p>\u9009\u62e9 <code>Conenct to a virtual machine</code>\u3002\u5c06\u8c03\u8bd5\u5668\u8fde\u63a5\u81f3\u865a\u62df\u673a\u4e2d\u3002\u5982\u679c\u4f60\u6ca1\u6709\u770b\u5230\u8fd9\u4e2a\u7a97\u53e3\u6216\u9519\u8fc7\u4e86\uff0c\u4f60\u53ef\u4ee5\u5728\u83dc\u5355\u680f\u4e2d\u9009\u62e9 <code>VM -&gt; Removable Devices -&gt; NXP DAPLink CMSIS-DAP -&gt; Connect (Disconnect from Host)</code>\u3002</p> <p></p> <p>\u5728\u865a\u62df\u673a\u7684\u7ec8\u7aef\u4e2d\uff0c\u6267\u884c <code>lsusb</code>\uff0c\u4f60\u5e94\u8be5\u80fd\u770b\u5230\u4e00\u9879 \"NXP ARM mbed\" \u7684\u9879\u76ee\uff0c\u5982\u679c\u770b\u4e0d\u5230\uff0c\u8bf7\u62a5\u544a\u52a9\u6559\u3002</p> <p></p> <p>\u5728\u7ec8\u7aef\u4e2d\u6267\u884c\uff1a<code>ls /dev/tty*</code> \u4f60\u5e94\u8be5\u80fd\u770b\u5230\u4e00\u9879\u4e3a <code>/dev/ttyACM0</code> \uff0c\u8fd9\u5c31\u662f\u4e32\u53e3\u8bbe\u5907\u3002\u5982\u679c\u770b\u4e0d\u5230\uff0c\u8bf7\u62a5\u544a\u52a9\u6559\u3002</p> <p>\u5728\u7ec8\u7aef\u4e2d\u6267\u884c\uff1a<code>sudo usermod -aG dialout oslab</code>\uff0c\u8f93\u5165\u5bc6\u7801\u786e\u8ba4\u540e\u91cd\u542f\u865a\u62df\u673a\u3002</p> <p>\u91cd\u542f\u540e\uff0c\u5728\u7ec8\u7aef\u4e2d\u6267\u884c\uff1a<code>id</code>\uff0c\u4f60\u5e94\u8be5\u4f1a\u770b\u5230 gid \u540e\u9762\u6709\u4e00\u9879 dialout\u3002</p> <p></p> <p>\u5728\u7ec8\u7aef\u4e2d\u6267\u884c <code>sudo minicom -s</code> \u8bbe\u7f6e minicom \u5de5\u5177\uff0c\u4f60\u4f1a\u8fdb\u5165\u5982\u4e0b\u754c\u9762\uff0c\u4f7f\u7528\u4e0a\u4e0b\u5de6\u53f3\u3001ESC\u3001Enter\u8fdb\u884c\u79fb\u52a8\u3002</p> <p></p> <p>\u8fdb\u5165 <code>Serial port setup</code>\uff0c\u6309 A \u7f16\u8f91 <code>Serial Device</code> \u8fd9\u4e00\u9879\uff0c\u5c06\u5176\u6539\u4e3a <code>/dev/ttyACM0</code></p> <p></p> <p>\u56de\u8f66\u786e\u8ba4\u4e24\u6b21\uff0c\u56de\u5230 <code>configuration</code> \u754c\u9762\uff0c\u9009\u62e9 <code>Save setup as dfl</code> \u56de\u8f66\u786e\u8ba4\uff0c\u4f60\u5e94\u8be5\u80fd\u770b\u5230 <code>Configuration Saved</code> \u63d0\u793a\u3002</p> <p>\u9009\u62e9 Exit \u9000\u51fa\u914d\u7f6e\u9875\u9762\uff0c\u8fdb\u5165 minicom \u7ec8\u7aef\uff0c\u4f7f\u7528 Ctrl A + X \u9000\u51fa minicom\u3002</p> <p></p> <p>\u4f7f\u7528\u666e\u901a\u7528\u6237 oslab \u6267\u884c minicom\uff0c\u4f60\u5e94\u8be5\u80fd\u6b63\u5e38\u6253\u5f00\u4e32\u53e3\u3002</p> <p></p>"},{"location":"qrh/vf2/#_2","title":"\u677f\u5b50\u4e0a\u7535","text":"<p>\u5728\u6253\u5f00 minicom \u7684\u60c5\u51b5\u4e0b\uff0c\u7528 Type-C \u53e3\u7ed9\u677f\u5b50\u4f9b\u7535\u3002</p> <p>\u4f60\u5e94\u8be5\u80fd\u770b\u5230\u677f\u5b50 Type-C \u63a5\u53e3\u65c1\u8fb9\u6709\u4e00\u4e2a\u7ea2\u8272 LED \u4eae\u8d77\uff0c\u540c\u65f6\u4e32\u53e3\u754c\u9762\u6709\u663e\u793a\u3001\u8c03\u8bd5\u5668\u4e0a\u95ea\u70c1\u7eff\u706f\uff1a</p> <pre><code>U-Boot SPL 2025.01-dirty (Feb 21 2025 - 21:15:06 +0800)\nDDR version: dc2e84f0.\nTrying to boot from SPI\n\nOpenSBI v1.5.1\n   ____                    _____ ____ _____\n  / __ \\                  / ____|  _ \\_   _|\n | |  | |_ __   ___ _ __ | (___ | |_) || |\n | |  | | '_ \\ / _ \\ '_ \\ \\___ \\|  _ &lt; | |\n | |__| | |_) |  __/ | | |____) | |_) || |_\n  \\____/| .__/ \\___|_| |_|_____/|____/_____|\n        | |\n        |_|\n\nPlatform Name             : StarFive VisionFive 2 v1.3B                         \nPlatform Features         : medeleg                                             \n...\n\nU-Boot 2025.01-dirty (Feb 21 2025 - 21:15:06 +0800)                             \n\nCPU:   sifive,u74-mc                                                            \nModel: StarFive VisionFive 2 v1.3B                                              \nDRAM:  4 GiB                                                                    \nCore:  136 devices, 26 uclasses, devicetree: board                              \nWDT:   Not starting watchdog@13070000                                           \nMMC:   mmc@16010000: 0, mmc@16020000: 1\n\nStarFive EEPROM format v2                                                             \n\n--------EEPROM INFO--------                                                           \nVendor : StarFive Technology Co., Ltd.                                                \nProduct full SN: VF7110B1-2253-D004E000-40000798                                      \ndata version: 0x2                                                                     \nPCB revision: 0xb2                                                                    \nBOM revision: A                                                                       \nEthernet MAC0 address: 6c:cf:39:00:6c:bc                                              \nEthernet MAC1 address: 6c:cf:39:00:6c:bd                                              \n--------EEPROM INFO--------                                                           \n..\n\nStarFive #\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230 OpenSBI \u52a0\u8f7d\u548c U-Boot \u52a0\u8f7d\uff0c\u6700\u540e\u6709\u4e00\u4e2a <code>StarFive #</code> \u7684\u547d\u4ee4\u63d0\u793a\u7b26\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e3a uboot \u7ec8\u7aef\u3002</p> <p>.</p>"},{"location":"qrh/vf2/#xv6","title":"\u8fd0\u884c xv6 \u5185\u6838","text":"<p>\u5728 minicom \u4e0b\uff0c\u677f\u5b50\u542f\u52a8\u5b8c\u6210\u540e\uff0c\u51fa\u73b0 uboot \u7ec8\u7aef</p> <p>\u4f7f\u7528\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff0ccd \u5230\u5185\u6838\u4ee3\u7801\u76ee\u5f55\u4e0b\uff0c<code>make</code> \u7f16\u8bd1\u5185\u6838\uff0c\u7136\u540e cd \u5230 <code>build</code> \u76ee\u5f55\u4e0b\uff1a</p> <p></p> <p>\u6267\u884c pwd \u4ee5\u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\uff0c\u53f3\u952e\u62f7\u8d1d\u3002</p> <p>\u5728 uboot \u7ec8\u7aef\u4e0b\u6267\u884c\uff1a<code>loadx</code>\uff1a</p> <p></p> <p>\u6309 Ctrl A + S\uff0c\u6253\u5f00 <code>[Upload]</code> \u63d0\u793a\u6846\uff0c</p> <p></p> <p>\u9009\u62e9 <code>xmodem</code>\uff0c\u5207\u6362\u5230 <code>[Goto]</code>\uff0c\u7136\u540e\u56de\u8f66\uff0c\u5728 <code>Goto directory</code> \u4e0b\u9762\u7c98\u8d34\u6211\u4eec\u4e4b\u524d\u590d\u5236\u7684 build \u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\uff0c\u56de\u8f66\u786e\u8ba4\u3002</p> <p></p> <p>\u5de6\u53f3\u79fb\u52a8\u5149\u6807\u5230 <code>[Okay]</code>\uff0c\u4e0a\u4e0b\u79fb\u52a8\u5149\u6807\u5230 <code>kernel</code> \u8fd9\u4e00\u9879\uff0c\u7136\u540e\u7a7a\u683c\u9009\u4e2d\uff0c</p> <p></p> <p>\u7136\u540e\u56de\u8f66\u786e\u8ba4\uff0c\u5f00\u59cb\u4e0a\u4f20\u3002</p> <p></p> <p>\u4e0a\u4f20\u7ed3\u675f\u540e\uff0c<code>[xmodem upload]</code> \u7a97\u53e3\u6d88\u5931\uff0cuboot\u7ec8\u7aef\u4e0b\u4f1a\u63d0\u793a <code>##Total Size</code> \u548c <code>## Start Addr</code>\u3002</p> <p></p> <p>\u6267\u884c\u547d\u4ee4 <code>bootelf -p</code>\uff0c\u7136\u540e\u6267\u884c <code>go 0x80200000</code></p> <p>uboot \u7ec8\u7aef\u5e94\u8be5\u4f1a\u63d0\u793a <code>## Starting application at 0x80200000 ...</code>\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u6211\u4eec\u7684\u5185\u6838\uff0c\u6700\u7ec8 sh \u542f\u52a8\u6210\u529f\u3002</p> <p></p>"}]}